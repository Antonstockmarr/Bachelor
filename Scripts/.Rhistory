model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleFull[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+MeanSeaLevelPressure+Radiation+AutumnBreak+ChristmasBreak+Weekend, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lmMultipleFull[[i]])
title(paste("Daily consumption for house ", i, "using multiple lm"), outer=TRUE, adj = 0.5, line = -1.25)
# Testing for normality
s.test[[i]] <- shapiro.test(lmMultipleFull[[i]]$residuals)
print(s.test[[i]]$p.value)
lmFull_est_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,1]
lmFull_p_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,4]
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
s.test <- vector(mode = "list", length = n)
lm.simple <- vector(mode = "list", length = n)
model.data <- weatherCons
for (i in 1:n) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple[[i]] <- lm(Consumption ~ Temperature, data = model.tmp)
print(summary(lm.simple[[i]]))
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lm.simple[[i]])
title(paste("Daily consumption for house ", i, "using simple lm"), outer=TRUE, adj = 0.5, line = -1.25)
# Testing for normality
s.test[[i]] <- shapiro.test(lm.simple[[i]]$residuals)
print(s.test[[i]]$p.value)
}
for (i in 1:n) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple[[i]] <- lm(Consumption ~ Temperature, data = model.tmp)
#print(summary(lm.simple[[i]]))
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lm.simple[[i]])
title(paste("Daily consumption for house ", i, "using simple lm"), outer=TRUE, adj = 0.5, line = -1.25)
# Testing for normality
s.test[[i]] <- shapiro.test(lm.simple[[i]]$residuals)
print(s.test[[i]]$p.value)
}
for (i in 1:n) {
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
if(lmFull_p_S[i,j]<0.01){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
if(lmFull_p_S[i,j]<0.001){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
}else if(lmFull_p_S[i,j]<0.1){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'.')
}
}
}
colnames(lmSummary_star_S) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_S, file = "lmMult_star_S.csv", row.names = TRUE)
star_count_S_array <- lmSummary_star_S
star_count_S_array <- gsub("\\.", "", star_count_S_array)
star_count_S_array <- nchar(star_count_S_array)
star_count_S_array <- star_count_S_array>3
colSums(star_count_S_array)
#summary(stepP(lmMultipleFull[[6]])$object)
#summary(lmMultipleFull[[6]])
# General regression model for comparing houses ---------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
lmSummary_est <- matrix(rep(0,11*n),nrow = n)
lmSummary_p <- matrix(rep(0,11*n),nrow = n)
Wind.Pred <- vector(mode = "list", length = n)
colnames(lmSummary_est) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
colnames(lmSummary_p) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
par(mfrow = c(1,1))
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lmMultiple[[i]]$object)
title(paste("Daily consumption for house ", i), outer=TRUE, adj = 0.5, line = -1.25)
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
# Wind profile plot
par(mfrow = c(1,1))
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ .+Temperature*(N + E + S + W),data = model.Wind)
Splinebasis2 <- BSplines(1:360)
newData = data.frame(Temperature = rep(0, 360), # 0 grader
Radiation = rep(0, 360), # Om natten
N = Splinebasis2[,3],
E = Splinebasis2[,4],
S = Splinebasis2[,1],
W = Splinebasis2[,2])
Wind.Pred[[i]]<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Wind.Pred[[i]]$fit,type='l',ylim=range(Wind.Pred[[i]]$lwr,Wind.Pred[[i]]$upr),main=paste("hus: ",i))
lines(Wind.Pred[[i]]$upr,lty=2)
lines(Wind.Pred[[i]]$lwr,lty=2)
abline(v=c(0,90,180,270,360), col="gray", lty=2, lwd=1)
}
t.est <- as.table(lmSummary_est)
# Saving estimates in a .csv file
write.csv2(t.est, file = "lmMult_est.csv", row.names = TRUE)
t.pvalues <- as.table(lmSummary_p)
# Saving p-values in a .csv file
write.csv2(t.pvalues, file = "lmMult_pvalues.csv", row.names = TRUE)
# Making +*** table
lmSummary_star <- matrix(rep('',12*n),nrow = n)
for(i in 1:n){
lmSummary_star[i,1]<-i
for(j in 2:12){
if(lmSummary_est[i,j-1]<0){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'-')
}else{
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'+')
}
if(lmSummary_p[i,j-1]<0.05){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
if(lmSummary_p[i,j-1]<0.01){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
if(lmSummary_p[i,j-1]<0.001){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
}else if(lmSummary_p[i,j-1]<0.1){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'.')
}
}
}
colnames(lmSummary_star) <- c("HouseIndex","I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star, file = "lmMult_star.csv", row.names = TRUE)
write.csv2(lmSummary_star[Long,], file = "lmMult_L_star.csv", row.names = TRUE)
write.csv2(lmSummary_star[Short,], file = "lmMult_S_star.csv", row.names = TRUE)
star_count_array <- lmSummary_star
star_count_array <- gsub("\\.", "", star_count_array)
star_count_array <- nchar(star_count_array)
star_count_array <- star_count_array>3
colSums(star_count_array)/n
# Counting negative estimates
sum(lmSummary_est[,3:6] < 0) / sum(lmSummary_est[,3:6] < 1000000)
sum(lmSummary_est[,8:11] < 0) / sum(lmSummary_est[,8:11] < 1000000)
# Investigating parameters from model
summary(lmMultipleNoP[[1]])
par(mfrow=c(2,2))
# Checking model assumptions
for (i in 1:n)
{
plot(lmMultiple[[i]]$object)
}
# Saving slopes and p-values
modelListSlope <- vector(mode="list",length=n)
modelListPval <- vector(mode="list",length=n)
for (i in 1:n)
{
modelListSlope[[i]] = lmMultiple[[i]]$object #for slopes
modelListPval[[i]] = summary(lmMultiple[[i]]$object)$coefficients #for p vals
}
length(data)
length(data[[1]])
dim(data[[1]])
dim(data[[1]])[1]
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-k)]
}
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),2:dim(Dataset[[i]])[2]]
}
return(Train)
}
train=TrainDays(data,31)
data[[i]][1:(dim(data[[1]])[1]-days),2:dim(data[[1]])[2]]
data[[i]][1:(dim(data[[1]])[1]-31),2:dim(data[[1]])[2]]
train
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
}
return(Train)
}
train=TrainDays(data,31)
train
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
Test=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
Test[[i]]<-Dataset[[i]][ni+(1:days),]
}
return(list(Train,Test))
}
train=TrainDays(data,31)
train$Train
train
train[[1]]
TrainTest=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
Test=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
Test[[i]]<-Dataset[[i]][ni+(1:days),]
}
return(list(Train,Test))
}
BBR$Hustype
BBR$Hustype[28]
sum(BBR$Hustype=="Erhverv")
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/data.R', echo=TRUE)
source("TrainTest.R")
ttd<-TrainTest(day.data,31)
ttd<-TrainTest(weatherCons,31)
ttd[[1]][[i]]
i<-1
ttd[[1]][[i]]
newData = ttd[[2]][[i]]
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/Predictions.R', echo=TRUE)
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/Predictions.R', echo=TRUE)
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple[[i]] <- lm(Consumption ~ Temperature, data = model.tmp)
#print(summary(lm.simple[[i]]))
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lm.simple[[i]])
title(paste("Daily consumption for house ", i, "using simple lm"), outer=TRUE, adj = 0.5, line = -1.25)
# Testing for normality
s.test[[i]] <- shapiro.test(lm.simple[[i]]$residuals)
print(s.test[[i]]$p.value)
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0),mfrow=c(1,1),xpd=FALSE)
source("data.R")
source("stepP.R")
source("BSplines.R")
source("CircleCol.R")
# Initializing vectors containing "long" and "short" houses
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("data.R")
source("TrainTest.R")
source("BSplines.R")
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
GGally::ggpairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
?ggpairs
GGally::ggpairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
source("data.R")
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Example using Watts colors
plot(data[[1]]$Flow,col=Wcol[2])
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
# House pairs
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
GGally::ggpairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
# Weather pairs
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
GGally::ggpairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
# Combining the two dataframes to a single one
tmp.dat <-data.frame(tmp.d1[,-c(5,14)],SunHour = tmp.d2[,2],Obs=tmp.d2[,3])
# Combining Radiation with sunhour
tmp.dat$Radiation <- tmp.dat$SunHour*tmp.dat$Radiation
day.weather <-tmp.dat
# Switching the rows, such that the newest days are first
day.weather <- day.weather[dim(day.weather)[1]:1,]
# WindSpeed and WindDirection transformed to a daily average.
tmp.rekt <- matrix(data=rep(0,length(weather$ObsTime)*2),ncol=2)
pairs(day.avg[c('Consumption', 'Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree')])
ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point()
library(ggplot2)
ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point()
ggplot(data = day.avg, aes(x = c(Flow,Volume), y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")# Weather pairs
par(mfrow = c(3,3))
ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
par(mfrow = c(2,3))
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point()
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point()
plot3 <- ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point()
plot4 <- ggplot(data = day.avg, aes(x = TemperatureOut, y= Consumption)) + geom_point()
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point()
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point()
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2)
library(gridExtra)
par(mfrow = c(2,3))
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot3 <- ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot4 <- ggplot(data = day.avg, aes(x = TemperatureOut, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point()
+ geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2)
par(mfrow = c(2,3))
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot3 <- ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot4 <- ggplot(data = day.avg, aes(x = TemperatureOut, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2)
par(mfrow = c(2,3))
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot3 <- ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot4 <- ggplot(data = day.avg, aes(x = TemperatureOut, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 5)
par(mfrow = c(2,3))
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot3 <- ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot4 <- ggplot(data = day.avg, aes(x = TemperatureOut, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point() + geom_smooth(col=Wcol[2], se = T) + ylab("Consumption")
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2, ncol = 3)
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point() + ylab("Consumption")
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2, ncol = 3)
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point() + ylab("Consumption")
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point() + ylab("Consumption")
plot3 <- ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point() + ylab("Consumption")
plot4 <- ggplot(data = day.avg, aes(x = TemperatureOut, y= Consumption)) + geom_point() + ylab("Consumption")
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point() + ylab("Consumption")
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2, ncol = 3)
plot6 <- ggplot(data = c(day.avg,day.tmp), aes(x = day.tmp[Windspeed], y= Consumption)) + geom_point() + ylab("Consumption")
plot6 <- ggplot(aes(x = day.tmp[Windspeed], y= day.avg[Consumption])) + geom_point() + ylab("Consumption")
plot6 <- ggplot(data = day.tmp, aes(x = Windspeed, y= day.avg[Consumption])) + geom_point() + ylab("Consumption")
plot6
plot6 <- ggplot(data = day.tmp, aes(x = Windspeed, y= Consumption)) + geom_point() + ylab("Consumption")
plot6
plot6 <- ggplot(data = day.tmp, aes(x = WindSpeed, y= Consumption)) + geom_point() + ylab("Consumption")
plot6
day.tmp$Consumption <- day.avg$Consumption
plot6 <- ggplot(data = day.tmp, aes(x = WindSpeed, y= Consumption)) + geom_point() + ylab("Consumption")
plot6
weather[[1]]$PrecipitationProbability
# Sources and packages
source("DataChecking.R")
source("Polarize.R")
source("Sun.R")
library(xts)
library(solaR)
# Watts colorscheme
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Loading all data
data.path = "../Consumption data/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(1,nrow=n)
data <- vector(mode="list", length = n)
day.data <- vector(mode="list", length = n)
data.key <- rep("",n)
# Saving a specific saturday and sunday for the attribute "Weekend"
Weekend=weekdays(as.POSIXlt(c(as.Date('2019-01-26'),as.Date('2019-01-27')),format = "%Y-%m-%d", tz = "GMT"),abbreviate = TRUE)
sat<-substring(Weekend[1],1:2,1:2)
sun<-substring(Weekend[2],1:2,1:2)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
# saving the number of data-set is used.
k <- 0;
# Big for-loop for loading data.
for(i in 1:n){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
# removing weird NA attribute.
dt.tmp$X <- NULL
# Using "EndTime" as "ObsTime" and dropping "StartTime"
dt.tmp <- dt.tmp[,-1]
names(dt.tmp)[1]="ObsTime"
dt.tmp$ObsTime <- strptime(dt.tmp$ObsTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
# Removing data before startdate of weather data
#while(as.POSIXlt(x="2017-12-31 23:00:00",tz="GMT", format = "%Y-%m-%d %H:%M:%S")>=dt.tmp$ObsTime[length(dt.tmp$ObsTime)]){
#  dt.tmp<-dt.tmp[1:(length(dt.tmp$ObsTime)-1),]
#}
# Add logical vairable for weekends
tmp.wd <- as.Date(dt.tmp$ObsTime,tz="GMT")
tmp.wd <-weekdays(tmp.wd,abbreviate = TRUE)
dt.tmp$Weekend <- grepl(intersect(sat,sun),tmp.wd)
#Make a copy before adding NA's.
dt.tmp.noNA<- dt.tmp
# Fill missing null values.
tmp.xts <- xts(dt.tmp[,-1], order.by=dt.tmp[,1])
t1<-rev(seq(from=(tail(dt.tmp$ObsTime,n=1)-hour(tail(dt.tmp$ObsTime,n=1))*60*60), to=(dt.tmp$ObsTime[1]+(23-hour(dt.tmp$ObsTime[1]))*60*60), by="hour"))
d1 <- xts(rep(1,length(t1)), order.by=t1)
x <- merge(d1,tmp.xts,all=TRUE)
tmp.df <- data.frame(ObsTime=index(x),coredata(x[,-1]))
dt.tmp <- tmp.df[dim(tmp.df)[1]:1,]
# Setting parameters for data checking
par = c('min_obs'=1000, 'miss_fraction'=1/20)
# If the data check is ok, store that data set
if (DataChecking(dt.tmp,par)==TRUE)
{
# Keep track of the amount stored datasets.
k=k+1
data[[k]] <- dt.tmp
#Making daily data
tmp.dat <- dt.tmp.noNA
tmp.dat$ObsTime <- as.Date(tmp.dat$ObsTime,tz="GMT")
tmp.dat$Obs <- rep(1,length(tmp.dat$ObsTime))
tmp.d1 <-aggregate(x=tmp.dat[,-1],by= data.frame(Date = tmp.dat[,1]),FUN = mean)
tmp.d2 <-aggregate(x=tmp.dat[,9],by= data.frame(Date = tmp.dat[,1]),FUN = sum)
tmp.dat <-data.frame(tmp.d1[,-9],Obs=tmp.d2[,2])
# Fill missing null values.
tmp.xts <- xts(tmp.dat[,-1], order.by=tmp.dat[,1])
t1<-rev(seq(from=tmp.dat$Date[1], to=tail(tmp.dat$Date,n=1), by="day"))
d1 <- xts(rep(1,length(t1)), order.by=t1)
x <- merge(d1,tmp.xts,all=TRUE)
tmp.df <- data.frame(Date=index(x),coredata(x[,-1]))
tmp.dat <- tmp.df[dim(tmp.df)[1]:1,]
day.data[[k]] <-tmp.dat
data.key[k]<-substr(file.names[i],1,36)
}
}
#removing unused allocated spaces.
if (k<n){
data<-data[-(k+1:n)]
day.data<-day.data[-(k+1:n)]
data.key<-data.key[-(k+1:n)]
Datalengths<-Datalengths[-(k+1:n)]
}
# k is new n
n <- k
#Removing Feb data to get rid of NA
jan1<-day.data[[1]]$Date[1]
for(i in 1:n){
while(day.data[[i]]$Date[1]>jan1){
day.data[[i]]<-day.data[[i]][-1,]
}
# Saving the amount of observations in each table (with NA's).
Datalengths[i]=length(day.data[[i]]$Date)
# Setting start and end times for each table.
EndDays[i]= day.data[[i]]$Date[1]
StartDays[i]=day.data[[i]]$Date[length(day.data[[i]]$Date)]
}
#Removing Feb data from hour data
jan1<-data[[1]]$ObsTime[1]
for(i in 1:n){
while(data[[i]]$ObsTime[1]>jan1){
data[[i]]<-data[[i]][-1,]
}
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_02-06-2019.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(weather)[1]="ObsTime"
weather$ObsTime = strptime(weather$ObsTime,format='%d-%m-%Y %H:%M:%S',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
weather$X <- NULL
weather$Radiation <- Sun(weather$ObsTime[1],tail(weather$ObsTime,n=1))
# Removing the attribute UltraVioletIndex
weather$UltraVioletIndex <- NULL
weather[[1]]$PrecipitationProbability
weather[[18]]$PrecipitationProbability
weather$PrecipitationProbability
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption")
plot7 <- ggplot(data = day.tmp, aes(x = WindSpeed, y= Consumption)) + geom_point() + ylab("Consumption")
plot8 <- ggplot(data = day.tmp, aes(x = WindDirection, y= Consumption)) + geom_point() + ylab("Consumption")
plot9 <- ggplot(data = day.tmp, aes(x = MeanSeaLevelPressure, y= Consumption)) + geom_point() + ylab("Consumption")
plot10 <- ggplot(data = day.tmp, aes(x = DewPoint, y= Consumption)) + geom_point() + ylab("Consumption")
grid.arrange(plot6, plot7, plot8, plot9, plot10, nrow = 2, ncol = 3)
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point() + ylab("Consumption")
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point() + ylab("Consumption")
plot3 <- ggplot(data = day.avg, aes(x = TemperatureIn, y= Consumption)) + geom_point() + ylab("Consumption")
plot4 <- ggplot(data = day.avg, aes(x = TemperatureOut, y= Consumption)) + geom_point() + ylab("Consumption")
plot5 <- ggplot(data = day.avg, aes(x = CoolingDegree, y= Consumption)) + geom_point() + ylab("Consumption")
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2, ncol = 3)
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2, ncol = 3, main = "hej")
?grid.arrange
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2, ncol = 3)
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 3, ncol = 2)
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption")
plot7 <- ggplot(data = day.tmp, aes(x = WindSpeed, y= Consumption)) + geom_point() + ylab("Consumption")
plot8 <- ggplot(data = day.tmp, aes(x = WindDirection, y= Consumption)) + geom_point() + ylab("Consumption")
plot9 <- ggplot(data = day.tmp, aes(x = MeanSeaLevelPressure, y= Consumption)) + geom_point() + ylab("Consumption")
plot10 <- ggplot(data = day.tmp, aes(x = DewPoint, y= Consumption)) + geom_point() + ylab("Consumption")
grid.arrange(plot6, plot7, plot8, plot9, plot10, nrow = 3, ncol = 2)
source("data.R")
# Investigating BBR data --------------------------------------------------
ggplot(data = BBR, aes(x = HouseType)) + geom_histogram()
# Investigating BBR data --------------------------------------------------
ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram()
BBR$TotalArea
BBR$HouseType
# Investigating BBR data --------------------------------------------------
ggplot(data = BBR, aes(x = "Parcel")) + geom_histogram()
# Investigating BBR data --------------------------------------------------
HouseType <- c(BBR$HouseType)
HouseType
# Investigating BBR data --------------------------------------------------
HouseType <- data.frame(c(BBR$HouseType))
plot11 <- ggplot(data = HouseType, aes(x = HouseType)) + geom_histogram()
plot11
plot11 <- ggplot(data = HouseType, aes(x = HouseType)) + geom_histogram(aes(y=..count../sum(..count..)))
plot11
# Investigating BBR data --------------------------------------------------
HouseType <- c(BBR$HouseType)
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(aes(y=..count../sum(..count..)))
plot11
# Investigating BBR data --------------------------------------------------
HouseType <- c(BBR$HouseType)
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(aes(y=..count../sum(..count..)))
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram()
plot11
# HouseType into continous variable
BBR$HouseType == "Parcel" <- 1
# HouseType into continous variable
BBR$HouseType[BBR$HouseType == "Parcel"] <- 1
# Loading BBR data, and sorting it with the key.
tmp.df<-data.frame(Key=data.key)
BBR.tmp <- read.table('../BBRdata.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
BBR <- merge(tmp.df,BBR.tmp)
# HouseType into continous variable
BBR$HouseType <- as.factor(BBR$HouseType)
BBR$HouseType
source("data.R")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram()
# Investigating BBR data --------------------------------------------------
HouseType <- c(BBR$HouseType)
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram()
plot11
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 30)
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 30))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 10))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 1))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 5))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 1))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 10))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 5))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 1))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 6))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 5))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(binwidth = 1))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 10))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 8))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 6))
(plot11 <- ggplot(data = BBR, aes(x = HouseType)) + geom_histogram(bins = 25))
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 25)
grid.arrange(plot11, plot12)
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 25)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 25)
grid.arrange(plot11, plot12)
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 10)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 10)
grid.arrange(plot11, plot12)
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
?ggplot
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = c(0.7, 0.2),
legend.direction = "horizontal")
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = c(0.7, 0.2),
legend.direction = "horizontal"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = c(0.7, 0.2),
legend.direction = "horizontal")) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C")))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C")))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C")))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",
legend.direction = "horizontal")) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",
legend.direction = "horizontal")) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal")) + scale_fill_discrete(name = "House type", labels = c("A", "B", "C"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal")))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal"))
library(grid)
# Investigating BBR data --------------------------------------------------
HouseType <- c(BBR$HouseType)
legend11 <- "Type 1: Parcel"
my_grob = grid.text(legend11, x=0.7,  y=0.8, gp=gpar(col="firebrick", fontsize=14, fontface="bold"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
my_grob = grid.text(legend11, x=0.6,  y=0.8, gp=gpar(col="black", fontsize=14, fontface="bold"))
my_grob = grid.text(legend11, x=0.1,  y=0.9, gp=gpar(col="black", fontsize=14, fontface="bold"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
my_grob = grid.text(legend11, x=0.2,  y=0.9, gp=gpar(col="black", fontsize=14, fontface="bold"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
BBR$HouseType
legend11 <- "Type 1: Industry \n Type 2: Public buildings"
my_grob = grid.text(legend11, x=0.2,  y=0.9, gp=gpar(col="black", fontsize=14, fontface="bold"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.2,  y=0.9, gp=gpar(col="black", fontsize=14, fontface="bold"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.2,  y=0.9, gp=gpar(col="black", fontsize=8, fontface="bold"))
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.2,  y=0.9, gp=gpar(col="black", fontsize=10, fontface="bold"), just = "left")
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.2,  y=0.7, gp=gpar(col="black", fontsize=10, fontface="bold"), just = "left")
# Investigating BBR data --------------------------------------------------
HouseType <- c(BBR$HouseType)
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.2,  y=0.8, gp=gpar(col="black", fontsize=10, fontface="bold"), just = "left")
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.1,  y=0.8, gp=gpar(col="black", fontsize=10, fontface="bold"), just = "left")
(plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob))
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
my_grob = grid.text(legend11, x=0.1,  y=0.7, gp=gpar(col="black", fontsize=10, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
my_grob = grid.text(legend11, x=0.1,  y=0.7, gp=gpar(col="black", fontsize=8, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
my_grob = grid.text(legend11, x=0.1,  y=0.7, gp=gpar(col="black", fontsize=7, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
my_grob = grid.text(legend11, x=0.2,  y=0.7, gp=gpar(col="black", fontsize=7, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.1,  y=0.8, gp=gpar(col="black", fontsize=7, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.1,  y=0.8, gp=gpar(col="black", fontsize=10, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
my_grob = grid.text(legend11, x=0.1,  y=0.8, gp=gpar(col="black", fontsize=12, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
ttd<-TrainTest(model.data,31)
lmMultipleNoP <- vector(mode = "list", length = n)
par(mfrow = c(1,1))
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
model.tmp
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
summary(lmMultipleNoP[[i]])
newData = ttd[[2]][[i]]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
newData
newData = ttd[[2]][[i]]
ttd[[2]][[i]]
ttd[[1]][[1]]
ttd[[2]][[1]]
source("TrainTest.R")
ttd<-TrainTest(model.data,31)
ttd[[2]][[i]]
for (i in 1) {
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
}
Pred
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=paste("hus: ",i))
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=2,col=2)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=paste("hus: ",i))
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
}
max(ttd[[2]][[1]]$Temperature)
qt(0.975,703-3-24)
View(data)
!is.na(data[[i]]$Flow)
is.na(data[[i]]$Flow)
sum(is.na(data[[i]]$Flow))
data[[i]]$Flow
for(i in 1){
!is.na(data[[i]]$Flow)
}
!is.na(data[[i]]$Flow)
tail(!is.na(data[[i]]$Flow))
match(!is.na(data[[i]]$Flow))
which(!is.na(data[[i]]$Flow))
which(is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1)]
for(i in 1){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1)]
}
tail(!is.na(data[[i]]$Flow))
for(i in 1){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1)]
}
for(i in 1){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
}
tmp.dat
nas<-which(!is.na(data[[i]]$Flow))
nas
nas<-which(is.na(data[[i]]$Flow))
nas
nas<-which(is.na(tmp.dat$Flow))
nas
tmp.dat[j,2:]
tmp.dat[j,2:end]
tmp.dat
m<-dim(tmp.dat)
m<-dim(tmp.dat)[2]
tmp.dat[j,2:8]
for(j in nas){
tmp.dat[j,2:8]<-data[[i]][nas[1]:tail(nas,1),]
}
tmp.dat[j,2:8]
warnings()
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
tmp.dat[j,2:m]
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
}
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
}
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
data[[i]]<-tmp.dat
}
for(i in 1:n){
sum(which(is.na(data[[i]]$Flow)))
}
print(sum(which(is.na(data[[i]]$Flow))))
for(i in 1:n){
print(sum(which(is.na(data[[i]]$Flow))))
}
print(nas)
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
print(nas)
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
data[[i]]<-tmp.dat
}
nas<-which(!is.na(data[[i]]$Flow))
nas
nas<-which(is.na(tmp.dat$Flow))
nas
source("data.R")
i=1
nas<-which(!is.na(data[[i]]$Flow))
nas
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
nas
print(nas)
newdata<- data
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
print(nas)
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
newdata[[i]]<-tmp.dat
}
for(i in 1:n){
print(sum(which(is.na(data[[i]]$Flow))))
}
for(i in 1:n){
print(sum(is.na(data[[i]]$Flow)))
}
