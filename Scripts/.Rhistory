model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleFull[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+MeanSeaLevelPressure+Radiation+AutumnBreak+ChristmasBreak+Weekend, data = model.tmp)
lmFull_est_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,1]
lmFull_p_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,4]
}
# Initializing a matrix containing empty strings for "long" houses
lmSummary_star_L <- matrix(rep('',17*length(Long)),nrow = length(Long))
# Adding signs and stars
for(i in 1:length(Long)){
for(j in 1:17){
if(lmFull_est_L[i,j]<0){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'-')
}else{
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'+')
}
if(lmFull_p_L[i,j]<0.05){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
if(lmFull_p_L[i,j]<0.01){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
}
if(lmFull_p_L[i,j]<0.001){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
}
}else if(lmFull_p_L[i,j]<0.1){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'.')
}
}
}
# Printing table
colnames(lmSummary_star_L) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","WinterB","SpringB","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_L, file = "lmMult_star_L.csv", row.names = TRUE)
star_count_L_array <- lmSummary_star_L
star_count_L_array <- gsub("\\.", "", star_count_L_array)
star_count_L_array <- nchar(star_count_L_array)
star_count_L_array <- star_count_L_array>2
colSums(star_count_L_array)/length(Long)
# Initializing a matrix containing empty strings for "short" houses
lmSummary_star_S <- matrix(rep('',15*length(Short)),nrow = length(Short))
for(i in 1:length(Short)){
for(j in 1:15){
if(lmFull_est_S[i,j]<0){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'-')
}else{
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'+')
}
if(lmFull_p_S[i,j]<0.05){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
if(lmFull_p_S[i,j]<0.01){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
if(lmFull_p_S[i,j]<0.001){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
}else if(lmFull_p_S[i,j]<0.1){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'.')
}
}
}
colnames(lmSummary_star_S) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_S, file = "lmMult_star_S.csv", row.names = TRUE)
star_count_S_array <- lmSummary_star_S
star_count_S_array <- gsub("\\.", "", star_count_S_array)
star_count_S_array <- nchar(star_count_S_array)
star_count_S_array <- star_count_S_array>2
colSums(star_count_S_array)/length(Short)
#summary(stepP(lmMultipleFull[[6]])$object)
#summary(lmMultipleFull[[6]])
# General regression model for comparing houses ---------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
lmSummary_est <- matrix(rep(0,11*n),nrow = n)
lmSummary_p <- matrix(rep(0,11*n),nrow = n)
colnames(lmSummary_est) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
colnames(lmSummary_p) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
par(mfrow = c(1,1))
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lmMultiple[[i]]$object)
title(paste("Daily consumption for house ", i), outer=TRUE, adj = 0.5, line = -1.25)
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
#wd2 <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#plot(model.tmp$WindDirection,Splinebasis[,1]*lmSummary_est[i,'N']+Splinebasis[,2]*lmSummary_est[i,'E']
#     +Splinebasis[,3]*lmSummary_est[i,'S']+Splinebasis[,4]*lmSummary_est[i,'W'],ylab='Dependency',xlab='Wind Direction',col=Wcol[2],
#     main= i)
#abline(h=0,v=c(0,90,180,270,360))
BSplin <- matrix(data=Splinebasis %*% diag(lmSummary_est[i,c('N','E','S','W')]),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
#plot(Spline[,1],Spline[,2],col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
#abline(h=0,v=0)
}
t.est <- as.table(lmSummary_est)
# Saving estimates in a .csv file
write.csv2(t.est, file = "lmMult_est.csv", row.names = TRUE)
t.pvalues <- as.table(lmSummary_p)
# Saving p-values in a .csv file
write.csv2(t.pvalues, file = "lmMult_pvalues.csv", row.names = TRUE)
# Making +*** table
lmSummary_star <- matrix(rep('',12*n),nrow = n)
for(i in 1:n){
lmSummary_star[i,1]<-i
for(j in 2:12){
if(lmSummary_est[i,j]<0){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'-')
}else{
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'+')
}
if(lmSummary_p[i,j]<0.05){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
if(lmSummary_p[i,j]<0.01){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
if(lmSummary_p[i,j]<0.001){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
}else if(lmSummary_p[i,j]<0.1){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'.')
}
}
}
colnames(lmSummary_star) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star[Long,], file = "lmMult_L_star.csv", row.names = TRUE)
write.csv2(lmSummary_star[Short,], file = "lmMult_S_star.csv", row.names = TRUE)
star_count_array <- lmSummary_star
star_count_array <- gsub("\\.", "", star_count_array)
star_count_array <- nchar(star_count_array)
star_count_array <- star_count_array>2
colSums(star_count_array)/n
# Adding signs and stars
for(i in 1:length(Long)){
for(j in 1:17){
if(lmFull_est_L[i,j]<0){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'-')
}else{
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'+')
}
if(lmFull_p_L[i,j]<0.05){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
if(lmFull_p_L[i,j]<0.01){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
}
if(lmFull_p_L[i,j]<0.001){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
}
}else if(lmFull_p_L[i,j]<0.1){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'.')
}
}
}
# Printing table
colnames(lmSummary_star_L) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","WinterB","SpringB","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_L[Long,], file = "lmMult_star_L.csv", row.names = TRUE)
star_count_L_array <- lmSummary_star_L
# Making +*** table
lmSummary_star <- matrix(rep('',12*n),nrow = n)
for(i in 1:n){
lmSummary_star[i,1]<-i
for(j in 2:12){
if(lmSummary_est[i,j]<0){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'-')
}else{
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'+')
}
if(lmSummary_p[i,j]<0.05){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
if(lmSummary_p[i,j]<0.01){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
if(lmSummary_p[i,j]<0.001){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
}else if(lmSummary_p[i,j]<0.1){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'.')
}
}
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0),mfrow=c(1,1),xpd=FALSE)
source("data.R")
source("stepP.R")
source("BSplines.R")
source("CircleCol.R")
# Initializing vectors containing "long" and "short" houses
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
# Full regression model ---------------------------------------------------
# Initializing
lmMultipleFull <- vector(mode = "list", length = n)
lmFull_est_L <- matrix(rep(0,17*length(Long)),nrow = length(Long))
lmFull_p_L <- matrix(rep(0,17*length(Long)),nrow = length(Long))
lmFull_est_S <- matrix(rep(0,15*length(Short)),nrow = length(Short))
lmFull_p_S <- matrix(rep(0,15*length(Short)),nrow = length(Short))
# Full regression model for "long" houses
for (i in Long) {
print(paste('Full Model of long house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
# Splines
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleFull[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+MeanSeaLevelPressure+Radiation+WinterBreak+SpringBreak+AutumnBreak+ChristmasBreak+Weekend, data = model.tmp)
# Saving coefficients
lmFull_est_L[match(i,Long),] <- summary(lmMultipleFull[[i]])$coefficients[,1]
lmFull_p_L[match(i,Long),] <- summary(lmMultipleFull[[i]])$coefficients[,4]
}
# Full regression model for "short" houses
for (i in Short) {
print(paste('Full Model of Short house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleFull[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+MeanSeaLevelPressure+Radiation+AutumnBreak+ChristmasBreak+Weekend, data = model.tmp)
lmFull_est_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,1]
lmFull_p_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,4]
}
# Initializing a matrix containing empty strings for "long" houses
lmSummary_star_L <- matrix(rep('',17*length(Long)),nrow = length(Long))
# Adding signs and stars
for(i in 1:length(Long)){
for(j in 1:17){
if(lmFull_est_L[i,j]<0){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'-')
}else{
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'+')
}
if(lmFull_p_L[i,j]<0.05){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
if(lmFull_p_L[i,j]<0.01){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
}
if(lmFull_p_L[i,j]<0.001){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'*')
}
}else if(lmFull_p_L[i,j]<0.1){
lmSummary_star_L[i,j] <-paste(lmSummary_star_L[i,j],'.')
}
}
}
# Printing table
colnames(lmSummary_star_L) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","WinterB","SpringB","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_L[Long,], file = "lmMult_star_L.csv", row.names = TRUE)
star_count_L_array <- lmSummary_star_L
star_count_L_array <- gsub("\\.", "", star_count_L_array)
star_count_L_array <- nchar(star_count_L_array)
star_count_L_array <- star_count_L_array>2
colSums(star_count_L_array)/length(Long)
# Initializing a matrix containing empty strings for "short" houses
lmSummary_star_S <- matrix(rep('',15*length(Short)),nrow = length(Short))
for(i in 1:length(Short)){
for(j in 1:15){
if(lmFull_est_S[i,j]<0){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'-')
}else{
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'+')
}
if(lmFull_p_S[i,j]<0.05){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
if(lmFull_p_S[i,j]<0.01){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
if(lmFull_p_S[i,j]<0.001){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
}else if(lmFull_p_S[i,j]<0.1){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'.')
}
}
}
colnames(lmSummary_star_S) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_S, file = "lmMult_star_S.csv", row.names = TRUE)
star_count_S_array <- lmSummary_star_S
star_count_S_array <- gsub("\\.", "", star_count_S_array)
star_count_S_array <- nchar(star_count_S_array)
star_count_S_array <- star_count_S_array>2
colSums(star_count_S_array)/length(Short)
#summary(stepP(lmMultipleFull[[6]])$object)
#summary(lmMultipleFull[[6]])
# General regression model for comparing houses ---------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
lmSummary_est <- matrix(rep(0,11*n),nrow = n)
lmSummary_p <- matrix(rep(0,11*n),nrow = n)
colnames(lmSummary_est) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
colnames(lmSummary_p) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
par(mfrow = c(1,1))
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lmMultiple[[i]]$object)
title(paste("Daily consumption for house ", i), outer=TRUE, adj = 0.5, line = -1.25)
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
#wd2 <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#plot(model.tmp$WindDirection,Splinebasis[,1]*lmSummary_est[i,'N']+Splinebasis[,2]*lmSummary_est[i,'E']
#     +Splinebasis[,3]*lmSummary_est[i,'S']+Splinebasis[,4]*lmSummary_est[i,'W'],ylab='Dependency',xlab='Wind Direction',col=Wcol[2],
#     main= i)
#abline(h=0,v=c(0,90,180,270,360))
BSplin <- matrix(data=Splinebasis %*% diag(lmSummary_est[i,c('N','E','S','W')]),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
#plot(Spline[,1],Spline[,2],col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
#abline(h=0,v=0)
}
t.est <- as.table(lmSummary_est)
# Saving estimates in a .csv file
write.csv2(t.est, file = "lmMult_est.csv", row.names = TRUE)
t.pvalues <- as.table(lmSummary_p)
# Saving p-values in a .csv file
write.csv2(t.pvalues, file = "lmMult_pvalues.csv", row.names = TRUE)
# Making +*** table
lmSummary_star <- matrix(rep('',12*n),nrow = n)
for(i in 1:n){
lmSummary_star[i,1]<-i
for(j in 2:12){
if(lmSummary_est[i,j]<0){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'-')
}else{
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'+')
}
if(lmSummary_p[i,j]<0.05){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
if(lmSummary_p[i,j]<0.01){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
if(lmSummary_p[i,j]<0.001){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
}else if(lmSummary_p[i,j]<0.1){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'.')
}
}
}
colnames(lmSummary_star) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star[Long,], file = "lmMult_L_star.csv", row.names = TRUE)
write.csv2(lmSummary_star[Short,], file = "lmMult_S_star.csv", row.names = TRUE)
star_count_array <- lmSummary_star
star_count_array <- gsub("\\.", "", star_count_array)
star_count_array <- nchar(star_count_array)
star_count_array <- star_count_array>2
colSums(star_count_array)/n
# Initializing vectors containing "long" and "short" houses
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
# Full regression model ---------------------------------------------------
# Initializing
lmMultipleFull <- vector(mode = "list", length = n)
lmFull_est_L <- matrix(rep(0,17*length(Long)),nrow = length(Long))
lmFull_p_L <- matrix(rep(0,17*length(Long)),nrow = length(Long))
lmFull_est_S <- matrix(rep(0,15*length(Short)),nrow = length(Short))
lmFull_p_S <- matrix(rep(0,15*length(Short)),nrow = length(Short))
# Full regression model for "long" houses
for (i in Long) {
print(paste('Full Model of long house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
# Splines
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleFull[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+MeanSeaLevelPressure+Radiation+WinterBreak+SpringBreak+AutumnBreak+ChristmasBreak+Weekend, data = model.tmp)
# Saving coefficients
lmFull_est_L[match(i,Long),] <- summary(lmMultipleFull[[i]])$coefficients[,1]
lmFull_p_L[match(i,Long),] <- summary(lmMultipleFull[[i]])$coefficients[,4]
}
# Full regression model for "short" houses
for (i in Short) {
print(paste('Full Model of Short house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleFull[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+MeanSeaLevelPressure+Radiation+AutumnBreak+ChristmasBreak+Weekend, data = model.tmp)
lmFull_est_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,1]
lmFull_p_S[match(i,Short),] <- summary(lmMultipleFull[[i]])$coefficients[,4]
}
colSums(star_count_L_array)/length(Long)
star_count_L_array <- lmSummary_star_L
star_count_L_array <- gsub("\\.", "", star_count_L_array)
star_count_L_array <- nchar(star_count_L_array)
star_count_L_array <- star_count_L_array>2
colSums(star_count_L_array)/length(Long)
colSums(star_count_L_array)
# Printing table
colnames(lmSummary_star_L) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","WinterB","SpringB","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_L[Long,], file = "lmMult_star_L.csv", row.names = TRUE)
star_count_L_array <- lmSummary_star_L
star_count_L_array <- gsub("\\.", "", star_count_L_array)
star_count_L_array <- nchar(star_count_L_array)
star_count_L_array <- star_count_L_array>2
colSums(star_count_L_array)
star_count_L_array <- lmSummary_star_L
star_count_L_array
star_count_L_array <- gsub("\\.", "", star_count_L_array)
star_count_L_array
star_count_L_array <- nchar(star_count_L_array)
star_count_L_array
star_count_L_array <- star_count_L_array>2
star_count_L_array
colSums(star_count_L_array)
star_count_L_array <- lmSummary_star_L
star_count_L_array <- gsub("\\.", "", star_count_L_array)
star_count_L_array <- nchar(star_count_L_array)
star_count_L_array
star_count_L_array <- star_count_L_array>3
colSums(star_count_L_array)
colSums(star_count_L_array)
star_count_S_array <- star_count_S_array>3
colSums(star_count_S_array)/length(Short)
# Initializing a matrix containing empty strings for "short" houses
lmSummary_star_S <- matrix(rep('',15*length(Short)),nrow = length(Short))
for(i in 1:length(Short)){
for(j in 1:15){
if(lmFull_est_S[i,j]<0){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'-')
}else{
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'+')
}
if(lmFull_p_S[i,j]<0.05){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
if(lmFull_p_S[i,j]<0.01){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
if(lmFull_p_S[i,j]<0.001){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
}else if(lmFull_p_S[i,j]<0.1){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'.')
}
}
}
colnames(lmSummary_star_S) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_S, file = "lmMult_star_S.csv", row.names = TRUE)
star_count_S_array <- lmSummary_star_S
star_count_S_array <- gsub("\\.", "", star_count_S_array)
star_count_S_array <- nchar(star_count_S_array)
star_count_S_array <- star_count_S_array>3
colSums(star_count_S_array)/length(Short)
colSums(star_count_S_array)
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
two_sd
A
# 18 and 55 for report
for(i in 18){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
A
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[2],lty=2)),lag.max=lagmax,main="")
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[3],lty=2)),lag.max=lagmax,main="")
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
?acf
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
# 18 and 55 for report
for(i in 18){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
# 18 and 55 for report
for(i in 55){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
# The first model
two_sd <- data.frame("ar1"=0,"ma1"=0,'ar2'=0,'ma2'=0,'sar1'=0,'sma1'=0,'intercept'=0, "Temperature"=0)
three_sd <- data.frame("ar1"=0,"ma1"=0,'ar2'=0,'ma2'=0,'sar1'=0,'sma1'=0,'intercept'=0,"Temperature"=0)
logavg <-0
# 18 and 55 for report
for(i in 55){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
# The first model
two_sd <- data.frame("ar1"=0,"ma1"=0,'ar2'=0,'ma2'=0,'sar1'=0,'sma1'=0,'intercept'=0, "Temperature"=0)
three_sd <- data.frame("ar1"=0,"ma1"=0,'ar2'=0,'ma2'=0,'sar1'=0,'sma1'=0,'intercept'=0,"Temperature"=0)
logavg <-0
# 18 and 55 for report
for(i in 1:n){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
# 18 and 55 for report
for(i in 44:n){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
# 18 and 55 for report
for(i in 47:n){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
# 18 and 55 for report
for(i in 64:n){
A <- arima(weatherCons[[i]]$Consumption, order =c(2,2,2), seasonal = list(order = c(0,1,1), period = 24),xreg=weatherCons[[i]]$Temperature)
lagmax = 4*24
print(i)
par(mfrow=c(2,1))
acf(A$residuals,panel.first = c(abline(v=(1:4)*24,col=Wcol[4],lty=2)),lag.max=lagmax,main="")
title(paste("House ",i))
acf(A$residuals,"partial",lag.max = lagmax,panel.first = c(abline(v=(1:4)*24,col="red",lty=2)),main="")
logavg = logavg + A$loglik/n
names(two_sd)[length(two_sd)] <- names(A$coef)[length(names(A$coef))]
names(three_sd)[length(three_sd)] <- names(A$coef)[length(names(A$coef))]
for (j in names(A$coef))
{
if (abs(A$coef[j])< 2*sqrt(diag(vcov(A)))[j])
{
two_sd[j]=two_sd[j]+1
}
if (abs(A$coef[j])< 3*sqrt(diag(vcov(A)))[j])
{
three_sd[j]=three_sd[j]+1
}
}
#if (abs(A$coef['ar1'])< 2*sqrt(diag(vcov(A)))["ar1"])
# {
#   two_sd["ar1"]=two_sd["ar1"]+1
# }
# if (abs(A$coef['ar1'])< 3*sqrt(diag(vcov(A)))["ar1"])
# {
#   three_sd["ar1"]=three_sd["ar1"]+1
# }
# if (abs(A$coef['ma1'])< 2*sqrt(diag(vcov(A)))["ma1"])
# {
#   two_sd["ma1"]=two_sd["ma1"]+1
# }
# if (abs(A$coef['ma1'])< 3*sqrt(diag(vcov(A)))["ma1"])
# {
#   three_sd["ma1"]=three_sd["ma1"]+1
# }
# if (abs(A$coef['sma1'])< 2*sqrt(diag(vcov(A)))["sma1"])
# {
#   two_sd["sma1"]=two_sd["sma1"]+1
# }
# if (abs(A$coef['sma1'])< 3*sqrt(diag(vcov(A)))["sma1"])
# {
#   three_sd["sma1"]=three_sd["sma1"]+1
# }
# if (abs(A$coef['intercept'])< 2*sqrt(diag(vcov(A)))["intercept"])
# {
#   two_sd["intc"] = two_sd["intc"]+1
# }
# if (abs(A$coef['intercept'])< 3*sqrt(diag(vcov(A)))["intercept"])
# {
#   three_sd["intc"] = three_sd["intc"]+1
# }
}
two_sd
three_sd
avglog
logavg
