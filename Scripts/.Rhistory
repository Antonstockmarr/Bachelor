plot(c(190,208,213,223,237,214,221,201,191,184,184,189,188,207,221,225),type="o",xlim=c(1,18),ylim=c(184,250),ylab="combined electricity consumption (GWh)",main="Prediction of seasonal AR model")
points(c(17,18),c(232.6,210.65),col=2,pch=19)
points(c(5,6),c(237,214),col=3,pch=19)
points(c(17,17,18,18),c(232.6+c(-1,1)*qnorm(0.975)*7,210.65+c(-1,1)*qnorm(0.975)*sqrt(61.25)),col=2,pch=3)
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,19,3,19),lty=c(1,NA,NA,NA),col=c(1,2,2,3))
## Q2.3
#model 1
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(12,0,0),ar=c(rep(0,11),0.8)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (0,0,0)x(1,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,12),ar=0.8,ma=c(rep(0,11),0.7)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,1) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(13,0,0),ar=c(0.7,rep(0,10),-0.8,0.56)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(1,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
#model 5
ARMA<- arima.sim(n=200,list(order=c(14,0,0),ar=c(-0.6,-0.6,rep(0,9),-0.8,-0.48,-0.48)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (2,0,0)x(1,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(0,0,13),ma=c(-0.7,rep(0,10),0.8,-0.56)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (0,0,1)x(0,0,1) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
rm(list=ls())
par(mfrow=c(1,1))
set.seed(0)
colors=rainbow(10)
# Simulate 10 ARMA realisations (arima.sim(1,0,2))
dat=matrix(NA, nrow=10,ncol=200)
for(i in 1:10){
dat[i,]=arima.sim(model=list(ar=0.9,ma=c(2,0.5)),n=200,sd=0.2)
}
acf(dat[1,])
plot(dat[1,],type="l",col=colors[1],ylim=c(-5,5),main="The 10 simulated ARMA(1,2) models",ylab="Simulation value",xlab="Observation")
lm=50
for(i in 2:10){
lines(dat[i,],type="l",col=colors[i])
}
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm)
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-0.5,1),type="l",col=colors[1],main="Autocorrelation function for the 10 simulations")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
##
plot(dat[1,],type="l")
pacf(dat[1,])
pacf1<-pacf(dat[1,],plot=FALSE,lag.max = lm)
pacf1$acf[,1,1]
plot(pacf1,xlim=c(.5,lm-2),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation function for the 10 simulations")
for(i in 2:10){
pacftmp<-pacf(dat[i,],plot=FALSE,lag.max = lm)
lines(1:lm,pacftmp$acf[,1,1],col=i)
}
avars=rep(NA,10)
for(i in 1:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
avars[i]<-acftmp$acf[1,1,1]
}
avars
acf(log(tab$NO2[train]),lag.max = 200)
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/Predictions.R', echo=TRUE)
plot(tmp.dat$Radiation*tmp.dat$SunHour00,type='o',lwd=1,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [hours]")
plot(tmp.dat$Radiation*tmp.dat$SunHour,type='o',lwd=1,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [hours]")
par(mfrow=c(3,1))
plot(tmp.dat$Temperature,type='o',lwd=1,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [hours]")
plot(tmp.dat$Radiation*tmp.dat$SunHour,type='o',lwd=1,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [hours]")
plot(tmp.dat$WindDirection,type='o',lwd=1,ylab="Wind Direction [degrees]",xlab="January 2019 [hours]")
tmp.dat$Radiation
tmp.dat$SunHour
par(mfrow=c(3,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction [degrees]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindSpeed,type='o',lwd=3,ylab="Wind Direction [degrees]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
# Weatherplots for daily predictions
par(mfrow=c(4,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction [degrees]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindSpeed,type='o',lwd=3,ylab="Wind Direction [degrees]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindSpeed,type='o',lwd=3,ylab="Wind Speed [m/s]",xlab="January 2019 [days]",xaxt='n')
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [days]",xaxt='n')
# Weatherplots for daily predictions
par(mfrow=c(4,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction [degrees]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindSpeed,type='o',lwd=3,ylab="Wind Speed [m/s]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(tmp.dat$WindSpeed,type='o',lwd=3,ylab="Wind Speed [m/s]",xlab="January 2019 [hours]")
plot(tmp.dat$WindSpeed,type='o',lwd=1,ylab="Wind Speed [m/s]",xlab="January 2019 [hours]")
par(mfrow=c(4,1))
plot(tmp.dat$Temperature,type='o',lwd=1,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [hours]")
plot(tmp.dat$Radiation*tmp.dat$SunHour,type='o',lwd=1,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [hours]")
plot(tmp.dat$WindDirection,type='o',lwd=1,ylab="Wind Direction [degrees]",xlab="January 2019 [hours]")
plot(tmp.dat$WindSpeed,type='o',lwd=1,ylab="Wind Speed [m/s]",xlab="January 2019 [hours]")
length(tmp.dat)
length(tmp.dat$ObsTime)
tmp.dat$ObsTime
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
plot(tmp.dat$WindSpeed,type='o',lwd=1,ylab="Wind Speed [m/s]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
par(mfrow=c(4,1))
plot(tmp.dat$Temperature,type='o',lwd=1,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
plot(tmp.dat$Radiation*tmp.dat$SunHour,type='o',lwd=1,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
plot(tmp.dat$WindDirection,type='o',lwd=1,ylab="Wind Direction [degrees]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
plot(tmp.dat$WindSpeed,type='o',lwd=1,ylab="Wind Speed [m/s]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("data.R")
source("TrainTest.R")
source("BSplines.R")
# Daily predictions ----------------------------------
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
#Flipping WeatherCons
for(i in 1:n){
k<-dim(weatherCons[[i]])[1]
weatherCons[[i]]<-weatherCons[[i]][k:1,]
}
# Defining data used for modelling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
ttd<-TrainTest(model.data,31)
ttm<-TrainTest(weatherCons,31)
mondays<-which(weekdays(ttm[[2]][[1]]$Date)=="Monday")-.5
# Weatherplots for daily predictions
par(mfrow=c(4,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction [degrees]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindSpeed,type='o',lwd=3,ylab="Wind Speed [m/s]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/Predictions.R', echo=TRUE)
i<-6
midnight<-which(hour(tth[[2]][[i]]$ObsTime)==0)+length(tth[[1]][[i]]$ObsTime)
a <- 12
tmp.dat <- weather[(weather$ObsTime >= head(tth[[1]][[i]]$ObsTime,1)),]
tmp.dat <- tmp.dat[tmp.dat$ObsTime <= tail(tth[[1]][[i]]$ObsTime,1),]
tmp <- tmp.dat$Temperature
Temperature <- (tmp<a)*(a-tmp)
arima.dat <- data.frame(Temperature = Temperature, Consumption = cc*tth[[1]][[i]]$CoolingDegree*tth[[1]][[i]]$Volume)
A <- arima(arima.dat$Consumption, order =c(1,0,1), seasonal = list(order = c(1,1,1), period = 24),xreg=arima.dat$Temperature)
tmp.dat <- weather[(weather$ObsTime >= head(tth[[2]][[i]]$ObsTime,1)),]
tmp.dat <- tmp.dat[tmp.dat$ObsTime <= tail(tth[[2]][[i]]$ObsTime,1),]
tmp <- tmp.dat$Temperature
TemperatureP <- (tmp<a)*(a-tmp)
p<-predict(A,n.ahead=length(TemperatureP),se.fit=TRUE,newxreg = TemperatureP,interval="prediction")
plot(p$pred,ylim=c(min(p$pred-2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc),max(p$pred+2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc)),xaxt='n',xlab="January 2019",ylab="Consumption",main=paste("Long house: ",i))
axis(1, at=c(9150,(9150+9490)/2,9490), labels=c("17th","24th","31st"))
plot(1:length(p$pred),p$pred,ylim=c(min(p$pred-2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc),max(p$pred+2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc)),xaxt='n',xlab="January 2019",ylab="Consumption",main=paste("Long house: ",i))
axis(1, at=c(1,(9490-9150)/2,9490-9150), labels=c("17th","24th","31st"))
lines(p$pred+2*p$se,lty=2)
lines(p$pred-2*p$se,lty=2)
lines(1:length(p$pred),p$pred+2*p$se,lty=2)
lines(1:length(p$pred),p$pred-2*p$se,lty=2)
lines((1:length(tth[[2]][[i]]$ObsTime)),cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume,col=2)
abline(v=midnight,lty=3,lwd=2,col=Wcol[3])
midnight<-which(hour(tth[[2]][[i]]$ObsTime)==0)
abline(v=midnight,lty=3,lwd=2,col=Wcol[3])
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data","Midnight"), lty = c(1,2,1,3), col = c(1,1,2,Wcol[3]),lwd=c(1,1,1,2))
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
par(mfrow=c(1,1))
plot(1:length(p$pred),p$pred,ylim=c(min(p$pred-2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc),max(p$pred+2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc)),xaxt='n',xlab="January 2019",ylab="Consumption",main=paste("Long house: ",i))
axis(1, at=c(5,173,340), labels=c("17th","24th","31st"))
lines(1:length(p$pred),p$pred+2*p$se,lty=2)
lines(1:length(p$pred),p$pred-2*p$se,lty=2)
lines((1:length(tth[[2]][[i]]$ObsTime)),cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume,col=2)
abline(v=midnight,lty=3,lwd=2,col=Wcol[3])
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data","Midnight"), lty = c(1,2,1,3), col = c(1,1,2,Wcol[3]),lwd=c(1,1,1,2))
tth[[2]][[i]]$ObsTime
axis(1, at=c(5,173,320), labels=c("17th","24th","31st"))
axis(1, at=c(12,150,320), labels=c("18th","24th","31st"))
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
plot(1:length(p$pred),p$pred,ylim=c(min(p$pred-2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc),max(p$pred+2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc)),xaxt='n',xlab="January 2019",ylab="Consumption",main=paste("Long house: ",i))
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
lines(1:length(p$pred),p$pred+2*p$se,lty=2)
lines(1:length(p$pred),p$pred-2*p$se,lty=2)
lines((1:length(tth[[2]][[i]]$ObsTime)),cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume,col=2)
abline(v=midnight,lty=3,lwd=2,col=Wcol[3])
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data","Midnight"), lty = c(1,2,1,3), col = c(1,1,2,Wcol[3]),lwd=c(1,1,1,2))
plot(1:length(p$pred),p$pred,ylim=c(min(p$pred-2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc),max(p$pred+2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc)),xaxt='n',xlab="January 2019",ylab="Consumption",main=paste("Long house: ",i),type="l")
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
lines(1:length(p$pred),p$pred+2*p$se,lty=2)
lines(1:length(p$pred),p$pred-2*p$se,lty=2)
lines((1:length(tth[[2]][[i]]$ObsTime)),cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume,col=2)
abline(v=midnight,lty=3,lwd=2,col=Wcol[3])
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data","Midnight"), lty = c(1,2,1,3), col = c(1,1,2,Wcol[3]),lwd=c(1,1,1,2))
qnorm(0.33)
qnorm(1/3)
# Kundeplot(s)
pk<-data.frame(lwr=p$pred-0.43*p$se, upr=p$pred+0.43*p$se)
plot(pk$lwr,type='n',ylim=range(pk$lwr,pk$upr,cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume),main=mm,ylab="Consumption [kWh]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
plot(1:length(pk$lwr),pk$lwr,type='n',ylim=range(pk$lwr,pk$upr,cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume),main=mm,ylab="Consumption [kWh]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
# Kundeplot(s)
pk<-data.frame(lwr=p$pred-0.43*p$se, upr=p$pred+0.43*p$se)
plot(1:length(pk$lwr),pk$lwr,type='n',ylim=range(pk$lwr,pk$upr,cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume),main=mm,ylab="Consumption [kWh]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
ylim=c(-100,1200)
ylim=c(-1,12)
ylim=c(-1,12)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(PredK$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr):1), y= c(pk$lwr, rev(pk$upr)), col = Wcol[3], lty=0)
lines(1:length(pk$lwr),cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume,type='o',col=1,lwd=3)
# Kundeplot(s)
ShowIndex<-1:48
pk<-data.frame(lwr=p$pred[ShowIndex]-0.43*p$se[ShowIndex], upr=p$pred[ShowIndex]+0.43*p$se[ShowIndex])
plot(1:length(pk$lwr),pk$lwr,type='n',ylim=range(pk$lwr,pk$upr,cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume),main=mm,ylab="Consumption [kWh]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
ylim=c(-1,12)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr):1), y= c(pk$lwr, rev(pk$upr)), col = Wcol[3], lty=0)
lines(1:length(pk$lwr),cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume,type='o',col=1,lwd=3)
lines(1:length(pk$lwr),cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex],type='o',col=1,lwd=3)
plot(1:length(pk$lwr),pk$lwr,type='n',ylim=range(pk$lwr,pk$upr,cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex]),main=mm,ylab="Consumption [kWh]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
ylim=c(-1,12)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr):1), y= c(pk$lwr, rev(pk$upr)), col = Wcol[3], lty=0)
lines(1:length(pk$lwr),cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex],type='o',col=1,lwd=3)
cols<-rep(Wcol[3],length(pk$lwr))
cols<-rep(Wcol[3],length(pk$lwr))
cols[cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex]<pk$lwr]<-Wcol[2]
cols[cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex]>pk$upr]<-Wcol[4]
barplot(cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex],col=cols,main=mm, ylab="Consumption [kWh]",xlab="January 2019 [days]")
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/Predictions.R', echo=TRUE)
for(i in 6){
midnight<-which(hour(tth[[2]][[i]]$ObsTime)==0)
a <- 12
tmp.dat <- weather[(weather$ObsTime >= head(tth[[1]][[i]]$ObsTime,1)),]
tmp.dat <- tmp.dat[tmp.dat$ObsTime <= tail(tth[[1]][[i]]$ObsTime,1),]
tmp <- tmp.dat$Temperature
Temperature <- (tmp<a)*(a-tmp)
arima.dat <- data.frame(Temperature = Temperature, Consumption = cc*tth[[1]][[i]]$CoolingDegree*tth[[1]][[i]]$Volume)
A <- arima(arima.dat$Consumption, order =c(1,0,1), seasonal = list(order = c(1,1,1), period = 24),xreg=arima.dat$Temperature)
tmp.dat <- weather[(weather$ObsTime >= head(tth[[2]][[i]]$ObsTime,1)),]
tmp.dat <- tmp.dat[tmp.dat$ObsTime <= tail(tth[[2]][[i]]$ObsTime,1),]
tmp <- tmp.dat$Temperature
TemperatureP <- (tmp<a)*(a-tmp)
p<-predict(A,n.ahead=length(TemperatureP),se.fit=TRUE,newxreg = TemperatureP,interval="prediction")
plot(1:length(p$pred),p$pred,ylim=c(min(p$pred-2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc),max(p$pred+2*p$se,tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc)),xaxt='n',xlab="January 2019",ylab="Consumption",main=paste("Long house: ",i),type="l")
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
lines(1:length(p$pred),p$pred+2*p$se,lty=2)
lines(1:length(p$pred),p$pred-2*p$se,lty=2)
lines((1:length(tth[[2]][[i]]$ObsTime)),cc*tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume,col=2)
abline(v=midnight,lty=3,lwd=2,col=Wcol[3])
legend(x = "topright", legend = c("Prediction", "95% PI", "Data","Midnight"), lty = c(1,2,1,3), col = c(1,1,2,Wcol[3]),lwd=c(1,1,1,2))
# Kundeplot(s)
ShowIndex<-1:48
pk<-data.frame(lwr=p$pred[ShowIndex]-0.43*p$se[ShowIndex], upr=p$pred[ShowIndex]+0.43*p$se[ShowIndex])
plot(1:length(pk$lwr),pk$lwr,type='n',ylim=range(pk$lwr,pk$upr,cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex]),main=mm,ylab="Consumption [kWh]",xlab="January 2019 [hours]",xaxt='n')
axis(1, at=c(12,156,320), labels=c("18th","24th","31st"))
ylim=c(-1,12)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr), 1), y= c(pk$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:length(pk$lwr), length(pk$lwr):1), y= c(pk$lwr, rev(pk$upr)), col = Wcol[3], lty=0)
lines(1:length(pk$lwr),cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex],type='o',col=1,lwd=3)
cols<-rep(Wcol[3],length(pk$lwr))
cols[cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex]<pk$lwr]<-Wcol[2]
cols[cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex]>pk$upr]<-Wcol[4]
barplot(cc*tth[[2]][[i]]$CoolingDegree[ShowIndex]*tth[[2]][[i]]$Volume[ShowIndex],col=cols,main=mm, ylab="Consumption [kWh]",xlab="January 2019 [days]")
# Smoothing experiment
Scons1<-tth[[1]][[i]]$CoolingDegree*tth[[1]][[i]]$Volume*cc
Scons2<-tth[[2]][[i]]$CoolingDegree*tth[[2]][[i]]$Volume*cc
print(paste("Antal smoothings for hus",i,": Train:",sum(Scons1==0),"af",length(Scons1),"Test",sum(Scons2==0),"af",length(Scons2)))
# Smoothing (n?r en v?rdi er nul, udlignes det med punktet f?r)
for(j in rev(which(Scons1==0))){
if(j!=1){
Scons1[c(j-1,j)]<-Scons1[j-1]/2
}
}
for(j in rev(which(Scons2==0))){
if(j!=1){
Scons2[c(j-1,j)]<-Scons2[j-1]/2
}
}
arima.dat <- data.frame(Temperature = Temperature, Consumption = Scons1)
A <- arima(arima.dat$Consumption, order =c(1,0,1), seasonal = list(order = c(1,1,1), period = 24),xreg=arima.dat$Temperature)
p<-predict(A,n.ahead=length(TemperatureP),se.fit=TRUE,newxreg = TemperatureP)
plot(p$pred,ylim=c(min(p$pred-2*p$se,Scons2),max(p$pred+2*p$se,Scons2)),xaxt='n',xlab="January 2019",ylab="Hourly consumption, [kWh]",main=paste("Predictions for house ",i))
axis(1, at=c(length(tth[[1]][[i]]$Obstime),length(tth[[1]][[i]]$Obstime)+170,length(tth[[1]][[i]]$Obstime)+340), labels=c("17th","24th","31st"))
lines(p$pred+2*p$se,lty=2)
lines(p$pred-2*p$se,lty=2)
lines(length(tth[[1]][[i]]$ObsTime)+(1:length(tth[[2]][[i]]$ObsTime)),Scons2,col=2)
abline(v=midnight,lty=3,lwd=2,col=Wcol[3])
legend(x = "topright", legend = c("Prediction", "95% PI", "Data","Midnight"), lty = c(1,2,1,3), col = c(1,1,2,Wcol[3]),lwd=c(1,1,1,2))
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("data.R")
source("TrainTest.R")
source("BSplines.R")
# Daily predictions ----------------------------------
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
#Flipping WeatherCons
for(i in 1:n){
k<-dim(weatherCons[[i]])[1]
weatherCons[[i]]<-weatherCons[[i]][k:1,]
}
# Defining data used for modelling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
ttd<-TrainTest(model.data,31)
ttm<-TrainTest(weatherCons,31)
mondays<-which(weekdays(ttm[[2]][[1]]$Date)=="Monday")-.5
# Weatherplots for daily predictions
par(mfrow=c(4,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab=expression(paste("Temperature [", degree, "C]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab=expression(paste("Solar Radiation [",W/m^2,"]")),xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction [degrees]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindSpeed,type='o',lwd=3,ylab="Wind Speed [m/s]",xlab="January 2019 [days]",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
Sun(weather$ObsTime[1],tail(weather$ObsTime,n=1))
# Initializing workspace and directory.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
# Sources and packages
source("DataChecking.R")
source("Polarize.R")
source("Sun.R")
library(xts)
library(solaR)
# Watts colorscheme
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Loading all data
data.path = "../Consumption data/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(1,nrow=n)
data <- vector(mode="list", length = n)
day.data <- vector(mode="list", length = n)
data.key <- rep("",n)
# Saving a specific saturday and sunday for the attribute "Weekend"
Weekend=weekdays(as.POSIXlt(c(as.Date('2019-01-26'),as.Date('2019-01-27')),format = "%Y-%m-%d", tz = "GMT"),abbreviate = TRUE)
sat<-substring(Weekend[1],1:2,1:2)
sun<-substring(Weekend[2],1:2,1:2)
#Consumption constant
cc<-4.186/3.6
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
# Initializing start time and end time as random psicxt values.
StartDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
# saving the number of data-set is used.
k <- 0;
# Big for-loop for loading data.
for(i in 1:n){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
# removing weird NA attribute.
dt.tmp$X <- NULL
# Using "EndTime" as "ObsTime" and dropping "StartTime"
dt.tmp <- dt.tmp[,-1]
names(dt.tmp)[1]="ObsTime"
dt.tmp$ObsTime <- strptime(dt.tmp$ObsTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
# Add logical vairable for weekends
tmp.wd <- as.Date(dt.tmp$ObsTime,tz="GMT")
tmp.wd <-weekdays(tmp.wd,abbreviate = TRUE)
dt.tmp$Weekend <- grepl(intersect(sat,sun),tmp.wd)
#Make a copy before adding NA's.
dt.tmp.noNA<- dt.tmp
# Fill missing null values.
tmp.xts <- xts(dt.tmp[,-1], order.by=dt.tmp[,1])
t1<-rev(seq(from=(tail(dt.tmp$ObsTime,n=1)-hour(tail(dt.tmp$ObsTime,n=1))*60*60), to=(dt.tmp$ObsTime[1]+(23-hour(dt.tmp$ObsTime[1]))*60*60), by="hour"))
d1 <- xts(rep(1,length(t1)), order.by=t1)
x <- merge(d1,tmp.xts,all=TRUE)
tmp.df <- data.frame(ObsTime=index(x),coredata(x[,-1]))
dt.tmp <- tmp.df[dim(tmp.df)[1]:1,]
# Setting parameters for data checking
par = c('min_obs'=1000, 'miss_fraction'=1/20)
# If the data check is ok, store that data set
if (DataChecking(dt.tmp,par)==TRUE)
{
# Keep track of the amount stored datasets.
k=k+1
data[[k]] <- dt.tmp
#Making daily data
tmp.dat <- dt.tmp.noNA
tmp.dat$ObsTime <- as.Date(tmp.dat$ObsTime,tz="GMT")
tmp.dat$Obs <- rep(1,length(tmp.dat$ObsTime))
tmp.d1 <-aggregate(x=tmp.dat[,-1],by= data.frame(Date = tmp.dat[,1]),FUN = mean)
tmp.d2 <-aggregate(x=tmp.dat[,9],by= data.frame(Date = tmp.dat[,1]),FUN = sum)
tmp.d1[,c(2,4)]<-tmp.d1[,c(2,4)]*24 # Sum instead of mean (when there is 24 points) otherwise weight to 24 points
tmp.dat <-data.frame(tmp.d1[,-9],Obs=tmp.d2[,2])
# Fill missing null values.
tmp.xts <- xts(tmp.dat[,-1], order.by=tmp.dat[,1])
t1<-rev(seq(from=tmp.dat$Date[1], to=tail(tmp.dat$Date,n=1), by="day"))
d1 <- xts(rep(1,length(t1)), order.by=t1)
x <- merge(d1,tmp.xts,all=TRUE)
tmp.df <- data.frame(Date=index(x),coredata(x[,-1]))
tmp.dat <- tmp.df[dim(tmp.df)[1]:1,]
day.data[[k]] <-tmp.dat
data.key[k]<-substr(file.names[i],1,36)
}
}
#removing unused allocated spaces.
if (k<n){
data<-data[-(k+1:n)]
day.data<-day.data[-(k+1:n)]
data.key<-data.key[-(k+1:n)]
Datalengths<-Datalengths[-(k+1:n)]
}
# k is new n
n <- k
#Removing Feb data to get rid of NA
jan1<-day.data[[1]]$Date[1]
for(i in 1:n){
while(day.data[[i]]$Date[1]>jan1){
day.data[[i]]<-day.data[[i]][-1,]
}
# Saving the amount of observations in each table (with NA's).
Datalengths[i]=length(day.data[[i]]$Date)
# Setting start and end times for each table.
EndDays[i]= day.data[[i]]$Date[1]
StartDays[i]=day.data[[i]]$Date[length(day.data[[i]]$Date)]
}
#Removing Feb data from hour data
jan1<-data[[1]]$ObsTime[1]
for(i in 1:n){
while(data[[i]]$ObsTime[1]>jan1){
data[[i]]<-data[[i]][-1,]
}
}
# Loading BBR data, and sorting it with the key.
tmp.df<-data.frame(Key=data.key)
BBR.tmp <- read.table('../BBRdata.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
BBR <- merge(tmp.df,BBR.tmp)
# HouseType into continous variable
BBR$HouseType <- as.factor(BBR$HouseType)
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_02-06-2019.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(weather)[1]="ObsTime"
weather$ObsTime = strptime(weather$ObsTime,format='%d-%m-%Y %H:%M:%S',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
weather$X <- NULL
weather$Radiation <- Sun(weather$ObsTime[1],tail(weather$ObsTime,n=1))
# Removing the attribute UltraVioletIndex
weather$UltraVioletIndex <- NULL
plot(weather)
plot(weather$Radiation)
