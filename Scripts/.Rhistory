highTempC = c(rep(NA,n))
for (i in houselist)
{
if (hourly==TRUE)
{
tmp <- weather[(weather$ObsTime <= EndDays[i]),]
tmp <- tmp[tmp$ObsTime >= StartDays[i],]
temp <- tmp$Temperature
tempq <- data[[i]]$CoolingDegree*data[[i]]$Volume
# Removing NA's
assign("temp2", value = temp[!(is.na(tempq))], envir = parent.frame())
assign("tempq2", value = tempq[!(is.na(tempq))], envir = parent.frame())
}
else
{
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
temp <- day.tmp$Temperature
tempq <- day.data[[i]]$CoolingDegree*day.data[[i]]$Volume
# Removing NA's
assign("temp2", value = temp[!(is.na(tempq))], envir = parent.frame())
assign("tempq2", value = tempq[!(is.na(tempq))], envir = parent.frame())
}
result <- PiecewiseOpti(i,temp2,tempq2,makeplot)
breakpoint[i]=result[1]
CSlope[i]=result[2]
highTempC[i]=result[3]
}
rm(temp2,tempq2,envir=parent.frame())
returnData <- data.frame(breakpoint=breakpoint,CSlope=CSlope,highTempC=highTempC)
}
plot(conf_interval,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
points(tempq~temp)
plot((fit$coefficients[1]+fit$coefficients[2]*x)~temp,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
points(tempq~temp)
fit <- lm(tempq ~ 1+x)
plot((fit$coefficients[1]+fit$coefficients[2]*x)~temp,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
newx = seq(-5,20,by = 0.05)
conf_interval <- predict(fit, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
str(conf_interval)
plot(conf_interval,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(conf_interval,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(conf_interval[,1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
points(tempq~temp)
bestpar <- optimize(f=newopti,c(5,20))
X <-(temp<bestpar$minimum)*(temp-bestpar$minimum)
fit <- lm(tempq ~ 1+X)
newx = seq(-5,20,by = 0.05)
conf_interval <- predict(fit, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
conf_interval <- predict(fit, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
plot(conf_interval[,1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot((fit$coefficients[1]+fit$coefficients[2]*x)~temp,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(conf_interval[,1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
points(tempq~temp)
X <-(temp<bestpar$minimum)*(temp-bestpar$minimum)
fit <- lm(tempq ~ 1+X)
newx = seq(-5,20,by = 0.05)
conf_interval <- predict(fit, newdata=data.frame(x=newx), interval="confidence",
level = 0.95)
conf_interval <- predict(fit, newdata=data.frame(x=newx),se.fit=TRUE)
conf_interval
str(conf_interval)
newx = seq(-5,20,by = 0.01)
conf_interval <- predict(fit, newdata=data.frame(x=newx),se.fit=TRUE)
newx = seq(-5,20,by = 0.1)
conf_interval <- predict(fit, newdata=data.frame(x=newx),se.fit=TRUE)
str(conf_interval)
plot(conf_interval$fit,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(conf_interval$se.fit,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(conf_interval$fit,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(conf_interval$pred,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
conf_interval$pred
conf_interval <- predict(fit, newdata=data.frame(x=newx),se.fit=TRUE)
str(conf_interval)
conf_interval <- predict(fit,se.fit=TRUE)
conf_interval <- predict(fit, newdata=data.frame(x=newx),se.fit=TRUE)
plot(newx~conf_interval,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(newx~conf_interval[,1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(newx~conf_interval$fit,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
str(conf_interval$fit)
str(newx)
newx = seq(-5,20,length=151)
conf_interval <- predict(fit, newdata=data.frame(x=newx),se.fit=TRUE)
plot(newx~conf_interval$fit,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(newx,conf_interval$fit,ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
conf_interval[,1]
plot(newx,conf_interval[1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
str(conf_interval)
conf_interval <- predict(fit, newdata=data.frame(x=newx), interval='confidence')
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
points(tempq~temp)
T
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
X <-(t<a)*(t-a)
fit <- lm(q ~ 1+X)
newx = seq(-5,20,length=151)
t<-temp
q<-tempq
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
X <-(t<a)*(t-a)
fit <- lm(q ~ 1+X)
newx = seq(-5,20,length=151)
conf_interval <- predict(fit, newdata=data.frame(x=newx), interval='confidence')
if (makeplot==TRUE)
{
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
#plot((fit$coefficients[1]+fit$coefficients[2]*x)~temp,ylab='Consumption',
#  xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
}
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
newx = seq(min(t),max(t),length=length(t))
conf_interval <- predict(fit, newdata=data.frame(x=newx), interval='confidence')
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
X <-(t<a)*(t-a)
fit <- lm(q ~ 1+X)
newx <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newx), interval='confidence')
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
X <-(t<a)*(t-a)
fit <- lm(q ~ 1+X)
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
plot(newx,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
plot(conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
str(conf_interval)
fit <- lm(q ~ 1+X)
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
conf_interval <- predict(fit, newdata=data.frame(X=newdata), interval='confidence')
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
X <-(t<a)*(t-a)
fit <- lm(q ~ 1+X)
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(X=newdata), interval='confidence')
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
if (makeplot==TRUE)
{
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
#plot((fit$coefficients[1]+fit$coefficients[2]*x)~temp,ylab='Consumption',
#  xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
}
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
fit <- lm(q ~ 1+I((t<a)*(t-a))
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
if (makeplot==TRUE)
{
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
#plot((fit$coefficients[1]+fit$coefficients[2]*x)~temp,ylab='Consumption',
#  xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
}
result = c(breakpoint = a,CSlope = fit$coefficients[2], highTempC = fit$coefficients[1],dimnames=NULL)
}
AnalyzeConsumption <- function(houselist,hourly=FALSE,makeplot=FALSE)
{
n = length(houselist)
breakpoint = c(rep(NA,n))
CSlope = c(rep(NA,n))
highTempC = c(rep(NA,n))
for (i in houselist)
{
if (hourly==TRUE)
{
tmp <- weather[(weather$ObsTime <= EndDays[i]),]
tmp <- tmp[tmp$ObsTime >= StartDays[i],]
temp <- tmp$Temperature
tempq <- data[[i]]$CoolingDegree*data[[i]]$Volume
# Removing NA's
assign("temp2", value = temp[!(is.na(tempq))], envir = parent.frame())
assign("tempq2", value = tempq[!(is.na(tempq))], envir = parent.frame())
}
else
{
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
temp <- day.tmp$Temperature
tempq <- day.data[[i]]$CoolingDegree*day.data[[i]]$Volume
# Removing NA's
assign("temp2", value = temp[!(is.na(tempq))], envir = parent.frame())
assign("tempq2", value = tempq[!(is.na(tempq))], envir = parent.frame())
}
result <- PiecewiseOpti(i,temp2,tempq2,makeplot)
breakpoint[i]=result[1]
CSlope[i]=result[2]
highTempC[i]=result[3]
}
rm(temp2,tempq2,envir=parent.frame())
returnData <- data.frame(breakpoint=breakpoint,CSlope=CSlope,highTempC=highTempC)
}
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
X <-(t<a)*(t-a)
fit <- lm(q ~ 1+I((t<a)*(t-a))
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
if (makeplot==TRUE)
{
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
#plot((fit$coefficients[1]+fit$coefficients[2]*x)~temp,ylab='Consumption',
#  xlab='Temperature',main = paste('House number', i),col='red',type='l',ylim=c(0,max(tempq)))
}
result = c(breakpoint = a,CSlope = fit$coefficients[2], highTempC = fit$coefficients[1],dimnames=NULL)
}
AnalyzeConsumption <- function(houselist,hourly=FALSE,makeplot=FALSE)
{
n = length(houselist)
breakpoint = c(rep(NA,n))
CSlope = c(rep(NA,n))
highTempC = c(rep(NA,n))
for (i in houselist)
{
if (hourly==TRUE)
{
tmp <- weather[(weather$ObsTime <= EndDays[i]),]
tmp <- tmp[tmp$ObsTime >= StartDays[i],]
temp <- tmp$Temperature
tempq <- data[[i]]$CoolingDegree*data[[i]]$Volume
# Removing NA's
assign("temp2", value = temp[!(is.na(tempq))], envir = parent.frame())
assign("tempq2", value = tempq[!(is.na(tempq))], envir = parent.frame())
}
else
{
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
temp <- day.tmp$Temperature
tempq <- day.data[[i]]$CoolingDegree*day.data[[i]]$Volume
# Removing NA's
assign("temp2", value = temp[!(is.na(tempq))], envir = parent.frame())
assign("tempq2", value = tempq[!(is.na(tempq))], envir = parent.frame())
}
result <- PiecewiseOpti(i,temp2,tempq2,makeplot)
breakpoint[i]=result[1]
CSlope[i]=result[2]
highTempC[i]=result[3]
}
rm(temp2,tempq2,envir=parent.frame())
returnData <- data.frame(breakpoint=breakpoint,CSlope=CSlope,highTempC=highTempC)
}
fit <- lm(q ~ 1+I((t<a)*(t-a)))
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
fit <- lm(q ~ 1+I((t<a)*(t-a)))
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
matlines(newdata,conf_interval[2,])
bestpar <- optimize(f=newopti,c(5,20))
a <- bestpar$minimum
fit <- lm(q ~ 1+I((t<a)*(t-a)))
newdata <- seq(min(t),max(t),length=30)
conf_interval <- predict(fit, newdata=data.frame(t=newdata), interval='confidence')
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
matlines(newdata,conf_interval[2,])
str(newdata)
conf_interval
str(conf_interval)
matlines(newdata,conf_interval[,2])
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
matlines(newdata,conf_interval[,2])
matlines(newdata,conf_interval[,2],col="green",lwd=0.5,lty='dashed')
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
matlines(newdata,conf_interval[,2],col="green",lwd=0.5,lty='dashed')
matlines(newdata,conf_interval[,2],col="green",lwd=2,lty='dashed')
matlines(newdata,conf_interval[,2],col="green",lwd=1.5,lty='dashed')
plot(newdata,conf_interval[,1],ylab='Consumption',xlab='Temperature',
main = paste('House number', i),col='red',type='l',ylim=c(0,max(q)))
points(q~t)
matlines(newdata,conf_interval[,2],col="green",lwd=1.5,lty='dashed')
matlines(newdata,conf_interval[,2],col="green",lwd=1,lty='dashed')
matlines(newdata,conf_interval[,3],col="green",lwd=1,lty='dashed')
rm(list=ls())
source("data.R")
source("Piecewise-opti.R")
# Plotting the first house
AnalyzeConsumption(houselist=7,hourly=FALSE,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=1,hourly=FALSE,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=36,hourly=FALSE,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=44,hourly=FALSE,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=64,hourly=FALSE,makeplot=TRUE)
# Plotting ALL houses
AnalyzeConsumption(houselist=1:n,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=52,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=15,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=36,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=15,makeplot=TRUE)
plot(data[[15]]$Volume)
k=20
plot((4.186/3.6)*data[[k]]$Volume*(data[[k]]$TemperatureIn-data[[k]]$TemperatureOut)~data[[k]]$Energy)
plot((4.186/3.6)*data[[k]]$Flow*(data[[k]]$TemperatureIn-data[[k]]$TemperatureOut)~data[[k]]$Energy)
plot(TemperatureIn-TemperatureOut~CoolingDegree,data[[1]])
sum(abs(((data[[1]]$TemperatureIn-data[[1]]$TemperatureOut)-data[[1]]$CoolingDegree)))
# 15 and 36  have periods with 0 volume
plot(data[[15]]$Volume)
plot(data[[36]]$Volume)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("Piecewise-opti.R")
library(ggplot2)
# Farveeksempel
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
plot(data[[1]]$Flow,col=Wcol[2])
pairs(data[[1]])
plot(data[[1]]$Flow)
plot.months <- c("January", "February", "March", "April", "May", "June", "July", "August",
"September", "November", "December")
par(mfrow = c(1,1))
time <- seq(as.Date(StartDays[1]),as.Date(EndDays[1]), by = "1 mon")
plot(data[[1]]$StartDateTime, data[[1]]$Flow, "l", xaxt = 'n')
drawxaxis(data[[1]]$StartDateTime, tick.tstep="months")
axis.Date(1, at = seq(min(time), max(time), by = "12 mon"), format = "%m")
# Investigating each house's flow behaviour
for (i in 1:1){
#data[[i]]$StartDateTime.new <- as.POSIXlt(data[[i]]$StartDateTime)
#data[[i]]$StartDateTime <- as.Date(data[[i]]$StartDateTime, "%Y-%m-%d")
#data[[i]]$StartDateTime2 <- as.Date(cut(data[[i]]$StartDateTime, breaks = "month"))
plot(data[[i]]$StartDateTime, data[[i]]$Flow, type = "l", xlab ="Time", ylab = "Flow")
axis(1, at = unique(months(data[[i]]$StartDateTime)), las = 2)
}
# Investigating weather data
pairs(weather)
plot(weather$StartDateTime,weather$WindSpeed, type = "l")
str(weather)
plot(weather$SunHour[weather$IsHistoricalEstimated==FALSE], weather$UltravioletIndex[weather$IsHistoricalEstimated==FALSE])
# Correlation between consumption and wind
plot(tmp$WindSpeed,data[[1]]$CoolingDegree*data[[1]]$Flow)
plot(tmp$WindDirection,data[[42]]$CoolingDegree*data[[42]]$Flow)
#
ggplot(tmp, aes(x = Temperature, y= data[[1]]$CoolingDegree*data[[1]]$Flow)) +
geom_point() + geom_smooth(colour=2) + ylab("Consumption")
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
for (i in 1:n) {
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]<-
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]+
data[[i]]$Flow*data[[i]]$CoolingDegree
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]<-
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]+
rep(1,length(data[[1]]$Flow))
}
length(difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours"))
length(data[[i]]$Flow*data[[i]]$CoolingDegree)
maxskip<-rep(0,n)
sumskip<-rep(0,n)
for (i in 1:n) {
ntmp=length(data[[i]]$StartDateTime)
tmpdiftest=difftime(data[[i]]$StartDateTime[1:ntmp-1],data[[i]]$StartDateTime[2:ntmp], units ="hours")
maxskip[i]=max(tmpdiftest)
if(max(tmpdiftest)>1){
print(match(2:max(tmpdiftest),tmpdiftest))
}
}
n69=length(data[[69]]$StartDateTime)
tmpdiftest=difftime(data[[69]]$StartDateTime[1:n69-1],data[[69]]$StartDateTime[2:n69], units ="hours")
str(day.avg)
plot((4.186/3.6)*data[[k]]$Volume*(data[[k]]$TemperatureIn-data[[k]]$TemperatureOut)~data[[k]]$Energy)
plot((4.186/3.6)*data[[k]]$Flow*(data[[k]]$TemperatureIn-data[[k]]$TemperatureOut)~data[[k]]$Energy)
plot((4.186/3.6)*data[[k]]$Volume*(data[[k]]$TemperatureIn-data[[k]]$TemperatureOut)~data[[k]]$Energy)
# Plotting ALL houses
AnalyzeConsumption(houselist=1:n,makeplot=TRUE)
pairs(day.avg[c(1:7,10)])
# Weather pairs
pairs(c(day.avg[10], day.tmp[c(1:9,11)]))
# Focus on attributes from weather data
pairs(c(day.avg[10], day.tmp[c(1:2,5,7,9)]))
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("Piecewise-opti.R")
library(ggplot2)
# Farveeksempel
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
plot(data[[1]]$Flow,col=Wcol[2])
pairs(data[[1]])
plot(data[[1]]$Flow)
plot.months <- c("January", "February", "March", "April", "May", "June", "July", "August",
"September", "November", "December")
par(mfrow = c(1,1))
time <- seq(as.Date(StartDays[1]),as.Date(EndDays[1]), by = "1 mon")
plot(data[[1]]$StartDateTime, data[[1]]$Flow, "l", xaxt = 'n')
drawxaxis(data[[1]]$StartDateTime, tick.tstep="months")
axis.Date(1, at = seq(min(time), max(time), by = "12 mon"), format = "%m")
# Investigating each house's flow behaviour
for (i in 1:1){
#data[[i]]$StartDateTime.new <- as.POSIXlt(data[[i]]$StartDateTime)
#data[[i]]$StartDateTime <- as.Date(data[[i]]$StartDateTime, "%Y-%m-%d")
#data[[i]]$StartDateTime2 <- as.Date(cut(data[[i]]$StartDateTime, breaks = "month"))
plot(data[[i]]$StartDateTime, data[[i]]$Flow, type = "l", xlab ="Time", ylab = "Flow")
axis(1, at = unique(months(data[[i]]$StartDateTime)), las = 2)
}
# Investigating weather data
pairs(weather)
plot(weather$StartDateTime,weather$WindSpeed, type = "l")
str(weather)
plot(weather$SunHour[weather$IsHistoricalEstimated==FALSE], weather$UltravioletIndex[weather$IsHistoricalEstimated==FALSE])
# No correlation
# Correlation between consumption and wind
plot(tmp$WindSpeed,data[[1]]$CoolingDegree*data[[1]]$Flow)
plot(tmp$WindDirection,data[[42]]$CoolingDegree*data[[42]]$Flow)
#
plot1 <- ggplot(data = dt.full, mapping = aes(day, EnergyPurchase)) + geom_point() +
ggtitle("Average consumption for all houses during a year ") + xlab("Time")
+ ylab("Average consumption (kwh)")
+ geom_smooth(col=col.plot, se = T)
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
for (i in 1:n) {
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]<-
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]+
data[[i]]$Flow*data[[i]]$CoolingDegree
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]<-
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]+
rep(1,length(data[[1]]$Flow))
}
length(difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours"))
length(data[[i]]$Flow*data[[i]]$CoolingDegree)
maxskip<-rep(0,n)
sumskip<-rep(0,n)
for (i in 1:n) {
ntmp=length(data[[i]]$StartDateTime)
tmpdiftest=difftime(data[[i]]$StartDateTime[1:ntmp-1],data[[i]]$StartDateTime[2:ntmp], units ="hours")
maxskip[i]=max(tmpdiftest)
if(max(tmpdiftest)>1){
print(match(2:max(tmpdiftest),tmpdiftest))
}
}
n69=length(data[[69]]$StartDateTime)
tmpdiftest=difftime(data[[69]]$StartDateTime[1:n69-1],data[[69]]$StartDateTime[2:n69], units ="hours")
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
pairs(day.avg[c(1:7,10)])
# Weather pairs
pairs(c(day.avg[10], day.tmp[c(1:9,11)]))
# Focus on attributes from weather data
pairs(c(day.avg[10], day.tmp[c(1:2,5,7,9)]))
pairs(day.avg[c(1:7,10)])
# Weather pairs
pairs(c(day.avg[10], day.tmp[c(1:9,11)]))
# Focus on attributes from weather data
pairs(c(day.avg[10], day.tmp[c(1:2,5,7,9)]))
?ceiling
# Plotting the first house
AnalyzeConsumption(houselist=48,makeplot=TRUE)
# Plotting the first house
AnalyzeConsumption(houselist=42,makeplot=TRUE)
