source('~/Downloads/vectorStoch.R', echo=TRUE)
## Code to simulate a stochastic Human/Mosquito vector-borne disease
## Parameters
nuH <- 0.01   # Per year
NH <- 1000    # # Humans
muH <- 0.01   # Per year
NM <- 1e6     # # Mosquitos
nuM <- 1      # Per year
muM <- 1      # Per year
gammaH <- 52  # Per year
deltaH <- 1   # Per year
betaH <- 3e-4 # ?
betaM <- 3e-4 # ?
## Time step control (DISREGARD WHY THIS IS DONE THIS WAY)
dt <- 1/max(c(betaH*NM*nuM/muM,betaM*NH*nuH/muH),nuH,muH,gammaH,deltaH,nuM,muM)
## Time step the system dt
timestep <- function(x)
{ with(as.list(x),{
## All transitions EXCEPT deaths
HumanBirths <- rbinom(n=1,NH,nuH*dt)
HumanInfections <- rbinom(n=1,SH,betaH*IM*dt)
HumanRecoveries <- rbinom(n=1,IH,gammaH*dt)
HumanImmunityLosses <- rbinom(n=1,RH,deltaH*dt)
SH <- SH + HumanBirths - HumanInfections + HumanImmunityLosses
IH <- IH + HumanInfections - HumanRecoveries
RH <- RH + HumanRecoveries - HumanImmunityLosses
MosquitoBirths <- rbinom(n=1,NM,nuM*dt)
MosquitoInfections <- rbinom(n=1,SM,betaM*IH*dt)
SM <- SM + MosquitoBirths - MosquitoInfections
IM <- IM + MosquitoInfections
## Deaths
SH <- SH - rbinom(n=1,SH,muH*dt)
IH <- IH - rbinom(n=1,IH,muH*dt)
RH <- RH - rbinom(n=1,RH,muH*dt)
SM <- SM - rbinom(n=1,SM,muM*dt)
IM <- IM - rbinom(n=1,IM,muM*dt)
return(c(SH,IH,RH,SM,IM))
}) }
## Simulate the system for a number of time steps
simulate <- function(x0,N)
{
X <- array(NA,c(5,N))
rownames(X) <- names(x0)
X[,1] <- x0
for(i in 2:N)
{
X[,i] <- timestep(X[,i-1])
}
return(as.data.frame(t(X)))
}
## Set initial condition
x0 <- c(SH=1e2,IH=0,RH=0,SM=1e5,IM=0)
## Simulate
X <- simulate(x0,1000)
## Plot one of the variables
plot(X$SM, type = "l", col = "blue")
lines(sol$SM, type = "l", col= "red")
(lines(X$SH, type = "l", col = "red")
plot(X$SM, type = "l", col = "blue")
lines(sol$SM, type = "l", col= "red")
plot(X$SM, type = "l", col = "blue", ylim = c(2000,10000))
lines(sol$SM, type = "l", col= "red")
## Plot one of the variables
plot(X$SM, type = "l", col = "blue", ylim = c(2e5,10e5))
plot(X$SM, type = "l", col = "blue", ylim = c(2e5,10e5))
lines(sol$SM, type = "l", col= "red")
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5))
lines(sol$SM, type = "l", col= "red")
plot(X$SM, type = "l", col = "blue", ylim = c(1e4,10e5))
lines(sol$SM, type = "l", col= "red")
## Code to simulate a stochastic Human/Mosquito vector-borne disease
## Parameters
nuH <- 0.01   # Per year
NH <- 1000    # # Humans
muH <- 0.01   # Per year
NM <- 1e6     # # Mosquitos
nuM <- 1      # Per year
muM <- 1      # Per year
gammaH <- 52  # Per year
deltaH <- 1   # Per year
betaH <- 3e-4 # ?
betaM <- 3e-4 # ?
## Time step control (DISREGARD WHY THIS IS DONE THIS WAY)
dt <- 1/max(c(betaH*NM*nuM/muM,betaM*NH*nuH/muH),nuH,muH,gammaH,deltaH,nuM,muM)
## Time step the system dt
timestep <- function(x)
{ with(as.list(x),{
## All transitions EXCEPT deaths
HumanBirths <- rbinom(n=1,NH,nuH*dt)
HumanInfections <- rbinom(n=1,SH,betaH*IM*dt)
HumanRecoveries <- rbinom(n=1,IH,gammaH*dt)
HumanImmunityLosses <- rbinom(n=1,RH,deltaH*dt)
SH <- SH + HumanBirths - HumanInfections + HumanImmunityLosses
IH <- IH + HumanInfections - HumanRecoveries
RH <- RH + HumanRecoveries - HumanImmunityLosses
MosquitoBirths <- rbinom(n=1,NM,nuM*dt)
MosquitoInfections <- rbinom(n=1,SM,betaM*IH*dt)
SM <- SM + MosquitoBirths - MosquitoInfections
IM <- IM + MosquitoInfections
## Deaths
SH <- SH - rbinom(n=1,SH,muH*dt)
IH <- IH - rbinom(n=1,IH,muH*dt)
RH <- RH - rbinom(n=1,RH,muH*dt)
SM <- SM - rbinom(n=1,SM,muM*dt)
IM <- IM - rbinom(n=1,IM,muM*dt)
return(c(SH,IH,RH,SM,IM))
}) }
## Simulate the system for a number of time steps
simulate <- function(x0,N)
{
X <- array(NA,c(5,N))
rownames(X) <- names(x0)
X[,1] <- x0
for(i in 2:N)
{
X[,i] <- timestep(X[,i-1])
}
return(as.data.frame(t(X)))
}
## Set initial condition
x0 <- c(SH=1e2,IH=0,RH=0,SM=1e5,IM=0)
## Simulate
X <- simulate(x0,10000)
## Plot one of the variables
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5))
lines(sol$SM, type = "l", col= "red")
(lines(X$SH, type = "l", col = "red")
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5))
lines(sol$SM, type = "l", col= "red")
plot(X$SH, type = "l", col= "blue", ylim = c(1e5, 10e5))
lines(X$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue")
lines(X$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue")
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,10e5))
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,1e5))
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,500))
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,100))
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,1000))
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,800))
lines(sol$SH, type = "l", col = "red")
## Simulate
X <- simulate(x0,10000)
plot(X$SH, type = "l", col= "blue", ylim = c(100,800))
lines(sol$SH, type = "l", col = "red")
## Plot one of the variables
plot(X$SM+XSH, type = "l", col = "blue", ylim = c(1e5,10e5))
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, s?? det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
eigen(A)$vectors
A <- matrix(c(0,0,.543,6.48,10.61,11.2, .112,-.49,.082,.111,0,0,
.001 ,.27,.36,.222,0,0,
0,.0015,.237,.487,.014,.2,
0,0,0,0.182,.486,.65),5,6,byrow = TRUE)
B <- matrix(c(0,0,.874,7.45,16.45, .234,.56,.134,.111,0,
.01 ,.34,.45,.245,0,
0,.012,.165,.573,.125,
0,0,0,0.065,.654),5,5,byrow = TRUE)
eigen(A)$vectors
(e.B <- matrix(as.numeric(e.B), ncol = 5, byrow = FALSE))
sum(A[,1])
sum(B[,1])
sum(B[,2])
sum(B[,3])
sum(B[,4])
sum(B[,5])
B[2,1]+B[3,2]+B[4,3]+B[5,4]
B[1,1]+B[2,2]+B[3,3]+B[4,4]+B[5,5]
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5))
## Code to simulate a stochastic Human/Mosquito vector-borne disease
## Parameters
nuH <- 0.01   # Per year
NH <- 1000    # # Humans
muH <- 0.01   # Per year
NM <- 1e6     # # Mosquitos
nuM <- 1      # Per year
muM <- 1      # Per year
gammaH <- 52  # Per year
deltaH <- 1   # Per year
betaH <- 3e-4 # ?
betaM <- 3e-4 # ?
## Time step control (DISREGARD WHY THIS IS DONE THIS WAY)
dt <- 1/max(c(betaH*NM*nuM/muM,betaM*NH*nuH/muH),nuH,muH,gammaH,deltaH,nuM,muM)
## Time step the system dt
timestep <- function(x)
{ with(as.list(x),{
## All transitions EXCEPT deaths
HumanBirths <- rbinom(n=1,NH,nuH*dt)
HumanInfections <- rbinom(n=1,SH,betaH*IM*dt)
HumanRecoveries <- rbinom(n=1,IH,gammaH*dt)
HumanImmunityLosses <- rbinom(n=1,RH,deltaH*dt)
SH <- SH + HumanBirths - HumanInfections + HumanImmunityLosses
IH <- IH + HumanInfections - HumanRecoveries
RH <- RH + HumanRecoveries - HumanImmunityLosses
MosquitoBirths <- rbinom(n=1,NM,nuM*dt)
MosquitoInfections <- rbinom(n=1,SM,betaM*IH*dt)
SM <- SM + MosquitoBirths - MosquitoInfections
IM <- IM + MosquitoInfections
## Deaths
SH <- SH - rbinom(n=1,SH,muH*dt)
IH <- IH - rbinom(n=1,IH,muH*dt)
RH <- RH - rbinom(n=1,RH,muH*dt)
SM <- SM - rbinom(n=1,SM,muM*dt)
IM <- IM - rbinom(n=1,IM,muM*dt)
return(c(SH,IH,RH,SM,IM))
}) }
## Simulate the system for a number of time steps
simulate <- function(x0,N)
{
X <- array(NA,c(5,N))
rownames(X) <- names(x0)
X[,1] <- x0
for(i in 2:N)
{
X[,i] <- timestep(X[,i-1])
}
return(as.data.frame(t(X)))
}
## Set initial condition
x0 <- c(SH=1e2,IH=0,RH=0,SM=1e5,IM=0)
## Simulate
X <- simulate(x0,10000)
## Plot one of the variables
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5))
lines(sol$SM, type = "l", col= "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,800))
lines(sol$SH, type = "l", col = "red")
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5))
lines(sol$SM, type = "l", col= "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,800), main = "Smittede mennesker i den endemiske tilstand")
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,800), xlim = c(0,100000), main = "Smittede mennesker i den endemiske tilstand")
lines(sol$SH, type = "l", col = "red")
plot(X$SH, type = "l", col= "blue", ylim = c(100,800), xlim = c(0,100000), main = "Smittede mennesker i den endemiske tilstand")
lines(sol$SH, type = "l", col = "red")
## Code to solve an ODE model of a Human/Mosquito vector-borne disease
## Parameters
nuH <- 0.01   # Per year
NH <- 1000    # # Humans
muH <- 0.01   # Per year
NM <- 1e6     # # Mosquitos
nuM <- 1      # Per year
muM <- 1      # Per year
gammaH <- 52  # Per year
deltaH <- 1   # Per year
betaH <- 3e-4 # ?
betaM <- 3e-4 # ?
## Right hand side of the differential equation
model <- function(t,x,p)
{
with(as.list(c(x,p)),{
dSH <- nuH*NH-muH*SH-betaH*SH*IM + deltaH*RH
dIH <- betaH*SH*IM - muH*IH - gammaH*IH
dRH <- gammaH*IH - muH*RH - deltaH*RH
dSM <- nuM*NM - muM*SM - betaM*SM*IH
dIM <- betaM*SM*IH - muM*IM
dxdt <- c(dSH,dIH,dRH,dSM,dIM)
list(dxdt)
})
}
## Parameter vector
p <- c(nuH=nuH,NH=NH,muH=muH,gammaH=gammaH,deltaH=deltaH,nuM=nuM,NM=NM,muM=muM,betaH=betaH,betaM=betaM)
## Initial conditions
x0 <- c(SH=1e2,IH=0,RH=0,SM=1e5,IM=0)
require(deSolve)
## Time points where we want the solution
times <- seq(0,10,0.01)
## Solve and plot
sol <- data.frame(ode(x0,times,model,p))
(plot(sol))
## Code to solve an ODE model of a Human/Mosquito vector-borne disease
## Parameters
nuH <- 0.01   # Per year
NH <- 1000    # # Humans
muH <- 0.01   # Per year
NM <- 1e6     # # Mosquitos
nuM <- 1      # Per year
muM <- 1      # Per year
gammaH <- 52  # Per year
deltaH <- 1   # Per year
betaH <- 3e-4 # ?
betaM <- 3e-4 # ?
## Right hand side of the differential equation
model <- function(t,x,p)
{
with(as.list(c(x,p)),{
dSH <- nuH*NH-muH*SH-betaH*SH*IM + deltaH*RH
dIH <- betaH*SH*IM - muH*IH - gammaH*IH
dRH <- gammaH*IH - muH*RH - deltaH*RH
dSM <- nuM*NM - muM*SM - betaM*SM*IH
dIM <- betaM*SM*IH - muM*IM
dxdt <- c(dSH,dIH,dRH,dSM,dIM)
list(dxdt)
})
}
## Parameter vector
p <- c(nuH=nuH,NH=NH,muH=muH,gammaH=gammaH,deltaH=deltaH,nuM=nuM,NM=NM,muM=muM,betaH=betaH,betaM=betaM)
## Initial conditions
x0 <- c(SH=1e2,IH=0,RH=0,SM=1e5,IM=0)
require(deSolve)
## Time points where we want the solution
times <- seq(0,1*50,0.01)
## Solve and plot
sol <- data.frame(ode(x0,times,model,p))
(plot(sol))
## Solve and plot
sol <- data.frame(ode(x0,times,model,p))
(plot(sol))
source('~/Downloads/vektor.R', echo=TRUE)
plot(X$SH, type = "l", col= "blue", ylim = c(100,1e6), xlim = c(0,10000), main = "Smittede mennesker i den endemiske tilstand")
plot(X$SH, type = "l", col= "blue", ylim = c(100,1e6), xlim = c(0,10000), main = "Smittede mennesker i den endemiske tilstand")
lines(sol$SH, type = "l", col = "red")
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(c(0,0,.543,6.48,10.61,11.2, .112,-.49,.082,.111,0,0,
.001 ,.27,.36,.222,0,0,
0,.0015,.237,.487,.014,.2,
0,0,0,0.182,.486,.65),5,6,byrow = TRUE)
B <- matrix(c(0,0,.874,7.45,16.45, .234,.56,.134,.111,0,
.01 ,.34,.45,.245,0,
0,.012,.165,.573,.125,
0,0,0,0.065,.654),5,5,byrow = TRUE)
(eig.B <- Re(eigen(B)$values[1]))
(ew.B <- Re(eigen(B)$vectors[,1]))
ev.B <- Re(eigen(t(B))$vectors[,1])
e.B <- matrix(NA, ncol = 5, nrow = 5)
dim.B <- dim(B)[1]
for (i in 1:dim.B) {
for (j in 1:dim.B) {
e.B[i,j] <- ev.B[i] * ew.B[j] / ev.B%*%ew.B * B[i,j] / eigen(B)$values[1]
}
}
(e.B <- matrix(as.numeric(e.B), ncol = 5, byrow = FALSE))
## Code to solve an ODE model of a Human/Mosquito vector-borne disease
## Parameters
nuH <- 0.01   # Per year
NH <- 1000    # # Humans
muH <- 0.01   # Per year
NM <- 1e6     # # Mosquitos
nuM <- 1      # Per year
muM <- 1      # Per year
gammaH <- 52  # Per year
deltaH <- 1   # Per year
betaH <- 3e-4 # ?
betaM <- 3e-4 # ?
## Right hand side of the differential equation
model <- function(t,x,p)
{
with(as.list(c(x,p)),{
dSH <- nuH*NH-muH*SH-betaH*SH*IM + deltaH*RH
dIH <- betaH*SH*IM - muH*IH - gammaH*IH
dRH <- gammaH*IH - muH*RH - deltaH*RH
dSM <- nuM*NM - muM*SM - betaM*SM*IH
dIM <- betaM*SM*IH - muM*IM
dxdt <- c(dSH,dIH,dRH,dSM,dIM)
list(dxdt)
})
}
## Parameter vector
p <- c(nuH=nuH,NH=NH,muH=muH,gammaH=gammaH,deltaH=deltaH,nuM=nuM,NM=NM,muM=muM,betaH=betaH,betaM=betaM)
## Initial conditions
x0 <- c(SH=1e2,IH=0,RH=0,SM=1e5,IM=0)
require(deSolve)
## Time points where we want the solution
times <- seq(0,1*3000,0.01)
## Solve and plot
sol <- ode(x0,times,model,p)
plot(sol)
sol <- ode(x0,times,model,p)
plot(sol)
plot(sol)
## Code to simulate a stochastic Human/Mosquito vector-borne disease
## Parameters
nuH <- 0.01   # Per year
NH <- 1000    # # Humans
muH <- 0.01   # Per year
NM <- 1e6     # # Mosquitos
nuM <- 1      # Per year
muM <- 1      # Per year
gammaH <- 52  # Per year
deltaH <- 1   # Per year
betaH <- 3e-4 # ?
betaM <- 3e-4 # ?
## Time step control (DISREGARD WHY THIS IS DONE THIS WAY)
dt <- 1/max(c(betaH*NM*nuM/muM,betaM*NH*nuH/muH),nuH,muH,gammaH,deltaH,nuM,muM)
## Time step the system dt
timestep <- function(x)
{ with(as.list(x),{
## All transitions EXCEPT deaths
HumanBirths <- rbinom(n=1,NH,nuH*dt)
HumanInfections <- rbinom(n=1,SH,betaH*IM*dt)
HumanRecoveries <- rbinom(n=1,IH,gammaH*dt)
HumanImmunityLosses <- rbinom(n=1,RH,deltaH*dt)
SH <- SH + HumanBirths - HumanInfections + HumanImmunityLosses
IH <- IH + HumanInfections - HumanRecoveries
RH <- RH + HumanRecoveries - HumanImmunityLosses
MosquitoBirths <- rbinom(n=1,NM,nuM*dt)
MosquitoInfections <- rbinom(n=1,SM,betaM*IH*dt)
SM <- SM + MosquitoBirths - MosquitoInfections
IM <- IM + MosquitoInfections
## Deaths
SH <- SH - rbinom(n=1,SH,muH*dt)
IH <- IH - rbinom(n=1,IH,muH*dt)
RH <- RH - rbinom(n=1,RH,muH*dt)
SM <- SM - rbinom(n=1,SM,muM*dt)
IM <- IM - rbinom(n=1,IM,muM*dt)
return(c(SH,IH,RH,SM,IM))
}) }
## Simulate the system for a number of time steps
simulate <- function(x0,N)
{
X <- array(NA,c(5,N))
rownames(X) <- names(x0)
X[,1] <- x0
for(i in 2:N)
{
X[,i] <- timestep(X[,i-1])
}
return(as.data.frame(t(X)))
}
## Set initial condition
x0 <- c(SH=1e2,IH=0,RH=0,SM=1e5,IM=0)
## Simulate
X <- simulate(x0,10000)
## Plot one of the variables
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5), main = "Smittede myg i den endemiske tilstand")
lines(sol$SM, type = "l", col= "red")
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5), main = "Smittede myg i den endemiske tilstand")
lines(sol$SM, type = "l", col= "red")
lines(sol$SM, type = "l", col= "red")
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5), main = "Smittede myg i den endemiske tilstand")
lines(sol$SM, type = "l", col= "red")
## Time points where we want the solution
times <- seq(0,1*50,0.01)
## Solve and plot
sol <- ode(x0,times,model,p)
(plot(sol))
plot(X$SM, type = "l", col = "blue", ylim = c(1e5,10e5), main = "Smittede myg i den endemiske tilstand")
lines(sol$SM, type = "l", col= "red")
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("BBR.R")
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(grid)
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Example using Watts colors
plot(data[[1]]$Flow,col=Wcol[4])
# Average consumption -----------------------------------------------------
# Average consumption for all houses during a year
avg.plot1 <- ggplot(data = day.avg, mapping = aes(Date, Consumption)) + geom_point() +
ggtitle("Average consumption for all houses during a year ") + xlab("Time [days]") +
ylab("Avg. consumption [kWh]")
# Selected houses based on wether they follow the trend
day.plot.gak <- ggplot(data = day.data[[18]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 18")) + xlab("Time [days]") +
ylab("Daily consumption [kWh]")
day.plot.flot <- ggplot(data = day.data[[55]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 55")) + xlab("Time [days]") +
ylab("Daily consumption [kWh]")
grid.arrange(avg.plot1, day.plot.gak, day.plot.flot, nrow = 3)
