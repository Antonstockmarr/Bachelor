I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
Istar <- 45.90909 # sidste entry fra I fra ode solution
Sstar <- gamma/beta
J <- matrix(c(-beta*Istar-delta, -beta*Sstar-delta, Istar*beta, 0), nrow = 2, byrow = TRUE)
eigen(J)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0),mfrow=c(1,1),xpd=FALSE)
source("data.R")
source("stepP.R")
source("BSplines.R")
source("CircleCol.R")
# Defining new data set where the summer period is left out
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
}
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
lmSummary_est <- matrix(rep(0,11*n),nrow = n)
lmSummary_p <- matrix(rep(0,11*n),nrow = n)
colnames(lmSummary_est) <- c("I","T","W1","W2","W3","W4","SolaR","T:W1","T:W2","T:W3","T:W4")
colnames(lmSummary_p) <- c("I","T","W1","W2","W3","W4","SolaR","T:W1","T:W2","T:W3","T:W4")
par(mfrow = c(1,1))
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
#wd2 <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
plot(model.tmp$WindDirection,Splinebasis[,1]*lmSummary_est[i,'W1']+Splinebasis[,2]*lmSummary_est[i,'W2']
+Splinebasis[,3]*lmSummary_est[i,'W3']+Splinebasis[,4]*lmSummary_est[i,'W4'],ylab='Dependency',xlab='Wind Direction',col=Wcol[2],
main= i)
abline(h=0)
BSplin <- matrix(data=Splinebasis %*% diag(lmSummary_est[i,c('W1','W2','W3','W4')]),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
plot(Spline[,1],Spline[,2],col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
t.est <- as.table(lmSummary_est)
# Saving estimates in a .csv file
write.csv2(t.est, file = "lmMult_est.csv", row.names = TRUE)
t.pvalues <- as.table(lmSummary_p)
# Saving p-values in a .csv file
write.csv2(t.pvalues, file = "lmMult_pvalues.csv", row.names = TRUE)
# Making +*** table
lmSummary_star <- matrix(rep('',11*n),nrow = n)
for(i in 1:n){
for(j in 1:11){
if(lmSummary_est[i,j]<0){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'-')
}else{
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'+')
}
if(lmSummary_p[i,j]<0.05){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
if(lmSummary_p[i,j]<0.01){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
if(lmSummary_p[i,j]<0.001){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
}else if(lmSummary_p[i,j]<0.1){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'.')
}
}
}
colnames(lmSummary_star) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star, file = "lmMult_star.csv", row.names = TRUE)
View(lmSummary_star)
