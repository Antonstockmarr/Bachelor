plot(ACF, type="l", max.mfrow=1, ylim=c(-.5,1),col=1,ylab = "Autocorrelations",main="Autocorrelations for different realizations",
xlim = c(0,lagmax-1/2))
points(0:lagmax,ACF$acf[,1,1],col=colours[i],pch=20,cex=0.8)
for (i in 2:10){
ACF =  acf(ARMASIM[i,],plot=FALSE,lag.max=lagmax)
lines(0:lagmax,ACF$acf[,1,1], lty=1, col=colours[i], lwd=1)
points(0:lagmax,ACF$acf[,1,1],col=colours[i],pch=20,cex=0.8)
}
legend(x = "topright", legend = "95% confidence interval", lty=2, col="blue")
PACF <- pacf(ARMASIM[1,],plot=FALSE,lag.max=lagmax)
plot(PACF, type="l", max.mfrow=1, ylim=c(-.6,1),col=colours[1],ylab = "Partial autocorrelations",main="Partial autocorrelations for different realizations",
xlim = c(0,lagmax-1/2))
points(1:lagmax,PACF$acf[,1,1],col=colours[1],pch=20,cex=0.8)
legend(x = "topright", legend = "95% confidence interval", lty=2, col="blue")
for (i in 2:10){
PACF =  pacf(ARMASIM[i,],plot=FALSE,lag.max=lagmax)
lines(1:(lagmax),PACF$acf[,1,1], lty=1, col=colours[i], lwd=1)
points(1:lagmax,PACF$acf[,1,1],col=colours[i],pch=20,cex=0.8)
}
Var <- rep(NA,10)
for (i in 1:10){
ACF = acf(ARMASIM[i,],type="covariance",plot=FALSE, lag.max = lagmax)
Var[i] = ACF$acf[1,1,1]
}
## Question 2.2 ##
require(xts)
obs <- c(190, 208,213,223,237,214,221,201,191,184,184,189,188,207,221,225)
obs <- ts(obs, frequency = 12, start = c(2015,9))
plot(obs, type='l',main="Electricity consumption pr. month",xaxt='n',
xlab = 'Time', ylab = 'Energy consumption')
points(obs, pch = 20,cex=1)
tsp = attributes(obs)$tsp
dates = as.yearmon(time(obs))
axis(1, at = seq(tsp[1], tsp[2], along = obs), labels = dates)
require(xts)
obs2 <- c(190, 208,213,223,237,214,221,201,191,184,184,189,188,207,221,225,232.6,210.65)
obs2 <- ts(obs2, frequency = 12, start = c(2015,9))
plot(obs2,type='p',main="Electricity consumption pr. month",xaxt='n',
xlab = 'Time', ylab = 'Energy consumption',pch=20, cex=0.01, ylim = c(180,260))
lines(obs)
points(obs,pch = 20, cex = 1)
tsp = attributes(obs2)$tsp
dates = as.yearmon(time(obs2))
axis(1, at = seq(tsp[1], tsp[2], along = obs2), labels = dates)
points(dates[17:18], c(232.6,210.65), col = "red", pch = 20)
segments(x0=dates[17],y0=232.6+qnorm(0.975)*7,x1=dates[17],y1=232.6-qnorm(0.975)*7,col="green")
segments(x0=dates[18],y0=210.65+qnorm(0.975)*7*sqrt(1.25),x1=dates[18],y1=210.65-qnorm(0.975)*7*sqrt(1.25),col="green")
legend(x="topleft",legend = c("Observations","Predictions","95% prediction interval"),pch=c(20,20,NA),lty = c(NA,NA,1),col = c(1,"red","green"))
## Question 2.3 ##
# 1. model
ARMA <- arima.sim(n=200,list(order = c(1,0,0),ar = -0.85))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(1,1), heights=c(1,1))
plot(ARMA,type="l",col=1, ylim=c(-5,5), ylab = "Process values", xlab = "Time",
main = "Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
pacf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
# 2. model
ARMA <- arima.sim(n=200,list(order = c(12,0,0),ar = c(rep(0,11),0.8)))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(1,1), heights=c(1,1))
plot(ARMA,type="l",col=1, ylim=c(-5,5), ylab = "Process values", xlab = "Time",
main = "Plot of a (0,0,0)x(1,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
pacf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
# 3. model
ARMA <- arima.sim(n=200,list(order = c(1,0,12),ar = 0.8,ma =c(rep(0,11),0.7)))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(1,1), heights=c(1,1))
plot(ARMA,type="l",col=1, ylim=c(-5,5), ylab = "Process values", xlab = "Time",
main = "Plot of a (1,0,0)x(0,0,1) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
pacf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
# 4. model
ARMA <- arima.sim(n=200,list(order = c(13,0,0),ar = c(0.7,rep(0,10),-0.8,0.56)))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(1,1), heights=c(1,1))
plot(ARMA,type="l",col=1, ylim=c(-5,5), ylab = "Process values", xlab = "Time",
main = "Plot of a (1,0,0)x(1,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
pacf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
# 5. model
ARMA <- arima.sim(n=200,list(order = c(14,0,0),ar = c(-0.6,-0.6,rep(0,9),-0.8,-0.48,-0.48)))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(1,1), heights=c(1,1))
plot(ARMA,type="l",col=1, ylim=c(-5,5), ylab = "Process values", xlab = "Time",
main = "Plot of a (2,0,0)x(1,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
pacf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
# 5. model
ARMA <- arima.sim(n=200,list(order = c(0,0,13),ma = c(-0.7,rep(0,10),0.8,-0.56)))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(1,1), heights=c(1,1))
plot(ARMA,type="l",col=1, ylim=c(-5,5), ylab = "Process values", xlab = "Time",
main = "Plot of a (0,0,1)x(0,0,1) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
pacf(ARMA,main="",lag.max = 50, panel.first = c(abline(v=(1:4)*12,col="red",lty=2)))
par(mfrow=c(1,1))
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
# Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
for(i in 1:n){
if (i == 5){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d/%m/%Y %H.%M", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d/%m/%Y %H.%M", tz = "GMT")
}
else
{
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
}
Datalengths[i] = length(dt.tmp)
data[[i]] <- dt.tmp
# Setting start and end times for each table.
EndDays[i]= dt.tmp$StartDateTime[1]
StartDays[i]=dt.tmp$StartDateTime[length(dt.tmp$StartDateTime)]
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_09-05-2019.csv', sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
weather$StartDateTime = strptime(weather$StartDateTime,format='%d/%m/%Y %H.%M',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$StartDateTime[1]
weatherEnd = weather$StartDateTime[length(weather$StartDateTime[weather$IsHistoricalEstimated==FALSE])]
rm(i,n,file.names,data.path,dt.tmp,Datalengths)
str(data[1])
data[1]$StartDateTime
data[1]$Floeq
data[1]$Flow
str(data[1])
data[1]$Flow
data[1]$data.frame$Flow
data[1]$data.frame
data[[1]]$data.frame
data[[1]]$Flow
data[[5]]$StartDateTime
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
# Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
for(i in 1:n){
if (i == 5){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
}
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
Datalengths[i] = length(dt.tmp)
data[[i]] <- dt.tmp
# Setting start and end times for each table.
EndDays[i]= dt.tmp$StartDateTime[1]
StartDays[i]=dt.tmp$StartDateTime[length(dt.tmp$StartDateTime)]
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_09-05-2019.csv', sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
weather$StartDateTime = strptime(weather$StartDateTime,format='%d/%m/%Y %H.%M',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$StartDateTime[1]
weatherEnd = weather$StartDateTime[length(weather$StartDateTime[weather$IsHistoricalEstimated==FALSE])]
rm(i,n,file.names,data.path,dt.tmp,Datalengths)
StartDays
{
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
# Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
for(i in 1:n){
if (i == 5){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
}
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
Datalengths[i] = length(dt.tmp)
data[[i]] <- dt.tmp
# Setting start and end times for each table.
EndDays[i]= dt.tmp$StartDateTime[1]
StartDays[i]=dt.tmp$StartDateTime[length(dt.tmp$StartDateTime)]
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_09-05-2019.csv', sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
weather$StartDateTime = strptime(weather$StartDateTime,format='%d/%m/%Y %H.%M',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$StartDateTime[1]
weatherEnd = weather$StartDateTime[length(weather$StartDateTime[weather$IsHistoricalEstimated==FALSE])]
rm(i,n,file.names,data.path,dt.tmp,Datalengths)
}
{
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
}
weather$StartDateTime[weather$StartDateTime== data[[1]]$StartDateTime]
weather$StartDateTime[weather$StartDateTime== StartDay[1]]
weather$StartDateTime[weather$StartDateTime== StartDays[1]]
weather$StartDateTime[weather$StartDateTime== StartDays[1]]
StartDays[1]
weather$StartDateTime
weather$StartDateTime== StartDays[1]
weather$StartDateTime[(weather$StartDateTime== StartDays[1])==TRUE]
(weather$StartDateTime== StartDays[1])==TRUE
weather$StartDateTime[weather$StartDateTime <= endtimes[1]]
starttimes=weather$StartDateTime[1:n]
endtimes=weather$StartDateTime[1:n]
for(i in 1:n){
starttimes[i]=data[[i]]$StartDateTime[length(data[[i]]$StartDateTime)]
endtimes[i]=data[[i]]$StartDateTime[1]
}
#data.R
if(1==1){
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
# Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
for(i in 1:n){
if (i == 5){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
}
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
Datalengths[i] = length(dt.tmp)
data[[i]] <- dt.tmp
# Setting start and end times for each table.
EndDays[i]= dt.tmp$StartDateTime[1]
StartDays[i]=dt.tmp$StartDateTime[length(dt.tmp$StartDateTime)]
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_09-05-2019.csv', sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
weather$StartDateTime = strptime(weather$StartDateTime,format='%d/%m/%Y %H.%M',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$StartDateTime[1]
weatherEnd = weather$StartDateTime[length(weather$StartDateTime[weather$IsHistoricalEstimated==FALSE])]
rm(i,n,file.names,data.path,dt.tmp,Datalengths)
}
#exploratory.R
if(2==3){
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
}
starttimes=weather$StartDateTime[1:n]
endtimes=weather$StartDateTime[1:n]
#data.R
if(1==1){
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
# Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
for(i in 1:n){
if (i == 5){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
}
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
Datalengths[i] = length(dt.tmp)
data[[i]] <- dt.tmp
# Setting start and end times for each table.
EndDays[i]= dt.tmp$StartDateTime[1]
StartDays[i]=dt.tmp$StartDateTime[length(dt.tmp$StartDateTime)]
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_09-05-2019.csv', sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
weather$StartDateTime = strptime(weather$StartDateTime,format='%d/%m/%Y %H.%M',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$StartDateTime[1]
weatherEnd = weather$StartDateTime[length(weather$StartDateTime[weather$IsHistoricalEstimated==FALSE])]
rm(i,n,file.names,data.path,dt.tmp,Datalengths)
}
starttimes=weather$StartDateTime[1:n]
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
# Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
for(i in 1:n){
if (i == 5){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
}
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
Datalengths[i] = length(dt.tmp)
data[[i]] <- dt.tmp
# Setting start and end times for each table.
EndDays[i]= dt.tmp$StartDateTime[1]
StartDays[i]=dt.tmp$StartDateTime[length(dt.tmp$StartDateTime)]
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_09-05-2019.csv', sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
weather$StartDateTime = strptime(weather$StartDateTime,format='%d/%m/%Y %H.%M',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$StartDateTime[1]
weatherEnd = weather$StartDateTime[length(weather$StartDateTime[weather$IsHistoricalEstimated==FALSE])]
weather$StartDateTime[weather$StartDateTime <= endtimes[1]]
rm(i,n,file.names,data.path,dt.tmp,Datalengths)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
# Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$StartDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
for(i in 1:n){
if (i == 5){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
}
names(dt.tmp)[1] = 'StartDateTime'
dt.tmp$StartDateTime <- strptime(dt.tmp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
dt.tmp$EndDateTime <- strptime(dt.tmp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
Datalengths[i] = length(dt.tmp)
data[[i]] <- dt.tmp
# Setting start and end times for each table.
EndDays[i]= dt.tmp$StartDateTime[1]
StartDays[i]=dt.tmp$StartDateTime[length(dt.tmp$StartDateTime)]
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_09-05-2019.csv', sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
weather$StartDateTime = strptime(weather$StartDateTime,format='%d/%m/%Y %H.%M',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$StartDateTime[1]
weatherEnd = weather$StartDateTime[length(weather$StartDateTime[weather$IsHistoricalEstimated==FALSE])]
weather$StartDateTime[weather$StartDateTime <= EndDays[1]]
weather$StartDateTime[(weather$StartDateTime <= EndDays[1]) && (weather$StartDateTime >= StartDays[i])]
weather$StartDateTime[(weather$StartDateTime <= EndDays[1]) && (weather$StartDateTime >= StartDays[i])]
weather$StartDateTime[(weather$StartDateTime <= EndDays[1])]# && (weather$StartDateTime >= StartDays[i])]
tail(weather$StartDateTime[(weather$StartDateTime <= EndDays[1])])# && (weather$StartDateTime >= StartDays[i])]
EndDays[1]
StartDays
StartDays[1]
EndDays[1]
?rev
tail(weather$StartDateTime[(weather$StartDateTime <= EndDays[1])]) && (weather$StartDateTime >= StartDays[i])]
tail(weather$StartDateTime[(weather$StartDateTime <= EndDays[1]) && (weather$StartDateTime >= StartDays[i])])
tail(weather$StartDateTime[(weather$StartDateTime <= EndDays[1])])# && (weather$StartDateTime >= StartDays[i])])
tail(weather$StartDateTime[(weather$StartDateTime >= StartDays[i])])
head(weather$StartDateTime >= StartDays[i])
head(weather$StartDateTime[(weather$StartDateTime >= StartDays[i])])
weather$StartDateTime[(weather$StartDateTime >= StartDays[i]) && (weather$StartDateTime <= EndDays[1])]
tail(weather$StartDateTime[(weather$StartDateTime <= EndDays[1])])
head(weather$StartDateTime[(weather$StartDateTime >= StartDays[i])])
weather$StartDateTime >= StartDays[i]
weather$StartDateTime[(weather$StartDateTime >= StartDays[i]==TRUE) && (weather$StartDateTime <= EndDays[1] == TRUE)]
weather$StartDateTime[((weather$StartDateTime >= StartDays[i]) && (weather$StartDateTime <= EndDays[1]) == TRUE)]
sStartDays
tail(weather$StartDateTime[(weather$StartDateTime <= EndDays[1])])
tmp <- weather$StartDateTime[(weather$StartDateTime <= EndDays[1])]
weather$StartDateTime <- tmp[tmp >= StartDays[1]]
tmp[tmp >= StartDays[1]]
weather$StartDateTime <- tmp[tmp >= StartDays[1]]
tmp <- weather$StartDateTime[(weather$StartDateTime <= EndDays[1])]
tmp <- tmp[tmp >= StartDays[1]]
tmp
str(tmp)
head(tmp)
tail(tmp)
tmp <- weather[(weather$StartDateTime <= EndDays[1]),]
tmp <- weather[(weather$StartDateTime <= EndDays[1]),]
tmp <- tmp[tmp$StartDateTime >= StartDays[1],]
str(tmp)
weather <- weather[dim(weather)[1]:1,]
tmp <- weather[(weather$StartDateTime <= EndDays[1]),]
tmp <- tmp[tmp$StartDateTime >= StartDays[1],]
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
pairs(data[[1]])
plot(data[[1]]$Flow)
plot(data[[1]]$Flow, xaxt = 'n')
axis(1,labels = data[[1]]$StartDateTime)
axis(1, at=x,labels = data[[1]]$StartDateTime)
axis(1, at=data[[1]]$StartDateTime,labels = data[[1]]$StartDateTime)
?axis
