plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
Istar <- 45.90909 # sidste entry fra I fra ode solution
Sstar <- gamma/beta
J <- matrix(c(-beta*Istar-delta, -beta*Sstar-delta, Istar*beta, 0), nrow = 2, byrow = TRUE)
eigen(J)
# Initializing workspace and directory.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
# Sources and packages
source("DataChecking.R")
source("Polarize.R")
source("Sun.R")
library(xts)
# Watts colorscheme
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Loading all data
data.path = "../Consumption data/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(1,nrow=n)
data <- vector(mode="list", length = n)
day.data <- vector(mode="list", length = n)
data.key <- rep("",n)
data.key
file.names
head(Holiday)
head(Holidays)
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
tmp_Holiday
str(tmp_Holiday$AutumnBreak)
tmp_Holiday$AutumnBreak
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("stepP.R")
source("BSplines.R")
tmp_Holiday$AutumnBreak
library(doParallel)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
}
# Defining new data set where the summer period is left out
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
}
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
if(length(weatherCons[[i]]$Date<360)){
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}else{
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+SpringBreak+WinterBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
BSplin <- matrix(data=Splinebasis %*% diag(4),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
plot(Spline[,1],Spline[,2],xlim=c(-1,1),ylim=c(-1,1),col=CircleColoring(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("stepP.R")
source("BSplines.R")
# Defining new data set where the summer period is left out
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
}
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
if(length(weatherCons[[i]]$Date<360)){
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}else{
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+SpringBreak+WinterBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
BSplin <- matrix(data=Splinebasis %*% diag(4),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
plot(Spline[,1],Spline[,2],xlim=c(-1,1),ylim=c(-1,1),col=CircleColoring(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/MultipleRegression.R', echo=TRUE)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("stepP.R")
source("BSplines.R")
source("CircleCol.R")
# Defining new data set where the summer period is left out
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
}
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
if(length(weatherCons[[i]]$Date<360)){
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}else{
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+SpringBreak+WinterBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
BSplin <- matrix(data=Splinebasis %*% diag(4),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
plot(Spline[,1],Spline[,2],xlim=c(-1,1),ylim=c(-1,1),col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
if(length(weatherCons[[i]]$Date<360)){
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}else{
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+SpringBreak+WinterBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
BSplin <- matrix(data=Splinebasis %*% diag(4),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
plot(Spline[,1],Spline[,2],xlim=c(-1,1),ylim=c(-1,1),col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
par(mfrow=c(2,1))
plot(Spline[,1],Spline[,2],xlim=c(-1,1),ylim=c(-1,1),col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
if(length(weatherCons[[i]]$Date<360)){
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}else{
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+SpringBreak+WinterBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
BSplin <- matrix(data=Splinebasis %*% diag(4),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
par(mfrow=c(1,2))
plot(Spline[,1],Spline[,2],xlim=c(-1,1),ylim=c(-1,1),col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
par(mfrow=c(1,2))
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
if(length(weatherCons[[i]]$Date<360)){
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}else{
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(I(WindSpeed*Splinebasis)[,1]+I(WindSpeed*Splinebasis)[,2]+I(WindSpeed*Splinebasis)[,3]+I(WindSpeed*Splinebasis)[,4])+AutumnBreak+ChristmasBreak+SpringBreak+WinterBreak+Weekend+(.-WindSpeed-Weekend-AutumnBreak-SpringBreak-ChristmasBreak-WinterBreak)^2, data = model.tmp)
}
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
BSplin <- matrix(data=Splinebasis %*% diag(4),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
plot(Spline[,1],Spline[,2],xlim=c(-1,1),ylim=c(-1,1),col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
# Investigating parameters from model
summary(lmMultiple[[60]]$object)
