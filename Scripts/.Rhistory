lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
if(lmFull_p_S[i,j]<0.01){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
if(lmFull_p_S[i,j]<0.001){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'*')
}
}else if(lmFull_p_S[i,j]<0.1){
lmSummary_star_S[i,j] <-paste(lmSummary_star_S[i,j],'.')
}
}
}
colnames(lmSummary_star_S) <- c("I","T","N","E","S","W","MeanSeaLvl","SolaR","AutumnB","ChristB","Weekend","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star_S, file = "lmMult_star_S.csv", row.names = TRUE)
star_count_S_array <- lmSummary_star_S
star_count_S_array <- gsub("\\.", "", star_count_S_array)
star_count_S_array <- nchar(star_count_S_array)
star_count_S_array <- star_count_S_array>3
colSums(star_count_S_array)
#summary(stepP(lmMultipleFull[[6]])$object)
#summary(lmMultipleFull[[6]])
# General regression model for comparing houses ---------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
lmSummary_est <- matrix(rep(0,11*n),nrow = n)
lmSummary_p <- matrix(rep(0,11*n),nrow = n)
Wind.Pred <- vector(mode = "list", length = n)
colnames(lmSummary_est) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
colnames(lmSummary_p) <- c("I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
par(mfrow = c(1,1))
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
# Checking model assumptions
par(mfrow = c(2,2), mar = c(3,3,3,1) + 0.1)
plot(lmMultiple[[i]]$object)
title(paste("Daily consumption for house ", i), outer=TRUE, adj = 0.5, line = -1.25)
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
# Wind profile plot
par(mfrow = c(1,1))
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ .+Temperature*(N + E + S + W),data = model.Wind)
Splinebasis2 <- BSplines(1:360)
newData = data.frame(Temperature = rep(0, 360), # 0 grader
Radiation = rep(0, 360), # Om natten
N = Splinebasis2[,3],
E = Splinebasis2[,4],
S = Splinebasis2[,1],
W = Splinebasis2[,2])
Wind.Pred[[i]]<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Wind.Pred[[i]]$fit,type='l',ylim=range(Wind.Pred[[i]]$lwr,Wind.Pred[[i]]$upr),main=paste("hus: ",i))
lines(Wind.Pred[[i]]$upr,lty=2)
lines(Wind.Pred[[i]]$lwr,lty=2)
abline(v=c(0,90,180,270,360), col="gray", lty=2, lwd=1)
}
t.est <- as.table(lmSummary_est)
# Saving estimates in a .csv file
write.csv2(t.est, file = "lmMult_est.csv", row.names = TRUE)
t.pvalues <- as.table(lmSummary_p)
# Saving p-values in a .csv file
write.csv2(t.pvalues, file = "lmMult_pvalues.csv", row.names = TRUE)
# Making +*** table
lmSummary_star <- matrix(rep('',12*n),nrow = n)
for(i in 1:n){
lmSummary_star[i,1]<-i
for(j in 2:12){
if(lmSummary_est[i,j-1]<0){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'-')
}else{
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'+')
}
if(lmSummary_p[i,j-1]<0.05){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
if(lmSummary_p[i,j-1]<0.01){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
if(lmSummary_p[i,j-1]<0.001){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'*')
}
}else if(lmSummary_p[i,j-1]<0.1){
lmSummary_star[i,j] <-paste(lmSummary_star[i,j],'.')
}
}
}
colnames(lmSummary_star) <- c("HouseIndex","I","T","N","E","S","W","SolaR","T:N","T:E","T:S","T:W")
write.csv2(lmSummary_star, file = "lmMult_star.csv", row.names = TRUE)
write.csv2(lmSummary_star[Long,], file = "lmMult_L_star.csv", row.names = TRUE)
write.csv2(lmSummary_star[Short,], file = "lmMult_S_star.csv", row.names = TRUE)
star_count_array <- lmSummary_star
star_count_array <- gsub("\\.", "", star_count_array)
star_count_array <- nchar(star_count_array)
star_count_array <- star_count_array>3
colSums(star_count_array)/n
# Counting negative estimates
sum(lmSummary_est[,3:6] < 0) / sum(lmSummary_est[,3:6] < 1000000)
sum(lmSummary_est[,8:11] < 0) / sum(lmSummary_est[,8:11] < 1000000)
# Investigating parameters from model
summary(lmMultipleNoP[[1]])
par(mfrow=c(2,2))
# Checking model assumptions
for (i in 1:n)
{
plot(lmMultiple[[i]]$object)
}
# Saving slopes and p-values
modelListSlope <- vector(mode="list",length=n)
modelListPval <- vector(mode="list",length=n)
for (i in 1:n)
{
modelListSlope[[i]] = lmMultiple[[i]]$object #for slopes
modelListPval[[i]] = summary(lmMultiple[[i]]$object)$coefficients #for p vals
}
length(data)
length(data[[1]])
dim(data[[1]])
dim(data[[1]])[1]
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-k)]
}
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=Dataset
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days)]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
}
return(Train)
}
train=TrainDays(data,31)
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),2:dim(Dataset[[i]])[2]]
}
return(Train)
}
train=TrainDays(data,31)
data[[i]][1:(dim(data[[1]])[1]-days),2:dim(data[[1]])[2]]
data[[i]][1:(dim(data[[1]])[1]-31),2:dim(data[[1]])[2]]
train
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
}
return(Train)
}
train=TrainDays(data,31)
train
TrainDays=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
Test=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
Test[[i]]<-Dataset[[i]][ni+(1:days),]
}
return(list(Train,Test))
}
train=TrainDays(data,31)
train$Train
train
train[[1]]
TrainTest=function(Dataset,days){
n=length(Dataset)
Train=vector(mode="list", length = n)
Test=vector(mode="list", length = n)
for(i in 1:n){
ni<-dim(Dataset[[i]])[1]
Train[[i]]<-Dataset[[i]][1:(ni-days),]
Test[[i]]<-Dataset[[i]][ni+(1:days),]
}
return(list(Train,Test))
}
BBR$Hustype
BBR$Hustype[28]
sum(BBR$Hustype=="Erhverv")
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/data.R', echo=TRUE)
source("TrainTest.R")
ttd<-TrainTest(day.data,31)
ttd<-TrainTest(weatherCons,31)
ttd[[1]][[i]]
i<-1
ttd[[1]][[i]]
newData = ttd[[2]][[i]]
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/Predictions.R', echo=TRUE)
source('C:/Users/mikke/Desktop/6. sem/Bach/Bachelor-f19/Scripts/Predictions.R', echo=TRUE)
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("data.R")
source("TrainTest.R")
source("BSplines.R")
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
ttd<-TrainTest(model.data,31)
lmMultipleNoP <- vector(mode = "list", length = n)
par(mfrow = c(1,1))
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
model.tmp
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
summary(lmMultipleNoP[[i]])
newData = ttd[[2]][[i]]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
newData
newData = ttd[[2]][[i]]
ttd[[2]][[i]]
ttd[[1]][[1]]
ttd[[2]][[1]]
source("TrainTest.R")
ttd<-TrainTest(model.data,31)
ttd[[2]][[i]]
for (i in 1) {
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
}
Pred
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=paste("hus: ",i))
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=2,col=2)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=paste("hus: ",i))
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
}
max(ttd[[2]][[1]]$Temperature)
qt(0.975,703-3-24)
View(data)
!is.na(data[[i]]$Flow)
is.na(data[[i]]$Flow)
sum(is.na(data[[i]]$Flow))
data[[i]]$Flow
for(i in 1){
!is.na(data[[i]]$Flow)
}
!is.na(data[[i]]$Flow)
tail(!is.na(data[[i]]$Flow))
match(!is.na(data[[i]]$Flow))
which(!is.na(data[[i]]$Flow))
which(is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1)]
for(i in 1){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1)]
}
tail(!is.na(data[[i]]$Flow))
for(i in 1){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1)]
}
for(i in 1){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
}
tmp.dat
nas<-which(!is.na(data[[i]]$Flow))
nas
nas<-which(is.na(data[[i]]$Flow))
nas
nas<-which(is.na(tmp.dat$Flow))
nas
tmp.dat[j,2:]
tmp.dat[j,2:end]
tmp.dat
m<-dim(tmp.dat)
m<-dim(tmp.dat)[2]
tmp.dat[j,2:8]
for(j in nas){
tmp.dat[j,2:8]<-data[[i]][nas[1]:tail(nas,1),]
}
tmp.dat[j,2:8]
warnings()
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
tmp.dat[j,2:m]
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
}
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
}
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
data[[i]]<-tmp.dat
}
for(i in 1:n){
sum(which(is.na(data[[i]]$Flow)))
}
print(sum(which(is.na(data[[i]]$Flow))))
for(i in 1:n){
print(sum(which(is.na(data[[i]]$Flow))))
}
print(nas)
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
print(nas)
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
data[[i]]<-tmp.dat
}
nas<-which(!is.na(data[[i]]$Flow))
nas
nas<-which(is.na(tmp.dat$Flow))
nas
source("data.R")
i=1
nas<-which(!is.na(data[[i]]$Flow))
nas
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
nas
print(nas)
newdata<- data
for(i in 1:n){
nas<-which(!is.na(data[[i]]$Flow))
tmp.dat<-data[[i]][nas[1]:tail(nas,1),]
nas<-which(is.na(tmp.dat$Flow))
print(nas)
m<-dim(tmp.dat)[2]
for(j in nas){
tmp.dat[j,2:m]<-(data[[i]][j-1,2:m]+data[[i]][j+1,2:m])/2
}
newdata[[i]]<-tmp.dat
}
for(i in 1:n){
print(sum(which(is.na(data[[i]]$Flow))))
}
for(i in 1:n){
print(sum(is.na(data[[i]]$Flow)))
}
