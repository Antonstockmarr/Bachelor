}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 1   # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
plot(tv,I,type="s",xlab="Time",ylab="I")
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*R[i]*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
N <- 1000  # Number of individuals in the population
I0 <- 10    # Initial number of infected
S0 <- N-I0 # Vi har ikke recovered endnu, så det er N pr. de syge
## Define state vector
X <- rep(1,N) # "1" codes "susceptible", "2" codes "infected", "3" codes "recovered"
X[1:I0] <- 2
## Model parameters
gamma <- 1
R_0 <- 2
beta <- (R_0*gamma)/S0 # Udtryk for R0 og isolere beta
delta <- gamma/10
## Simulation parameters
T <- floor(365/2)
dt <- (T/24)/30
nt <- T/dt
tv <- seq(0,T,dt)
## Output
S <- I <- R <- numeric(nt+1)
S[1] <- sum(X == 1)
I[1] <- sum(X == 2)
R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
Istar <- 45.90909 # sidste entry fra I fra ode solution
Sstar <- gamma/beta
J <- matrix(c(-beta*Istar-delta, -beta*Sstar-delta, Istar*beta, 0), nrow = 2, byrow = TRUE)
eigen(J)
setwd("~/")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
for (i in 1:3) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple <- lm(Consumption ~ Temperature, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2), mar=c(3,3,2,1))
plot(lm.simple)
title(paste("Daily consumption for house ", i), outer=TRUE)
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
model.data <- weatherCons
for (i in 1:3) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple <- lm(Consumption ~ Temperature, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2), mar=c(3,3,2,1))
plot(lm.simple)
title(paste("Daily consumption for house ", i), outer=TRUE)
}
?solaR
install.packages("solaR")
?solaR
library(solaR)
?solaR
?calcSol
?tail
?print
str(model.tmp[[6]])
str(model.data[[6]])
