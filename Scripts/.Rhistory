Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 0.95))
if(k>length(Long)){
mm<-paste("Short house: ",i)
}else{
mm<-paste("Long house: ",i)
}
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=mm)
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
legend(x = "topright", legend = c("Prediction", "95% PI", "Data"), lty = c(1,2,1), col = c(1,1,2))
}
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
if(!exists("n")){
source("data.R")
}
source("TrainTest.R")
source("BSplines.R")
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
#Flip WeatherCons
for(i in 1:n){
k<-dim(weatherCons[[i]])[1]
weatherCons[[i]]<-weatherCons[[i]][k:1,]
}
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
ttd<-TrainTest(model.data,31)
lmMultipleNoP <- vector(mode = "list", length = n)
par(mfrow = c(1,1))
k<-0
for (i in c(Long,Short)) {
k<-k+1
if(k<=length(Long)){
print(paste('Modeling long house ',i))
}else{
print(paste('Modeling short house ',i))
}
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 0.95))
if(k>length(Long)){
mm<-paste("Short house: ",i)
}else{
mm<-paste("Long house: ",i)
}
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=mm)
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
legend(x = "topright", legend = c("Prediction", "95% PI", "Data"), lty = c(1,2,1), col = c(1,1,2))
}
par(mfrow = c(1,1))
k<-0
for (i in c(Long,Short)) {
k<-k+1
if(k<=length(Long)){
print(paste('Modeling long house ',i))
}else{
print(paste('Modeling short house ',i))
}
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 0.95))
if(k>length(Long)){
mm<-paste("Short house: ",i)
}else{
mm<-paste("Long house: ",i)
}
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=mm)
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data"), lty = c(1,2,1), col = c(1,1,2))
}
?predict
p
# Average consumption for all houses during a year
avg.plot1 <- ggplot(data = day.avg, mapping = aes(Date, Consumption)) + geom_point() +
ggtitle("Average consumption for all houses during a year ") + xlab("Time") +
ylab("Average consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
# Selected houses based on wether they follow the trend
day.plot.gak <- ggplot(data = day.data[[18]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 18")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
day.plot.flot <- ggplot(data = day.data[[55]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 55")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
{
pdf(file = "../figures/daily_cons.pdf",width = 4.5,height = 2.8,pointsize = 9)
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
grid.arrange(avg.plot1, day.plot.gak, day.plot.flot, nrow = 3)
dev.off()
}
grid.arrange(avg.plot1, day.plot.gak, day.plot.flot, nrow = 3)
# Average consumption for all houses during a year
avg.plot1 <- ggplot(data = day.avg, mapping = aes(Date, Consumption)) + geom_point() +
ggtitle("Average consumption for all houses during a year ") + xlab("Time") +
ylab("Average consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
# Selected houses based on wether they follow the trend
day.plot.gak <- ggplot(data = day.data[[18]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 18")) + xlab("Time") +
geom_smooth(col=Wcol[2], se = T)
day.plot.flot <- ggplot(data = day.data[[55]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 55")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
grid.arrange(avg.plot1, day.plot.gak, day.plot.flot, nrow = 3)
# Selected houses based on wether they follow the trend
day.plot.gak <- ggplot(data = day.data[[18]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 18")) + xlab("Time") +
ylab("") +
geom_smooth(col=Wcol[2], se = T)
grid.arrange(avg.plot1, day.plot.gak, day.plot.flot, nrow = 3)
# Average consumption for all houses during a year
avg.plot1 <- ggplot(data = day.avg, mapping = aes(Date, Consumption)) + geom_point() +
ggtitle("Average consumption for all houses during a year ") + xlab("Time") +
ylab("Avg. consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
# Selected houses based on wether they follow the trend
day.plot.gak <- ggplot(data = day.data[[18]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 18")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
day.plot.flot <- ggplot(data = day.data[[55]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 55")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
grid.arrange(avg.plot1, day.plot.gak, day.plot.flot, nrow = 3)
# Weather pairs
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
GGally::ggpairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
# Pairs plots -------------------------------------------------------------
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
day.tmp$Consumption <- day.avg$Consumption
# Weather pairs
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
GGally::ggpairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption")
plot7 <- ggplot(data = day.tmp, aes(x = WindSpeed, y= Consumption)) + geom_point() + ylab("Consumption")
plot8 <- ggplot(data = day.tmp, aes(x = WindDirection, y= Consumption)) + geom_point() + ylab("Consumption")
plot9 <- ggplot(data = day.tmp, aes(x = MeanSeaLevelPressure, y= Consumption)) + geom_point() + ylab("Consumption")
plot10 <- ggplot(data = day.tmp, aes(x = DewPoint, y= Consumption)) + geom_point() + ylab("Consumption")
grid.arrange(plot6, plot7, plot8, plot9, plot10, nrow = 3, ncol = 2)
plot6
# Investigating BBR data --------------------------------------------------
HouseType <- c(BBR$HouseType)
legend11 <- "Type 1: Industry \n Type 2: Public \n Type 3: Apartment \n Type 4: Parcel \n Type 5: Terrace"
my_grob = grid.text(legend11, x=0.1,  y=0.8, gp=gpar(col="black", fontsize=12, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
my_grob = grid.text(legend11, x=0.1,  y=0.8, gp=gpar(col="black", fontsize=10, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
my_grob = grid.text(legend11, x=0.1,  y=0.8, gp=gpar(col="black", fontsize=8, fontface="bold"), just = "left")
plot11 <- ggplot(data = data.frame(HouseType), aes(x = HouseType)) + geom_histogram(bins = 15) + theme(legend.position = "topleft",legend.direction = "horizontal") + annotation_custom(my_grob)
plot12 <- ggplot(data = BBR, aes(x = TotalArea)) + geom_histogram(bins = 15)
plot13 <- ggplot(data = BBR, aes(x = ConstructionYear)) + geom_histogram(bins = 15)
plot14 <- ggplot(data = BBR, aes(x = ReconstructionYear)) + geom_histogram(bins = 15)
grid.arrange(plot11, plot12, plot13, plot14, nrow = 2, ncol = 2)
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(yintercept=12, linetype="dashed", color = "red"))
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(vintercept=12, linetype="dashed", color = "red"))
plot1
plot6
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=12, linetype="dashed", color = "red"))
plot6
# Weather pairs
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=12, linetype="dashed", color = "red"))
plot6
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1.5))
plot6
library(ggplot2)
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1.5))
plot
plot6
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=12))
plot6
plot1 <- ggplot(data = day.avg, aes(x = Flow, y= Consumption)) + geom_point() + ylab("Consumption")
plot2 <- ggplot(data = day.avg, aes(x = Volume, y= Consumption)) + geom_point() + ylab("Consumption")
plot1
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=5, linetype="dashed", color = "red",size=1.5))
plot6
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=10, linetype="dashed", color = "red",size=1.5))
plot6
plot6 <- ggplot(data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption" + geom_vline(xintercept=10, linetype="dashed", color = "red",size=5))
plot6
plot6 <- ggplot(geom_vline(xintercept=10, linetype="dashed", color = "red",size=5), data = day.tmp, aes(x = Temperature, y= Consumption)) + geom_point() + ylab("Consumption")
plot6  + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1.5)
plot6  + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1)
plot6  + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1) + labs(x = "Temperature", y = "Average consumption")
plot6  + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1) + theme(axis.title.x = element_text(size = 14))
plot6  + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1) + theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
plot6  ylab("Average consumption") + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1) + theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
plot6 +  ylab("Average consumption") + geom_vline(xintercept=12, linetype="dashed", color = "red",size=1) + theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
if(!exists("n")){
source("data.R")
}
source("TrainTest.R")
source("BSplines.R")
# Daily predictions ----------------------------------
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
#Flip WeatherCons
for(i in 1:n){
k<-dim(weatherCons[[i]])[1]
weatherCons[[i]]<-weatherCons[[i]][k:1,]
}
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
ttd<-TrainTest(model.data,31)
ttm<-TrainTest(weatherCons,31)
mondays<-which(weekdays(ttm[[2]][[1]]$Date)=="Monday")-.5
# Weatherplots for daily predictions
par(mfrow=c(3,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab="Temperature",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab="Solar Radiation",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
lmMultipleNoP <- vector(mode = "list", length = n)
par(mfrow = c(1,1))
k<-0
for (i in c(Long,Short)) {
k<-k+1
if(k<=length(Long)){
print(paste('Modeling long house ',i))
}else{
print(paste('Modeling short house ',i))
}
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 0.95))
if(k>length(Long)){
mm<-paste("Short house: ",i)
}else{
mm<-paste("Long house: ",i)
}
# Statistisk plot
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=mm)
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
abline(v=mondays,lty=2,col="gray")
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data"), lty = c(1,2,1), col = c(1,1,2))
# Kundeplot(s)
PredK<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 1/3))
plot(PredK$fit,type='n',ylim=range(PredK$lwr,PredK$upr,ttd[[2]][[i]]$Consumption),main=mm,ylab="Consumption",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
ylim=c(-100,1000)
polygon(c(1:31, 31, 1), y= c(PredK$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:31, 31, 1), y= c(PredK$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:31, 31:1), y= c(PredK$lwr, rev(PredK$upr)), col = Wcol[3], lty=0)
lines(1:31,ttd[[2]][[i]]$Consumption,type='o',col=1,lwd=3)
}
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
#Flip WeatherCons
for(i in 1:n){
k<-dim(weatherCons[[i]])[1]
weatherCons[[i]]<-weatherCons[[i]][k:1,]
}
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
ttd<-TrainTest(model.data,31)
ttm<-TrainTest(weatherCons,31)
mondays<-which(weekdays(ttm[[2]][[1]]$Date)=="Monday")-.5
# Weatherplots for daily predictions
par(mfrow=c(3,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab="Temperature",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab="Solar Radiation",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
lmMultipleNoP <- vector(mode = "list", length = n)
par(mfrow = c(1,1))
k<-0
for (i in c(Long,Short)) {
k<-k+1
if(k<=length(Long)){
print(paste('Modeling long house ',i))
}else{
print(paste('Modeling short house ',i))
}
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 0.95))
if(k>length(Long)){
mm<-paste("Short house: ",i)
}else{
mm<-paste("Long house: ",i)
}
# Statistisk plot
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=mm)
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
abline(v=mondays,lty=2,col="gray")
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data"), lty = c(1,2,1), col = c(1,1,2))
# Kundeplot(s)
PredK<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 1/3))
plot(PredK$fit,type='n',ylim=range(PredK$lwr,PredK$upr,ttd[[2]][[i]]$Consumption),main=mm,ylab="Consumption",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
ylim=c(-100,1000)
polygon(c(1:31, 31, 1), y= c(PredK$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:31, 31, 1), y= c(PredK$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:31, 31:1), y= c(PredK$lwr, rev(PredK$upr)), col = Wcol[3], lty=0)
lines(1:31,ttd[[2]][[i]]$Consumption,type='o',col=1,lwd=3)
}
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
source("TrainTest.R")
source("BSplines.R")
k <-1:n
Long <- k[Datalengths>=360]
Short <- k[Datalengths<360]
#Flip WeatherCons
for(i in 1:n){
k<-dim(weatherCons[[i]])[1]
weatherCons[[i]]<-weatherCons[[i]][k:1,]
}
# Defining data used for modeling
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
model.data[[i]]$Condition <- NULL
}
ttd<-TrainTest(model.data,31)
ttm<-TrainTest(weatherCons,31)
mondays<-which(weekdays(ttm[[2]][[1]]$Date)=="Monday")-.5
# Weatherplots for daily predictions
par(mfrow=c(3,1))
plot(ttd[[2]][[1]]$Temperature,type='o',lwd=3,ylab="Temperature",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$Radiation,type='o',lwd=3,ylab="Solar Radiation",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
plot(ttd[[2]][[1]]$WindDirection,type='o',lwd=3,ylab="Wind Direction",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
lmMultipleNoP <- vector(mode = "list", length = n)
par(mfrow = c(1,1))
k<-0
for (i in c(Long,Short)) {
k<-k+1
if(k<=length(Long)){
print(paste('Modeling long house ',i))
}else{
print(paste('Modeling short house ',i))
}
model.tmp <- ttd[[1]][[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
tmp.wind <- Splinebasis*model.tmp$WindSpeed
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(North + East + South + West)+
Radiation, data = model.tmp)
newData = ttd[[2]][[i]]
Splinetest <- BSplines(newData$WindDirection)
test.wind <- Splinetest*newData$WindSpeed
newData$North <- test.wind[,3]
newData$East <- test.wind[,4]
newData$South <- test.wind[,1]
newData$West <- test.wind[,2]
newData$Consumption<-NULL
Pred<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 0.95))
if(k>length(Long)){
mm<-paste("Short house: ",i)
}else{
mm<-paste("Long house: ",i)
}
# Statistisk plot
plot(Pred$fit,type='l',ylim=range(Pred$lwr,Pred$upr),main=mm)
lines(Pred$upr,lty=2)
lines(Pred$lwr,lty=2)
lines(ttd[[2]][[i]]$Consumption,lty=1,col=2)
abline(v=mondays,lty=2,col="gray")
legend(x = "topleft", legend = c("Prediction", "95% PI", "Data"), lty = c(1,2,1), col = c(1,1,2))
# Kundeplot(s)
PredK<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "prediction", level = 1/3))
plot(PredK$fit,type='n',ylim=range(PredK$lwr,PredK$upr,ttd[[2]][[i]]$Consumption),main=mm,ylab="Consumption",xlab="January 2019",xaxt='n')
axis(1, at=c(1,15,31), labels=c("1st","15th","31st"))
ylim=c(-100,1000)
polygon(c(1:31, 31, 1), y= c(PredK$lwr,ylim[1],ylim[1]), col = Wcol[2], lty=0)
polygon(c(1:31, 31, 1), y= c(PredK$upr,ylim[2],ylim[2]), col = Wcol[4], lty=0)
polygon(c(1:31, 31:1), y= c(PredK$lwr, rev(PredK$upr)), col = Wcol[3], lty=0)
lines(1:31,ttd[[2]][[i]]$Consumption,type='o',col=1,lwd=3)
}
