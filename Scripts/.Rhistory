(3226.7/3)/352.7
(3226.7/8)/352.7
(3226.7/1)/352.7
352.7*(70-2)
(352.7*(70-2))+3226.7
(352.7*(4-2))+3226.7
(352.7*(9-2))+3226.7
(352.7*(18-2))+3226.7
(352.7*(70-2))+3226.7
(352.7*(70-1))+3226.7
F = (3226.7/(2-1)) / (27563/(70-2))
1-pf(F,df1 = 2-1, df2 = 70-2)
1-pf(abs(9.148568),df1 = 2-1, df2 = 70-2)
53.91-40.52
0.05/1
2*352.7
0.05/18
1-(0.05/2)/2
1-(0.05/4)/2
1-(0.05/8)/2
pi/8
20^2*sin(2*pi/8)/9.81
(20^2*sin(2*pi/8))/9.81
(20^2*sin(2*3*pi/8))/9.81
qnorm(0.99,mean = 20, sd = 2)
pnorm(0.99,mean = 20, sd = 2)
39.73^2
dbinom(0,229,0.00144)
dhyper(0,229,0.00144)
?Hypergeometric
?norm
?dnorm
?binom
?binorm
?dbinom
pbinom(0.299,0.00144)
pbinom(0.299,prob = 0.00144)
pbinom(0,299,prob = 0.00144)
dbinom(0,38,0.00144)
pbinom(0,30,prob = 0.00144)
pbinom(0,38,prob = 0.00144)
sqrt(0.00144*(1-0.00144)/229
sqrt(0.00144*(1-0.00144)/229)
sqrt(0.00144*(1-0.00144)/229)
sqrt(0.00144*(1-0.00144)/38)
0.00144*229
0.00144*38
0.00144+c(-1,1)*qnorm(0.975)*sqrt((0.00144*(1-0.00144))/229)
?quantile
0.00144+c(-1,1)*qnorm(0.025)*sqrt((0.00144*(1-0.00144))/229)
0.00144+c(-1,1)*qnorm(0.995)*sqrt((0.00144*(1-0.00144))/229)
piger = c(105, 113, 115, 116, 121, 125, 128, 128, 130, 132)
drenge = c(115, 115, 118, 122, 123, 124, 125, 126, 129, 133)
quantile(drenge,type=2)
quantile(0.00144,type=2)
9/25*100
9/25
25/9
defective = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
quantile(defective,type=2)
229*770
176330/5
35266*0.00144
(770/5)229
(770/5)*229
qnorm(1-0.05/2)
1-0.05/2
qnorm(0.975)
0.00144*(1-0.00144)*(196/35266)^2
0.00144*(1-0.00144)*(196/176330)^2
0.00144*(1-0.00144)*(1.96/176330)^2
0.00144*(1-0.00144)*(1.96/15)^2
0.00144*(1-0.00144)*(1.96/5)^2
(0.00144-0.0001)^2/0.0001
(0.00144-0.0001)^2/0.00144
0.00152-0.00144
qnorm(0.975)
(9-8.5)^2/8.5
((9-8.5)^2/8.5) + ((8-8.5)^2/8.5)
2/17
1/17
2*pt(48.865,df = 229-1)
2*qt(48.865,df = 229-1)
2*(1-pnorm(48.865))
2*(1-pnorm(abs(48.865))
2*(1-pnorm(abs(48.865))
2*(pnorm(abs(48.865))
1-pnorm(abs(48.865))
1-pnorm(48.865)
1-pnorm(48.865)
?t.test
1-pf(9.149,1,69)
1-0.05/2
5*0.00144
0.0072/(229*770)
0.0072/770
(229*770)*0.0072
0.0072*770
0.00144/5
p = 0.00144
ME = 0.0001
p*(1-p)*(qnorm(0.975)/ME)^2
1-p
p*(1-p)
1.96/0.0001
0.05/0.0001
ME*(1-ME)*(qnorm(0.975)/p)^2
2*(1-pt(48.865))
2*(1-pt(48.865, df = 17-1))
2*(1-pt(48.865, df = 18-1))
2*(1-pt(48.865, df = 1))
2*(1-pt(0.48865, df = 2-1))
2*(1-pt(0.48865, df = 18-1))
2*(1-pnorm(0.48865))
2*(pnorm(0.48865))
1-pnorm(0.48865)
1/4*(qnorm(0.975)/ME)^2
0.00144/(229*770)
552373.3/770
ls()
?sapply
?ks.test
install.packages("shiny")
?shiny
install.packages("shiny")
22/7
rm(list=ls())
## set working directory
require("knitr")
install.packages("knitr")
```{r "setup", include=FALSE}
rm(list=ls())
## set working directory
require("knitr")
## set working directory
require("knitr")
## set working directory
require("knitr")
rm(list=ls())
## set working directory
require("knitr")
install.packages("rmarkdown")
```{r "setup", include=FALSE}
rm(list=ls())
## set working directory
require("knitr")
?knitr
install.packages("shiny")
a <- 4
a
a * 4
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a
(7.5-3)/(2019-1960)
(7.5-3)/(2019-1960)
45*10^6/0.005
pop_1960 <- 3*10^9
pop_2019 <- 7.5*10^9
diff_year <- 2019-1960
rate <- (pop_2019-pop_1960)/diff_year
area_earth <- 45*10^6
sqM_pers <- 0.005
dead <- area_earth/sqM_pers
x <- rnorm(100)
plot(x)
hej <- rnorm(100)
plot(hej)
x1 <- rnorm(100); x2 <- rnorm(100); x3 <- rnorm(100)
t = data.frame( a = x1,
b = x1+x2,
c = x1+x2+x3)
plot(t$a, type="l", ylim=range(t),
lwd=3, col=rgb(1,0,0,0.3))
lines(t$b, type="s", lwd=2,
col=rgb(0.3,0.4,0.3,0.9))
points(t$c, pch=20, cex=4,
col=rgb(0,0,1,0.3))
# population growth
a <-  60e6
# uncertainty of population
asd <- 10e6
# number of repeats
nrep <- 10
# time in the future to simulate
ntime <- 30
# matrix to collect data
pop <- matrix(NA, # fill with NA
nrow = nrep, # number of rows
ncol = ntime) # number of columns
# initiate population
pop[,1] <- 7.5e9
for (i in 1:nrep)
{
# draw a growth rate from normal distribution
growth <- rnorm(n = 1, mean = a, sd = asd)
for (j in 2:ntime)
{
#  progress population
pop[i,j] <- pop[i,j-1]+growth
}
}
matplot(t(pop),type="l",xlab="time from 2019 [years]",ylab="population of earth")
abline(h=9e9,col=2,lty=2,lwd=2)
legend("topleft","End of the world",col=2,lty=2,lwd=2)
grid()
pop
matplot(t(pop),type="l",xlab="time from 2019 [years]",ylab="population of earth")
view(t(pop))
View(t(pop))
# population growth
a <-  60e6
# uncertainty of population
asd <- 10e6
# number of repeats
nrep <- 10
# time in the future to simulate
ntime <- 30
# matrix to collect data
pop <- matrix(NA, # fill with NA
nrow = nrep, # number of rows
ncol = ntime) # number of columns
# initiate population
pop[,1] <- 7.5e9
for (i in 1:nrep)
{
# draw a growth rate from normal distribution
growth <- rnorm(n = 1, mean = a, sd = asd)
for (j in 2:ntime)
{
#  progress population
pop[i,j] <- pop[i,j-1]+growth
}
}
matplot(t(pop),type="l",xlab="time from 2019 [years]",ylab="population of earth")
abline(h=9e9,col=2,lty=2,lwd=2)
legend("topleft","End of the world",col=2,lty=2,lwd=2)
grid()
?library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
create_plot3 <- function(N,r,...) {
t <- 1:10
Nt <- N*exp(r*t)
plot(t,Nt,...)
}
?library(shiny)
create_plot3(1,1.5)
create_plot3(1,1.5,type = "l")
create_plot3(1,log(1.5),type = "l")
shinyApp(
ui = fluidPage(
sliderInput("slider1",
label = "Intrinsic rate",
min = -0.15,
max = .15,
value = 0.01,
step=0.01),
plotOutput('plot1')
),
server = function(input, output) {
output$plot1 <- renderPlot({
curve(7.5e9*exp(input$slider1*x),
from=0,
to=30,
xlab="time from 2019 [years]",
ylab="population of earth",
lwd=2,col=3)
grid()
abline(h=9e9,col=2,lty=2,lwd=2)
legend("topleft","End of the world",col=2,lty=2,lwd=2)
})
},
options = list(height = 500)
)
library("shiny")
library("shiny")
?ode
?ode
plotNew(log(1.5),1,1)
plotNew <- function(rate,dt,N0){
# allocating memory
N <- 10
n <- rep(NA, N)
n[1] <- N0
for (i in 2:N) {
n[i] <- n[i-1] + rate * n[i-1] * dt
}
plot(1:10,n,...)
}
plotNew(log(1.5),1,1)
plotNew <- function(rate,dt,N0,...){
# allocating memory
N <- 10
n <- rep(NA, N)
n[1] <- N0
for (i in 2:N) {
n[i] <- n[i-1] + rate * n[i-1] * dt
}
plot(1:10,n,...)
}
plotNew(log(1.5),1,1)
plotNew(log(1.5),1,1,type="l")
plotNew(log(1.5),1,1)
plotNew <- function(rate,dt,N0,...){
# allocating memory
N <- 10
n <- rep(NA, N)
n[1] <- N0
for (i in 2:N) {
n[i] <- n[i-1] + rate * n[i-1] * dt
}
plot(1:10,n,type="l",...)
}
plotNew(log(1.5),1,1)
plotNew(log(1.5),9,1)
install.packages("deSolve")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
## Loading data
dat <- read.csv('../DistrictHeatingTestSample.csv', header=TRUE, sep = ";")
head(dat)
## Loading data
dat <- read.csv('../DistrictHeatingTestSample.csv', header=TRUE, sep = "\t")
head(dat)
str(dat)
head(dat$TemperatureIn+1)
dat$TemperatureIn[1]
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
## Loading data
dat <- read.csv('../DistrictHeatingTestSample.csv', header=TRUE, sep = "\t")
head(dat)
str(dat)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
## Loading data
dat <- read.csv('../DistrictHeatingTestSample.csv', header=TRUE, sep = "\t")
head(dat)
str(dat)
## Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
cons <- vector(mode="list", length = n)
for(i in 1:n){
if (i == 5){
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
df.temp$X <- NULL
}
names(df.temp[[i]])[1] = 'StartDateTime'
Datalengths[i] = length(df.temp)
cons[[i]] <- df.temp
}
# Changing time
for (i in 1:n){
cons[[i]]$StartDateTime <- strptime(cons[[i]]$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
cons[[i]]$EndDateTime <- strptime(cons[[i]]$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
## Loading data
dat <- read.csv('../DistrictHeatingTestSample.csv', header=TRUE, sep = "\t")
head(dat)
str(dat)
## Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
cons <- vector(mode="list", length = n)
for(i in 1:n){
if (i == 5){
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
df.temp$X <- NULL
}
names(df.temp)[1] = 'StartDateTime'
Datalengths[i] = length(df.temp)
cons[[i]] <- df.temp
}
# Changing time
for (i in 1:n){
cons[[i]]$StartDateTime <- strptime(cons[[i]]$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
cons[[i]]$EndDateTime <- strptime(cons[[i]]$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
}
cons[[5]]$StartDateTime
cons[[4]]$StartDateTime
is.na(cons[[5]]$StartDateTime)
NAcheck <- c(rep(NA,n))
for (i in 1:n){
NAcheck = sum(is.na(cons[[i]]$StartDateTime) + is.na(cons[[i]]$SEndDateTime))
}
NAcheck
NAcheck <- c(rep(NA,n))
for (i in 1:n){
NAcheck[i] = sum(is.na(cons[[i]]$StartDateTime) + is.na(cons[[i]]$SEndDateTime))
}
NAcheck
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
## Loading data
dat <- read.csv('../DistrictHeatingTestSample.csv', header=TRUE, sep = "\t")
head(dat)
str(dat)
## Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
cons <- vector(mode="list", length = n)
for(i in 1:n){
if (i == 5){
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
}
else
{
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
df.temp$X <- NULL
}
names(df.temp)[1] = 'StartDateTime'
Datalengths[i] = length(df.temp)
cons[[i]] <- df.temp
}
# Changing time
for (i in 1:n){
cons[[i]]$StartDateTime <- strptime(cons[[i]]$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
cons[[i]]$EndDateTime <- strptime(cons[[i]]$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
}
NAcheck <- c(rep(NA,n))
for (i in 1:n){
NAcheck[i] = sum(is.na(cons[[i]]$StartDateTime) + is.na(cons[[i]]$SEndDateTime))
}
NAcheck
sum(c(TRUE, TRUE))
sum(is.na(cons[[1]]$StartDateTime))
(is.na(cons[[1]]$StartDateTime))
(is.na(cons[[5]]$StartDateTime))
sum(is.na(cons[[5]]$StartDateTime))
sum(is.na(cons[[5]]$StartDateTime) + is.na(cons[[5]]$SEndDateTime))
sum(is.na(cons[[5]]$StartDateTime) + sum(is.na(cons[[5]]$SEndDateTime)))
NAcheck <- c(rep(NA,n))
for (i in 1:n){
NAcheck[i] = sum(is.na(cons[[i]]$StartDateTime)) + sum(is.na(cons[[i]]$SEndDateTime)))
}
NAcheck[i] = sum(is.na(cons[[i]]$StartDateTime)) + sum(is.na(cons[[i]]$SEndDateTime))
NAcheck <- c(rep(NA,n))
for (i in 1:n){
NAcheck[i] = sum(is.na(cons[[i]]$StartDateTime)) + sum(is.na(cons[[i]]$SEndDateTime))
}
NAcheck
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
library("data.table")
## Loading data
dat <- read.csv('../DistrictHeatingTestSample.csv', header=TRUE, sep = "\t")
head(dat)
str(dat)
## Loading all data
data.path = "../Watts_DistrictHeatingData_2018/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
cons <- vector(mode="list", length = n)
for(i in 1:n){
if (i == 5){
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep="\t", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(df.temp)[1] = 'StartDateTime'
df.temp$StartDateTime <- strptime(df.temp$StartDateTime, format = "%d/%m/%Y %H:%M:%S", tz = "GMT")
df.temp$EndDateTime <- strptime(df.temp$EndDateTime, format = "%d/%m/%Y %H.%M", tz = "GMT")
}
else
{
df.temp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
df.temp$X <- NULL
names(df.temp)[1] = 'StartDateTime'
df.temp$StartDateTime <- strptime(df.temp$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
df.temp$EndDateTime <- strptime(df.temp$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
}
Datalengths[i] = length(df.temp)
cons[[i]] <- df.temp
}
# Changing time
for (i in 1:n){
cons[[i]]$StartDateTime <- strptime(cons[[i]]$StartDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
cons[[i]]$EndDateTime <- strptime(cons[[i]]$EndDateTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
}
