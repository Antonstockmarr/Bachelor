dat=matrix(NA, nrow=10,ncol=200)
for(i in 1:10){
dat[i,]=arima.sim(model=list(ar=0.9,ma=c(2,0.5)),n=200,sd=0.2)
}
acf(dat[1,])
plot(dat[1,],type="l",col=colors[1],ylim=c(-5,5),main="The 10 simulated ARMA(1,2) models",ylab="Simulation value",xlab="Iteration")
lm=50
for(i in 2:10){
lines(dat[i,],type="l",col=colors[i])
}
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm)
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-0.5,1),type="l",col=colors[1],main="Blah")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-0.5,1),type="l",col=colors[1],main="Autocorrelation funtion for the 10 simulations")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
?acf
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm)
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-0.5,1),type="l",col=colors[1],main="Autocorrelation funtion for the 10 simulations")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
plot(dat[1,],type="l")
pacf(dat[1,])
pacf1<-pacf(dat[1,],plot=FALSE,lag.max = lm)
pacf1$acf[,1,1]
plot(pacf1,xlim=c(.5,lm-.5),ylim=c(-.5,1),type="l",col=1)
for(i in 2:10){
pacftmp<-pacf(dat[i,],plot=FALSE,lag.max = lm)
lines(1:lm,pacftmp$acf[,1,1],col=i)
}
pacf1<-pacf(dat[1,],plot=FALSE,lag.max = lm,main="Partial autocorrelation funtion for the 10 simulations")
pacf1$acf[,1,1]
plot(pacf1,xlim=c(.5,lm-.5),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation funtion for the 10 simulations")
for(i in 2:10){
pacftmp<-pacf(dat[i,],plot=FALSE,lag.max = lm)
lines(1:lm,pacftmp$acf[,1,1],col=i)
}
plot(pacf1,xlim=c(.5,lm-1),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation funtion for the 10 simulations")
plot(pacf1,xlim=c(.5,lm-1.8),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation funtion for the 10 simulations")
plot(pacf1,xlim=c(.5,lm-2),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation funtion for the 10 simulations")
for(i in 2:10){
pacftmp<-pacf(dat[i,],plot=FALSE,lag.max = lm)
lines(1:lm,pacftmp$acf[,1,1],col=i)
}
avars=rep(NA,10)
for(i in 1:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
avars[i]<-acftmp$acf[1,1,1]
}
rm(list=ls())
par(mfrow=c(1,1))
set.seed(0)
colors=rainbow(10)
# Simulate 10 ARMA realisations (arima.sim(1,0,2))
dat=matrix(NA, nrow=10,ncol=200)
for(i in 1:10){
dat[i,]=arima.sim(model=list(ar=0.9,ma=c(2,0.5)),n=200,sd=0.2)
}
acf(dat[1,])
plot(dat[1,],type="l",col=colors[1],ylim=c(-5,5),main="The 10 simulated ARMA(1,2) models",ylab="Simulation value",xlab="Observation")
lm=50
for(i in 2:10){
lines(dat[i,],type="l",col=colors[i])
}
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm)
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-0.5,1),type="l",col=colors[1],main="Autocorrelation function for the 10 simulations")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
plot(dat[1,],type="l")
pacf(dat[1,])
plot(dat[1,],type="l")
pacf(dat[1,])
pacf1<-pacf(dat[1,],plot=FALSE,lag.max = lm)
pacf1$acf[,1,1]
plot(pacf1,xlim=c(.5,lm-2),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation function for the 10 simulations")
for(i in 2:10){
pacftmp<-pacf(dat[i,],plot=FALSE,lag.max = lm)
lines(1:lm,pacftmp$acf[,1,1],col=i)
}
avars=rep(NA,10)
for(i in 1:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
avars[i]<-acftmp$acf[1,1,1]
}
## Analytiske gammaer udregnet i maple.
g=rep(NA,lm+1)
g[1]<-2.412631579
g[2]<-2.309368421
g[3]<-2.098431579
for(i in 4:(lm+1)){
k=i-1
g[i]<-0.9^(k-2)*g[3]
}
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm,type="covariance")
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-1.3,2.5),type="l",col=colors[1])
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
points(0:50,g)
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-1.3,2.5),type="l",col=colors[1],main="Numerical and analytical autocovariance")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
points(0:50,g)
legend(40,2,legend=c("Analytical autocovariance","Numerical autocovariance"),pch=c(1,NA),lty=c(1,NA))
legend(30,2,legend=c("Analytical autocovariance","Numerical autocovariance"),pch=c(1,NA),lty=c(1,NA))
legend(20,2,legend=c("Analytical autocovariance","Numerical autocovariance"),pch=c(1,NA),lty=c(1,NA))
legend(20,2,legend=c("Analytical autocovariance","Numerical autocovariance"),pch=c(1,NA),lty=c(NA,1))
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-1.3,2.5),type="l",col=colors[1],main="Numerical and analytical autocovariance")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
points(0:50,g)
legend(20,2,legend=c("Analytical autocovariance","Numerical autocovariance"),pch=c(1,NA),lty=c(NA,1))
legend(20,2,legend=c("Analytical autocovariance","Numerical autocovariances"),pch=c(1,NA),lty=c(NA,1))
legend(25,2,legend=c("Analytical autocovariance","Numerical autocovariances"),pch=c(1,NA),lty=c(NA,1))
legend(25,2.2,legend=c("Analytical autocovariance","Numerical autocovariances"),pch=c(1,NA),lty=c(NA,1))
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm,type="covariance")
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-1.3,2.5),type="l",col=colors[1],main="Numerical and analytical autocovariance")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
points(0:50,g)
legend(25,2.2,legend=c("Analytical autocovariance","Numerical autocovariances"),pch=c(1,NA),lty=c(NA,1))
plot(c(190,208,213,223,237,214,221,201,191,184,184,189,188,207,221,225),type="o",xlim=c(1,18),ylim=c(184,250),ylab="strøm i guess...")
points(c(17,18),c(232.6,210.65),col=2,pch=19)
points(c(5,6),c(237,214),col=3,pch=19)
points(c(17,17,18,18),c(232.6+c(-1,1)*qnorm(0.975)*7,210.65+c(-1,1)*qnorm(0.975)*sqrt(61.25)),col=2,pch=3)
qnorm(0.975)*7
qnorm(0.975)*sqrt(61.25)
legend(7,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,NA),lty=c(NA,1))
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,NA),lty=c(NA,1))
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,NA,19,3,19),lty=c(NA,1))
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,NA,19,3,19),lty=c(1,1,NA,NA),col=c(1,2,2,3))
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,19,3,19),lty=c(1,NA,NA,NA),col=c(1,2,2,3))
plot(c(190,208,213,223,237,214,221,201,191,184,184,189,188,207,221,225),type="o",xlim=c(1,18),ylim=c(184,250),ylab="strøm i guess...")
points(c(17,18),c(232.6,210.65),col=2,pch=19)
points(c(5,6),c(237,214),col=3,pch=19)
points(c(17,17,18,18),c(232.6+c(-1,1)*qnorm(0.975)*7,210.65+c(-1,1)*qnorm(0.975)*sqrt(61.25)),col=2,pch=3)
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,19,3,19),lty=c(1,NA,NA,NA),col=c(1,2,2,3))
plot(c(190,208,213,223,237,214,221,201,191,184,184,189,188,207,221,225),type="o",xlim=c(1,18),ylim=c(184,250),ylab="combined electricity consumption (GWh)")
points(c(17,18),c(232.6,210.65),col=2,pch=19)
points(c(5,6),c(237,214),col=3,pch=19)
points(c(17,17,18,18),c(232.6+c(-1,1)*qnorm(0.975)*7,210.65+c(-1,1)*qnorm(0.975)*sqrt(61.25)),col=2,pch=3)
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,19,3,19),lty=c(1,NA,NA,NA),col=c(1,2,2,3))
plot(c(190,208,213,223,237,214,221,201,191,184,184,189,188,207,221,225),type="o",xlim=c(1,18),ylim=c(184,250),ylab="combined electricity consumption (GWh)",main="Prediction of seasonal AR model")
points(c(17,18),c(232.6,210.65),col=2,pch=19)
points(c(5,6),c(237,214),col=3,pch=19)
points(c(17,17,18,18),c(232.6+c(-1,1)*qnorm(0.975)*7,210.65+c(-1,1)*qnorm(0.975)*sqrt(61.25)),col=2,pch=3)
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,19,3,19),lty=c(1,NA,NA,NA),col=c(1,2,2,3))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
rm(list=ls())
par(mfrow=c(1,1))
set.seed(0)
colors=rainbow(10)
# Simulate 10 ARMA realisations (arima.sim(1,0,2))
dat=matrix(NA, nrow=10,ncol=200)
for(i in 1:10){
dat[i,]=arima.sim(model=list(ar=0.9,ma=c(2,0.5)),n=200,sd=0.2)
}
acf(dat[1,])
plot(dat[1,],type="l",col=colors[1],ylim=c(-5,5),main="The 10 simulated ARMA(1,2) models",ylab="Simulation value",xlab="Observation")
lm=50
for(i in 2:10){
lines(dat[i,],type="l",col=colors[i])
}
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm)
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-0.5,1),type="l",col=colors[1],main="Autocorrelation function for the 10 simulations")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
##
plot(dat[1,],type="l")
pacf(dat[1,])
pacf1<-pacf(dat[1,],plot=FALSE,lag.max = lm)
pacf1$acf[,1,1]
plot(pacf1,xlim=c(.5,lm-2),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation function for the 10 simulations")
for(i in 2:10){
pacftmp<-pacf(dat[i,],plot=FALSE,lag.max = lm)
lines(1:lm,pacftmp$acf[,1,1],col=i)
}
avars=rep(NA,10)
for(i in 1:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
avars[i]<-acftmp$acf[1,1,1]
}
## Analytiske gammaer udregnet i maple.
g=rep(NA,lm+1)
g[1]<-2.412631579
g[2]<-2.309368421
g[3]<-2.098431579
for(i in 4:(lm+1)){
k=i-1
g[i]<-0.9^(k-2)*g[3]
}
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm,type="covariance")
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-1.3,2.5),type="l",col=colors[1],main="Numerical and analytical autocovariance")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
points(0:50,g)
legend(25,2.2,legend=c("Analytical autocovariance","Numerical autocovariances"),pch=c(1,NA),lty=c(NA,1))
## Q2.2
plot(c(190,208,213,223,237,214,221,201,191,184,184,189,188,207,221,225),type="o",xlim=c(1,18),ylim=c(184,250),ylab="combined electricity consumption (GWh)",main="Prediction of seasonal AR model")
points(c(17,18),c(232.6,210.65),col=2,pch=19)
points(c(5,6),c(237,214),col=3,pch=19)
points(c(17,17,18,18),c(232.6+c(-1,1)*qnorm(0.975)*7,210.65+c(-1,1)*qnorm(0.975)*sqrt(61.25)),col=2,pch=3)
legend(6,245,legend=c("Given Data","Predicted points","Prediction intervals","Last season in regard to predictions"),pch=c(1,19,3,19),lty=c(1,NA,NA,NA),col=c(1,2,2,3))
## Q2.3
#model 1
ARMA<- arima.sim(n=200,list(order=c(1,0,0),ar=-0.85))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(12,0,0),ar=c(rep(0,11),0.8)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (0,0,0)x(1,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(1,0,12),ar=0.8,ma=c(rep(0,11),0.7)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(0,0,1) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(13,0,0),ar=c(0.7,rep(0,10),-0.8,0.56)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (1,0,0)x(1,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
#model 5
ARMA<- arima.sim(n=200,list(order=c(14,0,0),ar=c(-0.6,-0.6,rep(0,9),-0.8,-0.48,-0.48)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (2,0,0)x(1,0,0) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
ARMA<- arima.sim(n=200,list(order=c(0,0,13),ma=c(-0.7,rep(0,10),0.8,-0.56)))
layout(matrix(c(1,1,2,3),2,2,byrow=TRUE),widths=c(1,1),heights = c(1,1))
plot(ARMA,type="l",col=1,ylim=c(-6,6),ylab="Process values",xlab="Time",main="Plot of a (0,0,1)x(0,0,1) seasonal model, with S=12")
par(mar=c(5,4,2,2)+0.1)
acf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
pacf(ARMA,main="",lag.max=50,panel.first=c(abline(v=(1:4)*12,col=2,lty=2)))
rm(list=ls())
par(mfrow=c(1,1))
set.seed(0)
colors=rainbow(10)
# Simulate 10 ARMA realisations (arima.sim(1,0,2))
dat=matrix(NA, nrow=10,ncol=200)
for(i in 1:10){
dat[i,]=arima.sim(model=list(ar=0.9,ma=c(2,0.5)),n=200,sd=0.2)
}
acf(dat[1,])
plot(dat[1,],type="l",col=colors[1],ylim=c(-5,5),main="The 10 simulated ARMA(1,2) models",ylab="Simulation value",xlab="Observation")
lm=50
for(i in 2:10){
lines(dat[i,],type="l",col=colors[i])
}
acf1<-acf(dat[1,],plot=FALSE,lag.max = lm)
acf1$acf[,1,1]
plot(acf1,xlim=c(-.5,lm-2),ylim=c(-0.5,1),type="l",col=colors[1],main="Autocorrelation function for the 10 simulations")
for(i in 2:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm)
lines(0:lm,acftmp$acf[,1,1],col=colors[i])
}
##
plot(dat[1,],type="l")
pacf(dat[1,])
pacf1<-pacf(dat[1,],plot=FALSE,lag.max = lm)
pacf1$acf[,1,1]
plot(pacf1,xlim=c(.5,lm-2),ylim=c(-.5,1),type="l",col=1,main="Partial autocorrelation function for the 10 simulations")
for(i in 2:10){
pacftmp<-pacf(dat[i,],plot=FALSE,lag.max = lm)
lines(1:lm,pacftmp$acf[,1,1],col=i)
}
avars=rep(NA,10)
for(i in 1:10){
acftmp<-acf(dat[i,],plot=FALSE,lag.max = lm,type="covariance")
avars[i]<-acftmp$acf[1,1,1]
}
avars
acf(log(tab$NO2[train]),lag.max = 200)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("stepP.R")
source("BSplines.R")
library(foreach)
library(doParallel)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
}
lmMultiple <- vector(mode="list", length = n)
for (i in 1:n) {
print(paste('Modelling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
lmMultiple[[i]] <- stepP(lm(Consumption ~ Temperature*I(WindSpeed*Splinebasis)+(.-UltravioletIndex-WindSpeed)^2, data = model.tmp))
}
#
summary(lmMultiple[[60]]$object)
par(mfrow=c(2,2))
for (i in 1:n)
{
plot(lmMultiple[[i]]$object)
}
#
# plot(Consumption~Temperature,data=model.tmp)
# lines(lmMultiple$object)
# #
# # plot(lmMultiple[[1]])
# par(mfrow = c(2,2))
# plot(lm.multiple)
#
# plot(lmMultiple[[1]])
c <- makeCluster(cores[1]-1)
registerDoParallel(c)
lmMultiple <- foreach(i=1:n) %dopar% {
print(paste('Modelling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
MultiModel <- stepP(lm(Consumption ~ Temperature*WindSpeed*Splinebasis+(.-UltravioletIndex)^2, data = model.tmp))
MultiModel
}
install.packages("doParallel")
install.packages("foreach")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("stepP.R")
source("BSplines.R")
library(foreach)
library(doParallel)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
}
lmMultiple <- vector(mode="list", length = n)
for (i in 1:n) {
print(paste('Modelling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
lmMultiple[[i]] <- stepP(lm(Consumption ~ Temperature*I(WindSpeed*Splinebasis)+(.-UltravioletIndex-WindSpeed)^2, data = model.tmp))
}
install.packages("pbs")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("stepP.R")
source("BSplines.R")
library(foreach)
library(doParallel)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
}
lmMultiple <- vector(mode="list", length = n)
for (i in 1:n) {
print(paste('Modelling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
lmMultiple[[i]] <- stepP(lm(Consumption ~ Temperature*I(WindSpeed*Splinebasis)+(.-UltravioletIndex-WindSpeed)^2, data = model.tmp))
}
version
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
