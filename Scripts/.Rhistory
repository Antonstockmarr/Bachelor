par(mfrow = c(1,1))
for (i in 1) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(N + E + S + W)+
Radiation, data = model.Wind)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
#wd2 <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
plot(model.tmp$WindDirection,Splinebasis[,1]*lmSummary_est[i,'W1']+Splinebasis[,2]*lmSummary_est[i,'W2']
+Splinebasis[,3]*lmSummary_est[i,'W3']+Splinebasis[,4]*lmSummary_est[i,'W4'],ylab='Dependency',xlab='Wind Direction',col=Wcol[2],
main= i)
abline(h=0)
BSplin <- matrix(data=Splinebasis %*% diag(lmSummary_est[i,c('W1','W2','W3','W4')]),ncol=4)
Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
Spline <- (BSplin)%*%Knot
plot(Spline[,1],Spline[,2],col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
abline(h=0,v=0)
}
Splinebasis <- BSplines(1:360)
newData = data.frame(Temperature = rep(0, 360),
SolarRadiation = rep(30, 360),
N = Splinebasis[,3],
E = Splinebasis[,3],
S = Splinebasis[,3],
W = Splinebasis[,3])
f<-data.frame(predict(object=lmMultipleNoP[[1]], newdata=newData, interval = "confidence", level = 0.95))
predict(object=lmMultipleNoP[[1]], newdata=newData , se.fit = TRUE,interval = "confidence")
newData = data.frame(Temperature = rep(0, 360),
Radiation = rep(30, 360),
N = Splinebasis[,3],
E = Splinebasis[,3],
S = Splinebasis[,3],
W = Splinebasis[,3])
f<-data.frame(predict(object=lmMultipleNoP[[1]], newdata=newData, interval = "confidence", level = 0.95))
plot(f$fit[,1],type='l')
length(f$fit)
plot(f$fit,type='l')
lines(model.tmp$WindDirection,f$upr)
lines(f$upr)
lines(f$lwr)
plot(f$fit,type='l',xlim=c(0,NA))
plot(f$fit,type='l',xlim=c(0,3))
plot(f$fit,type='l',ylim=c(0,3))
lines(f$upr)
lines(f$lwr)
compassPlot(P_Updated)
plot(f$fit,type='l',ylim=range(0,f$fit))
lines(f$upr)
lines(f$lwr)
plot(f$fit,type='l',ylim=range(0,f$upr))
lines(f$upr,lty=2)
lines(f$lwr,lty=2)
plot(f$fit,type='l',ylim=range(f$lwr,f$upr))
lines(f$upr,lty=2)
lines(f$lwr,lty=2)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(N + E + S + W)+
Radiation, data = model.Wind)
Splinebasis2 <- BSplines(1:360)
newData = data.frame(Temperature = rep(0, 360),
Radiation = rep(30, 360),
N = Splinebasis2[,3],
E = Splinebasis2[,3],
S = Splinebasis2[,3],
W = Splinebasis2[,3])
Wind.Pred[[i]]<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Wind.Pred[[i]]$fit,type='l',ylim=range(Wind.Pred[[i]]$lwr,Wind.Pred[[i]]$upr),main=paste("hus: ",i))
lines(Wind.Pred[[i]]$upr,lty=2)
lines(Wind.Pred[[i]]$lwr,lty=2)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
# #wd2 <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
# plot(model.tmp$WindDirection,Splinebasis[,1]*lmSummary_est[i,'W1']+Splinebasis[,2]*lmSummary_est[i,'W2']
#      +Splinebasis[,3]*lmSummary_est[i,'W3']+Splinebasis[,4]*lmSummary_est[i,'W4'],ylab='Dependency',xlab='Wind Direction',col=Wcol[2],
#      main= i)
# abline(h=0)
#
# BSplin <- matrix(data=Splinebasis %*% diag(lmSummary_est[i,c('W1','W2','W3','W4')]),ncol=4)
# Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
# Spline <- (BSplin)%*%Knot
# plot(Spline[,1],Spline[,2],col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
# abline(h=0,v=0)
#
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
if(!exists("n")){
source("data.R")
}
if(FALSE){
Summer<-c(as.POSIXct(as.Date('2018-05-15'),format = "%Y-%m-%d", tz = "GMT"),as.POSIXct(as.Date('2018-09-15'),format = "%Y-%m-%d", tz = "GMT"))
tmp<-data[[1]][data[[1]]$ObsTime>Summer[1],]
tmp<-tmp[tmp$ObsTime<Summer[2],]
tmpc<-tmp$Volume*tmp$CoolingDegree
hour(tmp$ObsTime)
plot(hour(tmp$ObsTime),tmpc)#,type='l')
}
source("stepP.R")
source("BSplines.R")
source("CircleCol.R")
# Defining new data set where the summer period is left out
model.data <- weatherCons
# Various attributes are removed
for (i in 1:n)
{
model.data[[i]]$Date <- NULL
model.data[[i]]$PrecipitationProbability <- NULL
model.data[[i]]$SunHour <- NULL
model.data[[i]]$UltravioletIndex <- NULL
}
# Full regression model ---------------------------------------------------
lmMultiple <- vector(mode="list", length = n)
lmMultipleNoP <- vector(mode = "list", length = n)
Wind.Pred <- vector(mode = "list", length = n)
lmSummary_est <- matrix(rep(0,11*n),nrow = n)
lmSummary_p <- matrix(rep(0,11*n),nrow = n)
colnames(lmSummary_est) <- c("I","T","W1","W2","W3","W4","SolaR","T:W1","T:W2","T:W3","T:W4")
colnames(lmSummary_p) <- c("I","T","W1","W2","W3","W4","SolaR","T:W1","T:W2","T:W3","T:W4")
par(mfrow = c(1,1))
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(N + E + S + W)+
Radiation, data = model.Wind)
Splinebasis2 <- BSplines(1:360)
newData = data.frame(Temperature = rep(0, 360),
Radiation = rep(30, 360),
N = Splinebasis2[,3],
E = Splinebasis2[,3],
S = Splinebasis2[,3],
W = Splinebasis2[,3])
Wind.Pred[[i]]<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Wind.Pred[[i]]$fit,type='l',ylim=range(Wind.Pred[[i]]$lwr,Wind.Pred[[i]]$upr),main=paste("hus: ",i))
lines(Wind.Pred[[i]]$upr,lty=2)
lines(Wind.Pred[[i]]$lwr,lty=2)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
# #wd2 <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
# plot(model.tmp$WindDirection,Splinebasis[,1]*lmSummary_est[i,'W1']+Splinebasis[,2]*lmSummary_est[i,'W2']
#      +Splinebasis[,3]*lmSummary_est[i,'W3']+Splinebasis[,4]*lmSummary_est[i,'W4'],ylab='Dependency',xlab='Wind Direction',col=Wcol[2],
#      main= i)
# abline(h=0)
#
# BSplin <- matrix(data=Splinebasis %*% diag(lmSummary_est[i,c('W1','W2','W3','W4')]),ncol=4)
# Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
# Spline <- (BSplin)%*%Knot
# plot(Spline[,1],Spline[,2],col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
# abline(h=0,v=0)
#
}
Splinebasis2 <- BSplines(1:360)
WindProfile = function(model, Windspeed, Temperature, SolarRadidation){
wd = c(1:360)
wd2 = wd
wd2[wd2 < 45] <- wd[wd < 45] + 360
WD.splines = pbs(wd2, df = NULL, knots = c(135, 225, 315),  degree = 2, intercept = T,
periodic = TRUE, Boundary.knots = c(45, 405))
W1 = WD.splines[,1]
W2 = WD.splines[,2]
W3 = WD.splines[,3]
W4 = WD.splines[,4]
newData = data.frame(Temperature = rep(Temperature, 360),
SolarRadiation = rep(SolarRadidation, 360),
W1 = W1*Windspeed,
W2 = W2*Windspeed,
W3 = W3*Windspeed,
W4 = W4*Windspeed)
Pred = data.frame(predict(object=model, newdata=newData, interval = "confidence", level = 0.95))
# remove the effect of all pareameter but W1, W2, W3, W4
P_Updated = Pred
# P_Updated = P_Updated - summary(model)$coefficient[1]
# P_Updated = P_Updated - summary(model)$coefficient[2] * newData$Temperature
# P_Updated = P_Updated - summary(model)$coefficient[3] * newData$SolarRadiation
# P_Updated = P_Updated - summary(model)$coefficient[8] * newData$Temperature * newData$W1
# P_Updated = P_Updated - summary(model)$coefficient[9] * newData$Temperature * newData$W2
# P_Updated = P_Updated - summary(model)$coefficient[10]* newData$Temperature * newData$W3
# P_Updated = P_Updated - summary(model)$coefficient[11]* newData$Temperature * newData$W4
P_Updated = P_Updated - mean(P_Updated$fit)
plot(wd, P_Updated$fit, type = "l", ylim = range(0,P_Updated), xlim=c(0,360),
main = paste("windspeed:", Windspeed, ", ", "Temperature:",Temperature, sep="" ))
lines(wd, P_Updated$lwr, lty = 2)
lines(wd, P_Updated$upr, lty = 2)
abline(v= c(90, 180, 270), lty = 3)
abline(h = 0)
P1 = recordPlot()
compassPlot(P_Updated)
P2 = recordPlot()
return(list(P1, P2))
}
WindProfile(lmMultipleNoP[[1]],1,0,30)
Q
WindProfile(lmMultipleNoP[[1]],1,0,30)
WindProfile = function(model, Windspeed, Temperature, SolarRadidation){
wd = c(1:360)
wd2 = wd
wd2[wd2 < 45] <- wd[wd < 45] + 360
WD.splines = pbs(wd2, df = NULL, knots = c(135, 225, 315),  degree = 2, intercept = T,
periodic = TRUE, Boundary.knots = c(45, 405))
W1 = WD.splines[,1]
W2 = WD.splines[,2]
W3 = WD.splines[,3]
W4 = WD.splines[,4]
newData = data.frame(Temperature = rep(Temperature, 360),
SolarRadiation = rep(SolarRadidation, 360),
W1 = W1*Windspeed,
W2 = W2*Windspeed,
W3 = W3*Windspeed,
W4 = W4*Windspeed)
Pred = data.frame(predict(object=model, newdata=newData, interval = "confidence", level = 0.95))
# remove the effect of all pareameter but W1, W2, W3, W4
P_Updated = Pred
# P_Updated = P_Updated - summary(model)$coefficient[1]
# P_Updated = P_Updated - summary(model)$coefficient[2] * newData$Temperature
# P_Updated = P_Updated - summary(model)$coefficient[3] * newData$SolarRadiation
# P_Updated = P_Updated - summary(model)$coefficient[8] * newData$Temperature * newData$W1
# P_Updated = P_Updated - summary(model)$coefficient[9] * newData$Temperature * newData$W2
# P_Updated = P_Updated - summary(model)$coefficient[10]* newData$Temperature * newData$W3
# P_Updated = P_Updated - summary(model)$coefficient[11]* newData$Temperature * newData$W4
P_Updated = P_Updated - mean(P_Updated$fit)
plot(wd, P_Updated$fit, type = "l", ylim = range(0,P_Updated), xlim=c(0,360),
main = paste("windspeed:", Windspeed, ", ", "Temperature:",Temperature, sep="" ))
lines(wd, P_Updated$lwr, lty = 2)
lines(wd, P_Updated$upr, lty = 2)
abline(v= c(90, 180, 270), lty = 3)
abline(h = 0)
P1 = recordPlot()
#
#
#
# compassPlot(P_Updated)
# P2 = recordPlot()
#
return(P1)
}
returnChangeAngles = function(angles){
changeAngels = angles[  c( which(diff(angles)>1),  1+which(diff(angles)>1) ) ]
changeAngels = sort(changeAngels)
if( 1 %in% angles ){
changeAngels = c(0, changeAngels)
}
if( 360 %in% angles ){
changeAngels = c(changeAngels, 360)
}
if( length(changeAngels) == 0 ){
changeAngels = c(min(angles)-1, max(angles)+1)
}else if( !(1 %in% angles) && !(360 %in% angles)){
changeAngels = c(min(angles-1), changeAngels+rep(c(1,-1), length(changeAngels)/2), max(angles+1))
}
## For debugging make sure the length is an even number
if( length(changeAngels) %% 2 != 0){
print("length not an even number")
return(-1)
}
return(changeAngels)
}
WindProfile(lmMultipleNoP[[1]],1,0,30)
WindProfile = function(model, Windspeed, Temperature, SolarRadidation){
wd = c(1:360)
wd2 = wd
wd2[wd2 < 45] <- wd[wd < 45] + 360
WD.splines = pbs(wd2, df = NULL, knots = c(135, 225, 315),  degree = 2, intercept = T,
periodic = TRUE, Boundary.knots = c(45, 405))
W1 = WD.splines[,1]
W2 = WD.splines[,2]
W3 = WD.splines[,3]
W4 = WD.splines[,4]
newData = data.frame(Temperature = rep(Temperature, 360),
SolarRadiation = rep(SolarRadidation, 360),
N = W1*Windspeed,
E = W2*Windspeed,
S = W3*Windspeed,
W = W4*Windspeed)
Pred = data.frame(predict(object=model, newdata=newData, interval = "confidence", level = 0.95))
# remove the effect of all pareameter but W1, W2, W3, W4
P_Updated = Pred
# P_Updated = P_Updated - summary(model)$coefficient[1]
# P_Updated = P_Updated - summary(model)$coefficient[2] * newData$Temperature
# P_Updated = P_Updated - summary(model)$coefficient[3] * newData$SolarRadiation
# P_Updated = P_Updated - summary(model)$coefficient[8] * newData$Temperature * newData$W1
# P_Updated = P_Updated - summary(model)$coefficient[9] * newData$Temperature * newData$W2
# P_Updated = P_Updated - summary(model)$coefficient[10]* newData$Temperature * newData$W3
# P_Updated = P_Updated - summary(model)$coefficient[11]* newData$Temperature * newData$W4
P_Updated = P_Updated - mean(P_Updated$fit)
plot(wd, P_Updated$fit, type = "l", ylim = range(0,P_Updated), xlim=c(0,360),
main = paste("windspeed:", Windspeed, ", ", "Temperature:",Temperature, sep="" ))
lines(wd, P_Updated$lwr, lty = 2)
lines(wd, P_Updated$upr, lty = 2)
abline(v= c(90, 180, 270), lty = 3)
abline(h = 0)
P1 = recordPlot()
#
#
#
# compassPlot(P_Updated)
# P2 = recordPlot()
#
return(P1)
}
WindProfile(lmMultipleNoP[[1]],1,0,30)
WindProfile = function(model, Windspeed, Temperature, SolarRadidation){
wd = c(1:360)
wd2 = wd
wd2[wd2 < 45] <- wd[wd < 45] + 360
WD.splines = pbs(wd2, df = NULL, knots = c(135, 225, 315),  degree = 2, intercept = T,
periodic = TRUE, Boundary.knots = c(45, 405))
W1 = WD.splines[,1]
W2 = WD.splines[,2]
W3 = WD.splines[,3]
W4 = WD.splines[,4]
newData = data.frame(Temperature = rep(Temperature, 360),
SolarRadiation = rep(SolarRadidation, 360),
W1 = W1*Windspeed,
W2 = W2*Windspeed,
W3 = W3*Windspeed,
W4 = W4*Windspeed)
Pred = data.frame(predict(object=model, newdata=newData, interval = "confidence", level = 0.95))
# remove the effect of all pareameter but W1, W2, W3, W4
P_Updated = Pred
# P_Updated = P_Updated - summary(model)$coefficient[1]
# P_Updated = P_Updated - summary(model)$coefficient[2] * newData$Temperature
# P_Updated = P_Updated - summary(model)$coefficient[3] * newData$SolarRadiation
# P_Updated = P_Updated - summary(model)$coefficient[8] * newData$Temperature * newData$W1
# P_Updated = P_Updated - summary(model)$coefficient[9] * newData$Temperature * newData$W2
# P_Updated = P_Updated - summary(model)$coefficient[10]* newData$Temperature * newData$W3
# P_Updated = P_Updated - summary(model)$coefficient[11]* newData$Temperature * newData$W4
P_Updated = P_Updated - mean(P_Updated$fit)
plot(wd, P_Updated$fit, type = "l", ylim = range(0,P_Updated), xlim=c(0,360),
main = paste("windspeed:", Windspeed, ", ", "Temperature:",Temperature, sep="" ))
lines(wd, P_Updated$lwr, lty = 2)
lines(wd, P_Updated$upr, lty = 2)
abline(v= c(90, 180, 270), lty = 3)
abline(h = 0)
P1 = recordPlot()
#
#
#
# compassPlot(P_Updated)
# P2 = recordPlot()
#
return(P1)
}
WindProfile = function(model, Windspeed, Temperature, SolarRadidation){
wd = c(1:360)
wd2 = wd
wd2[wd2 < 45] <- wd[wd < 45] + 360
WD.splines = pbs(wd2, df = NULL, knots = c(135, 225, 315),  degree = 2, intercept = T,
periodic = TRUE, Boundary.knots = c(45, 405))
W1 = WD.splines[,1]
W2 = WD.splines[,2]
W3 = WD.splines[,3]
W4 = WD.splines[,4]
newData = data.frame(Temperature = rep(Temperature, 360),
SolarRadiation = rep(SolarRadidation, 360),
W1 = W1*Windspeed,
W2 = W2*Windspeed,
W3 = W3*Windspeed,
W4 = W4*Windspeed)
Pred = data.frame(predict(object=model, newdata=newData, interval = "confidence", level = 0.95))
# remove the effect of all pareameter but W1, W2, W3, W4
P_Updated = Pred
# P_Updated = P_Updated - summary(model)$coefficient[1]
# P_Updated = P_Updated - summary(model)$coefficient[2] * newData$Temperature
# P_Updated = P_Updated - summary(model)$coefficient[3] * newData$SolarRadiation
# P_Updated = P_Updated - summary(model)$coefficient[8] * newData$Temperature * newData$W1
# P_Updated = P_Updated - summary(model)$coefficient[9] * newData$Temperature * newData$W2
# P_Updated = P_Updated - summary(model)$coefficient[10]* newData$Temperature * newData$W3
# P_Updated = P_Updated - summary(model)$coefficient[11]* newData$Temperature * newData$W4
P_Updated = P_Updated - mean(P_Updated$fit)
plot(wd, P_Updated$fit, type = "l", ylim = range(0,P_Updated), xlim=c(0,360),
main = paste("windspeed:", Windspeed, ", ", "Temperature:",Temperature, sep="" ))
lines(wd, P_Updated$lwr, lty = 2)
lines(wd, P_Updated$upr, lty = 2)
abline(v= c(90, 180, 270), lty = 3)
abline(h = 0)
P1 = recordPlot()
#
#
#
# compassPlot(P_Updated)
# P2 = recordPlot()
#
return(P1)
}
WindProfile(lmMultipleNoP[[1]],1,0,30)
WindProfile(lmMultipleNoP[[1]],1,0,30)
summary(lmMultipleNoP[[1]])
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,W1=model.tmp$North,W2=model.tmp$East,W3=model.tmp$South,W4=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(N + E + S + W)+
Radiation, data = model.Wind)
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(W1 + W2 + W3 + W4)+
Radiation, data = model.Wind)
WindProfile(lmMultipleNoP[[1]],1,0,30)
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
newData = data.frame(Temperature = rep(0, 360),
Radiation = rep(30, 360),
N = Splinebasis2[,3],
E = Splinebasis2[,3],
S = Splinebasis2[,3],
W = Splinebasis2[,3])
q
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ Temperature*(N + E + S + W)+
Radiation, data = model.Wind)
Splinebasis2 <- BSplines(1:360)
newData = data.frame(Temperature = rep(0, 360),
Radiation = rep(30, 360),
N = Splinebasis2[,3],
E = Splinebasis2[,3],
S = Splinebasis2[,3],
W = Splinebasis2[,3])
WindProfile(lmMultipleNoP[[1]],1,0,30)
lmMultipleNoP[[i]] <- lm(Consumption ~ .+Temperature*(N + E + S + W),data = model.Wind)
Splinebasis2 <- BSplines(1:360)
head(lmMultipleNoP[[i]])
lmMultipleNoP[[i]]
Summary(lmMultipleNoP[[i]])
summary(lmMultipleNoP[[i]])
head(model.Wind)
newData = data.frame(Temperature = rep(0, 360),
Radiation = rep(30, 360),
N = Splinebasis2[,3],
E = Splinebasis2[,4],
S = Splinebasis2[,1],
W = Splinebasis2[,2])
Wind.Pred[[i]]<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Wind.Pred[[i]]$fit,type='l',ylim=range(Wind.Pred[[i]]$lwr,Wind.Pred[[i]]$upr),main=paste("hus: ",i))
lines(Wind.Pred[[i]]$upr,lty=2)
lines(Wind.Pred[[i]]$lwr,lty=2)
for (i in 1:n) {
print(paste('Modeling house ',i))
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
Splinebasis <- BSplines(model.tmp$WindDirection)
#  wd <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
#  wd[wd<45] <- wd[wd<45]+360
tmp.wind <- Splinebasis*model.tmp$WindSpeed#[order(wd)]
#  tmp.wind <- model.tmp$WindSpeed[order(model.tmp$WindDirection)]
model.tmp$North <- tmp.wind[,3]
model.tmp$East <- tmp.wind[,4]
model.tmp$South <- tmp.wind[,1]
model.tmp$West <- tmp.wind[,2]
model.Wind<-data.frame(Consumption=model.tmp$Consumption,Temperature=model.tmp$Temperature,Radiation=model.tmp$Radiation,N=model.tmp$North,E=model.tmp$East,S=model.tmp$South,W=model.tmp$West)
lmMultipleNoP[[i]] <- lm(Consumption ~ .+Temperature*(N + E + S + W),data = model.Wind)
summary(lmMultipleNoP[[i]])
head(model.Wind)
Splinebasis2 <- BSplines(1:360)
newData = data.frame(Temperature = rep(0, 360),
Radiation = rep(30, 360),
N = Splinebasis2[,3],
E = Splinebasis2[,4],
S = Splinebasis2[,1],
W = Splinebasis2[,2])
Wind.Pred[[i]]<-data.frame(predict(object=lmMultipleNoP[[i]], newdata=newData, interval = "confidence", level = 0.95))
plot(Wind.Pred[[i]]$fit,type='l',ylim=range(Wind.Pred[[i]]$lwr,Wind.Pred[[i]]$upr),main=paste("hus: ",i))
lines(Wind.Pred[[i]]$upr,lty=2)
lines(Wind.Pred[[i]]$lwr,lty=2)
lmMultiple[[i]] <- stepP(lmMultipleNoP[[i]])
lmSummary_est[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,1]
lmSummary_p[i,] <- summary(lmMultipleNoP[[i]])$coefficients[,4]
# #wd2 <- model.tmp$WindDirection[order(model.tmp$WindDirection)]
# plot(model.tmp$WindDirection,Splinebasis[,1]*lmSummary_est[i,'W1']+Splinebasis[,2]*lmSummary_est[i,'W2']
#      +Splinebasis[,3]*lmSummary_est[i,'W3']+Splinebasis[,4]*lmSummary_est[i,'W4'],ylab='Dependency',xlab='Wind Direction',col=Wcol[2],
#      main= i)
# abline(h=0)
#
# BSplin <- matrix(data=Splinebasis %*% diag(lmSummary_est[i,c('W1','W2','W3','W4')]),ncol=4)
# Knot <- matrix(c(0,1,1,0,0,-1,-1,0),nrow=4,byrow=T)
# Spline <- (BSplin)%*%Knot
# plot(Spline[,1],Spline[,2],col=CircleCol(Splinebasis,lmMultiple[[i]]$object),main = paste('Dependency on the wind direction for house ',i),xlab='West - East',ylab='South - North')
# abline(h=0,v=0)
#
}
length(n)
?as.matrix
