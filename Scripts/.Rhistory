Nonp <- c(beta = 1, gamma = 1)
NonErica_sol <- as.data.frame(ode(y = y, times = seq(0,150,1), func = NonErica_model, parms = Nonp))
plot(s ~ time, data = NonErica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af ikke-dimensionelle model")
lines(i ~ time, data = NonErica_sol, type = "l", col = 2)
lines(r ~ time, data = NonErica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
# Den ikke-dimensionelle model
NonErica_model <- function(t, y, p) {
with(as.list(c(y,p)), {
dsdtau <- -s*i
didtau <- s*i-i
drdtau <- i
dydt <- c(dsdtau, didtau, drdtau)
return(list(dydt))
})
}
Nony <- c(s = S0, i = 1, r = 0)
Nonp <- c(beta = 1, gamma = 1)
NonErica_sol <- as.data.frame(ode(y = Nony, times = seq(0,150,1), func = NonErica_model, parms = Nonp))
plot(s ~ time, data = NonErica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af ikke-dimensionelle model")
lines(i ~ time, data = NonErica_sol, type = "l", col = 2)
lines(r ~ time, data = NonErica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
# Den ikke-dimensionelle model
NonErica_model <- function(t, y, p) {
with(as.list(c(y,p)), {
dsdtau <- -s*i
didtau <- s*i-i
drdtau <- i
dydt <- c(dsdtau, didtau, drdtau)
return(list(dydt))
})
}
TBar = 1/gamma_Erica
tau = 150/TBar
SBar = gamma_Erica/beta_Erica
Nony <- c(s = S0/SBar, i = 1/SBar, r = 0)
Nonp <- c(beta = 1, gamma = 1)
NonErica_sol <- as.data.frame(ode(y = Nony, times = seq(0,150,1), func = NonErica_model, parms = Nonp))
plot(s ~ time, data = NonErica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af ikke-dimensionelle model")
lines(i ~ time, data = NonErica_sol, type = "l", col = 2)
lines(r ~ time, data = NonErica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
# Den ikke-dimensionelle model
NonErica_model <- function(t, y, p) {
with(as.list(c(y,p)), {
dsdtau <- -s*i
didtau <- s*i-i
drdtau <- i
dydt <- c(dsdtau, didtau, drdtau)
return(list(dydt))
})
}
TBar = 1/gamma_Erica
tau = 150/TBar
SBar = gamma_Erica/beta_Erica
Nony <- c(s = S0/SBar, i = 1/SBar, r = 0)
NonErica_sol <- as.data.frame(ode(y = Nony, times = seq(0,150,1), func = NonErica_model, parms = NULL))
plot(s ~ time, data = NonErica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af ikke-dimensionelle model")
lines(i ~ time, data = NonErica_sol, type = "l", col = 2)
lines(r ~ time, data = NonErica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
# Den ikke-dimensionelle model
NonErica_model <- function(t, y, p) {
with(as.list(c(y,p)), {
dsdtau <- -s*i
didtau <- s*i-i
drdtau <- i
dydt <- c(dsdtau, didtau, drdtau)
return(list(dydt))
})
}
TBar = 1/gamma_Erica
tau = 150/TBar
SBar = gamma_Erica/beta_Erica
Nony <- c(s = S0/SBar, i = 1/SBar, r = 0)
NonErica_sol <- as.data.frame(ode(y = Nony, times = seq(0,tau,1/TBar), func = NonErica_model, parms = NULL))
plot(s ~ time, data = NonErica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af ikke-dimensionelle model")
lines(i ~ time, data = NonErica_sol, type = "l", col = 2)
lines(r ~ time, data = NonErica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
# Den ikke-dimensionelle model
NonErica_model <- function(t, y, p) {
with(as.list(c(y,p)), {
dsdtau <- -s*i
didtau <- s*i-i
drdtau <- i
dydt <- c(dsdtau, didtau, drdtau)
return(list(dydt))
})
}
TBar = 1/gamma_Erica
tau = 150/TBar
SBar = gamma_Erica/beta_Erica
Nony <- c(s = S0/SBar, i = 1/SBar, r = 0)
NonErica_sol <- as.data.frame(ode(y = Nony, times = seq(0,tau,1/TBar), func = NonErica_model, parms = NULL))
plot(s*SBar ~ time, data = NonErica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af ikke-dimensionelle model")
lines(i*Sbar ~ time, data = NonErica_sol, type = "l", col = 2)
lines(r*Sbar ~ time, data = NonErica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
# Den ikke-dimensionelle model
NonErica_model <- function(t, y, p) {
with(as.list(c(y,p)), {
dsdtau <- -s*i
didtau <- s*i-i
drdtau <- i
dydt <- c(dsdtau, didtau, drdtau)
return(list(dydt))
})
}
TBar = 1/gamma_Erica
tau = 150/TBar
SBar = gamma_Erica/beta_Erica
Nony <- c(s = S0/SBar, i = 1/SBar, r = 0)
NonErica_sol <- as.data.frame(ode(y = Nony, times = seq(0,tau,1/TBar), func = NonErica_model, parms = NULL))
plot(s*SBar ~ time, data = NonErica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af ikke-dimensionelle model")
lines(i*SBar ~ time, data = NonErica_sol, type = "l", col = 2)
lines(r*SBar ~ time, data = NonErica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
which.max(NonErica_sol$i)
NonErica_sol[73,]
NonErica_sol[73,3]*SBar
sum(Erica_sol[150,3:4])
sum/S0
sum <- sum(Erica_sol[150,3:4])
sum/S0
sum1/sum(Erica_sol[150,2:4])
sum1 <- sum(Erica_sol[150,3:4])
sum1/sum(Erica_sol[150,2:4])
sum1/sum(Erica_sol[150,2:4])*100
Erica_sol <- ode(y = y, times = seq(0,160,1), func = Erica_model, parms = p)
tail(Erica_sol)
tail(Erica_sol)
End_epi <- min(Erica_sol$I < 1)
End_epi <- min(Erica_sol$I < 1)
End_epi <- which.min(Erica_sol$I < 1))
End_epi <- which.min(Erica_sol$I < 1)
End_epi <- min(which(Erica_sol$I < 1))
# Den dimensionelle model
Erica_model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -beta*S*I
dIdt <- beta*S*I-gamma*I
dRdt <- gamma*I
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = S0, I = 1, R = 0)
p <- c(beta = beta_Erica, gamma = gamma_Erica)
Erica_sol <- ode(y = y, times = seq(0,160,1), func = Erica_model, parms = p)
Erica_sol <- as.data.frame(Erica_sol)
plot(S ~ time, data = Erica_sol, type = "l", col = 1, ylim = c(0,8000), main = "Numerisk loesning ved brug af dimensionelle model")
lines(I ~ time, data = Erica_sol, type = "l", col = 2)
lines(R ~ time, data = Erica_sol, type = "l", col = 3)
legend(x = "topright", legend = c("S", "I", "R"), col = c(1,2,3), lty = 1, cex = 0.85)
tail(Erica_sol)
End_epi <- min(which(Erica_sol$I < 1))
End_epi
min(which(Erica_sol$I < 1))
S0 - N
N <- 6401
S0 - N
imax/smax
imax <- 812
smax <- 1100
imax/smax
?predict
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/Consumption-plots.R', echo=TRUE)
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/Consumption-plots.R', echo=TRUE)
model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt <- gamma*I - delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta = beta, gamma = gamma)
sol <- ode(y = y, times = seq(0,370,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(S ~ time, data = sol, type = "l", col = 1, main = "Numerisk loesning ved brug af dimensionelle model")
require(deSolve)
model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -(beta0*(1+beta1*cos(2*pi*t/period)))*S*I+delta*R
dIdt <- (beta0*(1+beta1*cos(2*pi*t/period)))*S*I-gamma*I
dRdt <- gamma*I - delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365)
sol <- ode(y = y, times = seq(0,370,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(S ~ time, data = sol, type = "l", col = 1, main = "Numerisk loesning ved brug af dimensionelle model")
model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -(beta0*(1+beta1*cos(2*pi*t/period)))*S*I+delta*R
dIdt <- (beta0*(1+beta1*cos(2*pi*t/period)))*S*I-gamma*I
dRdt <- gamma*I - delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,370,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(S ~ time, data = sol, type = "l", col = 1, main = "Numerisk loesning ved brug af dimensionelle model")
plot(I ~ time, data = sol, type = "l", col = 1, main = "Numerisk loesning ved brug af dimensionelle model")
plot(I ~ S, data = sol, type = "l", col = 2)
sol <- ode(y = y, times = seq(0,370,0.01), func = model, parms = p)
sol <- as.data.frame(sol)
plot(I ~ time, data = sol, type = "l", col = 1, main = "Numerisk loesning ved brug af dimensionelle model")
plot(I ~ S, data = sol, type = "l", col = 2)
model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -(beta0*(1+beta1*cos(2*pi*t/period)))*S*I+delta*R
dIdt <- (beta0*(1+beta1*cos(2*pi*t/period)))*S*I-gamma*I
dRdt <- gamma*I - delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,100*376,0.01), func = model, parms = p)
model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -(beta0*(1+beta1*cos(2*pi*t/period)))*S*I+delta*R
dIdt <- (beta0*(1+beta1*cos(2*pi*t/period)))*S*I-gamma*I
dRdt <- gamma*I - delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,100*376,0.01), func = model, parms = p)
model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -(beta0*(1+beta1*cos(2*pi*t/period)))*S*I+delta*R
dIdt <- (beta0*(1+beta1*cos(2*pi*t/period)))*S*I-gamma*I
dRdt <- gamma*I - delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,0.01), func = model, parms = p)
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(I[time > 10*365] ~ time[time > 10*365], data = sol, col = 1, main = "Numerisk loesning ved brug af dimensionelle model")
plot(I[time > 10*365] ~ S[time > 365], data = sol, type = "l", col = 2)
plot(I[time > 10*365] ~ S[time > 10*365], data = sol, type = "l", col = 2)
plot(I[time > 10*365] ~ S[time > 10*365], data = sol, col = 2)
model <- function(t, y, p) {
with(as.list(c(y,p)), {
dSdt <- -(beta0*(1+beta1*cos(2*pi*t/period)))*S*I+delta*R
dIdt <- (beta0*(1+beta1*cos(2*pi*t/period)))*S*I-gamma*I
dRdt <- gamma*I - delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(I[time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
plot(I[time > 10*365] ~ S[time > 10*365], data = sol, col = 1)
beta1list <- c(0.01, 0.055, 0.1, 0.25, 0.26)
# Color counter
count = 1
# Initialisering af plot
par(mfrow = c(2,1))
plot(3500:9500, rep(1, length(3500:9500), col = 'white'))
for (beta1 in beta1list){
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = beta1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
lines(I[time > 10*365] ~ time[time > 10*365], data = sol, col = rainbow(5)[count], type = "l")
lines(I[time > 10*365] ~ S[time > 10*365], data = sol, col = rainbow(5)[count])
count = count+1
}
?rainbow
beta1list <- c(0.01, 0.055, 0.1, 0.25, 0.26)
# Color counter
count = 1
# Initialisering af plot
par(mfrow = c(2,1))
plot(3500:9500, rep(1, length(3500:9500), col = 'white'))
plot(3500:9500, rep(1, length(3500:9500), col = "white"))
plot(3500:9500, rep(1, length(3500:9500)), col = "white")
for (beta1 in beta1list){
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = beta1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
lines(I[time > 10*365] ~ time[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
lines(I[time > 10*365] ~ S[time > 10*365], data = sol, col = rainbow(5)[[count]])
count = count+1
}
beta1list <- c(0.01, 0.055, 0.1, 0.25, 0.26)
# Color counter
count = 1
# Initialisering af plot
plot(3500:9500, rep(1, length(3500:9500)), col = "white")
for (beta1 in beta1list){
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = beta1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
lines(I[time > 10*365] ~ time[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
lines(I[time > 10*365] ~ S[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
count = count+1
}
# Initialisering af plot
plot(3500:9500, rep(1, length(3500:9500)), col = "white")
par(mfrow = c(1,1))
# Initialisering af plot
plot(3500:9500, rep(1, length(3500:9500)), col = "white")
lines(I[time > 10*365] ~ time[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
# Initialisering af plot
plot(3500:9500, rep(1, length(3500:9500)), col = "white", ylim = c(0,0.15))
for (beta1 in beta1list){
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = beta1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
lines(I[time > 10*365] ~ time[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
lines(I[time > 10*365] ~ S[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
count = count+1
}
# Color counter
count = 1
# Initialisering af plot
plot(3500:9500, rep(1, length(3500:9500)), col = "white", ylim = c(0,0.15))
for (beta1 in beta1list){
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = beta1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
lines(I[time > 10*365] ~ time[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
lines(I[time > 10*365] ~ S[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
count = count+1
}
# Color counter
count = 1
# Initialisering af plot
plot(3500:9500, rep(1, length(3500:9500)), col = "white", ylim = c(0,0.015))
for (beta1 in beta1list){
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = beta1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
lines(I[time > 10*365] ~ time[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
lines(I[time > 10*365] ~ S[time > 10*365], data = sol, col = rainbow(5)[[count]], type = "l")
count = count+1
}
legend(x = "topright", legend = beta1list, col = rainbow(5), lty = 1)
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(I[time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(I[time > 0*365] ~ time[time > 0*365], data = sol, col = 1)
plot(I[time > 0*365] ~ S[time > 0*365], data = sol, col = 1)
abline(v = (1/13)/(beta0*(1+beta1*cos(2*pi*t/period))))
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(I[time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
plot(I[time > 10*365] ~ S[time > 10*365], data = sol, col = 1)
abline(v = (1/13)/(beta0*(1+beta1*cos(2*pi*t/period))))
beta0 = 17/13, beta1 = 0, gamma = 1/13, delta = 1/50/365, period = 365
beta0 = 17/13
beta1 = 0
gamma = 1/13
delta = 1/50/365
period = 365
abline(v = (1/13)/(beta0*(1+beta1*cos(2*pi*t/period))))
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
plot(I[time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
plot(I[time > 10*365] ~ S[time > 10*365], data = sol, col = 1)
beta0 = 17/13
beta1 = 0
gamma = 1/13
delta = 1/50/365
period = 365
abline(v = (1/13)/(17/13))
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
sol$beta1
plot(beta_func(beta0,beta1,period, time[time > 10*365])[time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
beta_func <- function(beta0, beta1, period, t){
return(beta0*(1+beta1*cos(2*pi*t/period)))
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
beta0 = 17/13
beta1 = 0
gamma = 1/13
delta = 1/50/365
period = 365
par(mfrow = c(3,1))
plot(beta_func(beta0,beta1,period, time[time > 10*365]) ~ [time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
plot(beta_func(beta0,beta1,period, time > 10*365) ~ [time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
plot(beta_func(beta0,beta1,period, time > 10*365) ~ time[time > 10*365], data = sol, col = 1)
plot(beta_func(beta0,beta1,period, time[time > 10*365]) ~ time[time > 10*365], data = sol, col = 1)
plot(S[time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
plot(beta_func(beta0,beta1,period, time[time > 10*365])*S[time > 10*365] / gamma ~ time[time > 10*365])
plot(beta_func(beta0,beta1,period, sol$time[time > 10*365]) ~ time[time > 10*365], data = sol, col = 1)
par(mfrow = c(3,1))
plot(beta_func(beta0,beta1,period, sol$time[sol$time > 10*365]) ~ sol$time[sol$time > 10*365], col = 1)
plot(beta_func(beta0,beta1,period, time[time > 10*365]) ~ time[time > 10*365], data = sol, col = 1)
plot(beta_func(beta0,beta1,period, time[time > 10*365]) ~ time[time > 10*365], data = sol, col = 1)
plot(beta_func(beta0,beta1,period, sol$time[sol$time > 10*365]) ~ sol$time[sol$time > 10*365], col = 1)
plot(beta_func(beta0,beta1,period, sol$time[sol$time > 10*365]) ~ sol$time[sol$time > 10*365], col = 1)
plot(sol$time[sol$time > 10*365], beta_func(beta0,beta1,period, sol$time[sol$time > 10*365]), col = 1)
beta_func <- function(beta0, beta1, period, t){
return(beta0*(1+beta1*cos(2*pi*t/period)))
}
y <- c(S = 1/2, I = 1/2, R = 0)
p <- c(beta0 = 17/13, beta1 = 0.1, gamma = 1/13, delta = 1/50/365, period = 365)
sol <- ode(y = y, times = seq(0,25*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
beta0 = 17/13
beta1 = 0.1
gamma = 1/13
delta = 1/50/365
period = 365
par(mfrow = c(3,1))
plot(sol$time[sol$time > 10*365], beta_func(beta0,beta1,period, sol$time[sol$time > 10*365]), col = 1)
plot(S[time > 10*365] ~ time[time > 10*365], data = sol, col = 1)
plot(sol$time[sol$time > 10*365], beta_func(beta0,beta1,period, sol$time[sol$time > 10*365])*S[sol$time > 10*365] / gamma, type = "l")
par(mfrow = c(3,1))
plot(sol$time[sol$time > 10*365], beta_func(beta0,beta1,period, sol$time[sol$time > 10*365]), col = 1, type = "l")
plot(S[time > 10*365] ~ time[time > 10*365], data = sol, col = 1, type = "l")
plot(sol$time[sol$time > 10*365], beta_func(beta0,beta1,period, sol$time[sol$time > 10*365])*sol$S[sol$time > 10*365] / gamma, type = "l")
par(mfrow = c(3,1))
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365]), col = 1, type = "l")
plot(S[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 10*365])*sol$S[sol$time > 40*365] / gamma, type = "l")
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365]), col = 1, type = "l")
sol <- ode(y = y, times = seq(0,50*376,1), func = model, parms = p)
sol <- as.data.frame(sol)
beta0 = 17/13
beta1 = 0.1
gamma = 1/13
delta = 1/50/365
period = 365
par(mfrow = c(3,1))
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365]), col = 1, type = "l")
plot(S[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 10*365])*sol$S[sol$time > 40*365] / gamma, type = "l")
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365])*sol$S[sol$time > 40*365] / gamma, type = "l")
par(mfrow = c(4,1))
plot(I[time > 40*365] ~ time[time > 40*365], data = sol, col = 1)
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365]), col = 1, type = "l")
plot(S[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365])*sol$S[sol$time > 40*365] / gamma, type = "l")
plot(I[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365]), col = 1, type = "l")
plot(S[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365])*sol$S[sol$time > 40*365] / gamma, type = "l")
abline(v = 364*(40:70), col = 2)
abline(h = 1, col = 3)
par(mfrow = c(4,1))
plot(I[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
abline(v = 364*(40:70), col = 2)
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365]), col = 1, type = "l")
par(mfrow = c(4,1))
plot(I[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
abline(v = 364*(40:70), col = 2)
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365]), col = 1, type = "l")
abline(v = 364*(40:70), col = 2)
plot(S[time > 40*365] ~ time[time > 40*365], data = sol, col = 1, type = "l")
abline(v = 364*(40:70), col = 2)
plot(sol$time[sol$time > 40*365], beta_func(beta0,beta1,period, sol$time[sol$time > 40*365])*sol$S[sol$time > 40*365] / gamma, type = "l")
abline(v = 364*(40:70), col = 2)
abline(h = 1, col = 4)
ode?
?ode
?ode
?deSolve
?solve
install.packages("latexpdf")
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/Consumption-plots.R', echo=TRUE)
par(mfrow=c(1,1))
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/Consumption-plots.R', echo=TRUE)
