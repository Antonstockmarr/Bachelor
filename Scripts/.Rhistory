n*P
n*p
nn*pp
nn = 250
pp = 0.20
nn*pp
sqrt(nn*pp(1-pp))
nn = 250
pp = 0.20
nn*pp
sqrt(nn*pp(1-pp))
sqrt(nn*pp*(1-pp))
n1*aa/NN
NN = 6
aa = 1
n1 = 2
n1*aa/NN
N= 6
a = 1
n = 2
n*a/N
n*(a/N)*((N-a)/N)*(N-n)/(N-1)
2/9
phyper(0,1,5,2 )
2/3
pbinom(0,2,1/6)
n*a/N
N = 20
a = 6
n = 3
n*a/N
n*(a/N)*((N-a)/N)*(N-n)/(N-1)
(-22.5)+c( 1,1)*qt(0.975,df=(40-1))*45.5/sqrt(40)
(-22.5)+c(-1,1)*qt(0.975,df=(40-1))*45.5/sqrt(40)
(-22.6)+c(-1,1)*qt(0.975,df=(40-1))*45.5/sqrt(40)
qt(0.975,df=(40-1))
(-22.6)+c(-1,1)*qt(0.975,df=(40-1))*(45.5/sqrt(40))
(1-pt((-22.6),df=40-1))
tobs = (-22.5)/(45.5/sqrt(40))
2*(1-pt(ans(tobs),df=40-1))
tobs = (-22.5)/(45.5/sqrt(40))
2*(1-pt(ans(tobs),df=40-1))
2*(1-pt(abs(tobs),df=40-1))
tobs = (-22.6)/(45.5/sqrt(40))
2*(1-pt(abs(tobs),df=40-1))
0.137930/0.009567
p = 20/75
qnorm(p)
qnorm(0.975)
p+c(-1,1)*qnorm(0.975)*sqrt(p*(1-p)/75)
c(-1,1)*qnorm(0.975)*sqrt(p*(1-p)/75)
qnorm(0.90)
n = 1/4*(qnorm(0.95)/0.05)
n = 1/4*(qnorm(0.95)/0.05)^2
100*n
1-pt(2,df=10-1)
1-pbinom(14,prob=1/5,size=30)
593.40/100.73
F = (593.40/(4-1)) / 100.73/((k-1)*(3-1))
F = (593.40/(4-1)) / 100.73/((4-1)*(3-1))
F
F = (593.40/3/(100.73/6)
F
F = (593.40/3)/(100.73/6)
F
mu = 1/(4*3)*310.85
alpha_hat = 1/3*50.43-mu
qt(0.975,df = 6)
(50.43-103.94)/3+c(-1,1)*2.4469*sqrt(100.73/(6-4)*1/3)
(50.43-103.94)/3+c(-1,1)*2.4469*sqrt(100.73/6*2/3)
qt(0.975,df = 6)
MSE = 100.73/6
alphaBonf<- 0.05/6
qt(1-alphaBonf/2, df=6)
MSE = 100.73/3
MSE = 100.73/6#
e = (75*112)/150
e2 = (75*38)/150
1/56 + 1/56 + 1/19 + 1/19
?qqnorm
?qnorm
qnorm(0.025,mean=228,sd=4)
qnorm(0.075,mean=228,sd=4)
qnorm(0.975,mean=228,sd=4)
2*s^4/9
2*x^4/9
2/9
9^2*2/9+19^2*2/9
9^2*2/9
19^2*2/9
19^2*2/19
(18+38)/28^2
(2/9+2/19)/2^2
qchisq(0.05,958-1)
qchisq(0.975,958-1)
qchisq(0.95,958-1)
qchisq(0.05,958-1)
qchisq(0.95,958-1)
1-0.01/2
qt(0.995,12)
qt(0.995,12-1)
(0.01485-0.01)/0.00678
2*(1-pt(0-715,df=25-3))
2*(1-pt(0.715,df=25-3))
1-0.1/2
qt(0.95,993-1)
qt(0.99
5,993-1)
qt(0.995,993-1)
qt(0.95,993-1)
qt(0.95,993)
qnorm(0.95,993)
?pt
pt(0.95,df=993)
pt(0.95,df=993-1)
qnorm(0.95)
qnorm(0.95)
1-0.1111
(506*798)/998
(414-404.6)^2/404.6
(0.4426-0.5019)/(sqrt((0.5019*0.4981)/906))
qnorm(0.9)
qnorm(0.995)
qnorm(0.99)
qnorm(0.1)
qnorm(0.95)
(1055.4-903.8)/(sqrt(9739*2/5))
qt(0.975,12)
22.443^2
52.663+7.5233+19.2617
52.663+38.523+22.443
0.9^2
qchisq(0.025,200-1)
qchisq(0.975,200-1)
48*2
234*2
1-0.05/2
1.4/sqrt(100)
69*352.7
24336.3+3226.7
352.7*4
1410.8+3226.7
352.7*68
23983.6+3226.7
352.7*66
23278.2+3226.7
352.7*62
21867.4+3226.7
352.7*68
23983.6+3226.7
352.7*61
21514.7+3226.7
3226.7/7
460.96/352.7
(3226.7/3)/352.7
(3226.7/8)/352.7
(3226.7/1)/352.7
352.7*(70-2)
(352.7*(70-2))+3226.7
(352.7*(4-2))+3226.7
(352.7*(9-2))+3226.7
(352.7*(18-2))+3226.7
(352.7*(70-2))+3226.7
(352.7*(70-1))+3226.7
F = (3226.7/(2-1)) / (27563/(70-2))
1-pf(F,df1 = 2-1, df2 = 70-2)
1-pf(abs(9.148568),df1 = 2-1, df2 = 70-2)
53.91-40.52
0.05/1
2*352.7
0.05/18
1-(0.05/2)/2
1-(0.05/4)/2
1-(0.05/8)/2
pi/8
20^2*sin(2*pi/8)/9.81
(20^2*sin(2*pi/8))/9.81
(20^2*sin(2*3*pi/8))/9.81
qnorm(0.99,mean = 20, sd = 2)
pnorm(0.99,mean = 20, sd = 2)
39.73^2
dbinom(0,229,0.00144)
dhyper(0,229,0.00144)
?Hypergeometric
?norm
?dnorm
?binom
?binorm
?dbinom
pbinom(0.299,0.00144)
pbinom(0.299,prob = 0.00144)
pbinom(0,299,prob = 0.00144)
dbinom(0,38,0.00144)
pbinom(0,30,prob = 0.00144)
pbinom(0,38,prob = 0.00144)
sqrt(0.00144*(1-0.00144)/229
sqrt(0.00144*(1-0.00144)/229)
sqrt(0.00144*(1-0.00144)/229)
sqrt(0.00144*(1-0.00144)/38)
0.00144*229
0.00144*38
0.00144+c(-1,1)*qnorm(0.975)*sqrt((0.00144*(1-0.00144))/229)
?quantile
0.00144+c(-1,1)*qnorm(0.025)*sqrt((0.00144*(1-0.00144))/229)
0.00144+c(-1,1)*qnorm(0.995)*sqrt((0.00144*(1-0.00144))/229)
piger = c(105, 113, 115, 116, 121, 125, 128, 128, 130, 132)
drenge = c(115, 115, 118, 122, 123, 124, 125, 126, 129, 133)
quantile(drenge,type=2)
quantile(0.00144,type=2)
9/25*100
9/25
25/9
defective = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
quantile(defective,type=2)
229*770
176330/5
35266*0.00144
(770/5)229
(770/5)*229
qnorm(1-0.05/2)
1-0.05/2
qnorm(0.975)
0.00144*(1-0.00144)*(196/35266)^2
0.00144*(1-0.00144)*(196/176330)^2
0.00144*(1-0.00144)*(1.96/176330)^2
0.00144*(1-0.00144)*(1.96/15)^2
0.00144*(1-0.00144)*(1.96/5)^2
(0.00144-0.0001)^2/0.0001
(0.00144-0.0001)^2/0.00144
0.00152-0.00144
qnorm(0.975)
(9-8.5)^2/8.5
((9-8.5)^2/8.5) + ((8-8.5)^2/8.5)
2/17
1/17
2*pt(48.865,df = 229-1)
2*qt(48.865,df = 229-1)
2*(1-pnorm(48.865))
2*(1-pnorm(abs(48.865))
2*(1-pnorm(abs(48.865))
2*(pnorm(abs(48.865))
1-pnorm(abs(48.865))
1-pnorm(48.865)
1-pnorm(48.865)
?t.test
1-pf(9.149,1,69)
1-0.05/2
5*0.00144
0.0072/(229*770)
0.0072/770
(229*770)*0.0072
0.0072*770
0.00144/5
p = 0.00144
ME = 0.0001
p*(1-p)*(qnorm(0.975)/ME)^2
1-p
p*(1-p)
1.96/0.0001
0.05/0.0001
ME*(1-ME)*(qnorm(0.975)/p)^2
2*(1-pt(48.865))
2*(1-pt(48.865, df = 17-1))
2*(1-pt(48.865, df = 18-1))
2*(1-pt(48.865, df = 1))
2*(1-pt(0.48865, df = 2-1))
2*(1-pt(0.48865, df = 18-1))
2*(1-pnorm(0.48865))
2*(pnorm(0.48865))
1-pnorm(0.48865)
1/4*(qnorm(0.975)/ME)^2
0.00144/(229*770)
552373.3/770
ls()
?sapply
?ks.test
install.packages("shiny")
?shiny
install.packages("shiny")
22/7
rm(list=ls())
## set working directory
require("knitr")
install.packages("knitr")
```{r "setup", include=FALSE}
rm(list=ls())
## set working directory
require("knitr")
## set working directory
require("knitr")
## set working directory
require("knitr")
rm(list=ls())
## set working directory
require("knitr")
install.packages("rmarkdown")
```{r "setup", include=FALSE}
rm(list=ls())
## set working directory
require("knitr")
?knitr
install.packages("shiny")
a <- 4
a
a * 4
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a <- a + 10
a
(7.5-3)/(2019-1960)
(7.5-3)/(2019-1960)
45*10^6/0.005
pop_1960 <- 3*10^9
pop_2019 <- 7.5*10^9
diff_year <- 2019-1960
rate <- (pop_2019-pop_1960)/diff_year
area_earth <- 45*10^6
sqM_pers <- 0.005
dead <- area_earth/sqM_pers
x <- rnorm(100)
plot(x)
hej <- rnorm(100)
plot(hej)
x1 <- rnorm(100); x2 <- rnorm(100); x3 <- rnorm(100)
t = data.frame( a = x1,
b = x1+x2,
c = x1+x2+x3)
plot(t$a, type="l", ylim=range(t),
lwd=3, col=rgb(1,0,0,0.3))
lines(t$b, type="s", lwd=2,
col=rgb(0.3,0.4,0.3,0.9))
points(t$c, pch=20, cex=4,
col=rgb(0,0,1,0.3))
# population growth
a <-  60e6
# uncertainty of population
asd <- 10e6
# number of repeats
nrep <- 10
# time in the future to simulate
ntime <- 30
# matrix to collect data
pop <- matrix(NA, # fill with NA
nrow = nrep, # number of rows
ncol = ntime) # number of columns
# initiate population
pop[,1] <- 7.5e9
for (i in 1:nrep)
{
# draw a growth rate from normal distribution
growth <- rnorm(n = 1, mean = a, sd = asd)
for (j in 2:ntime)
{
#  progress population
pop[i,j] <- pop[i,j-1]+growth
}
}
matplot(t(pop),type="l",xlab="time from 2019 [years]",ylab="population of earth")
abline(h=9e9,col=2,lty=2,lwd=2)
legend("topleft","End of the world",col=2,lty=2,lwd=2)
grid()
pop
matplot(t(pop),type="l",xlab="time from 2019 [years]",ylab="population of earth")
view(t(pop))
View(t(pop))
# population growth
a <-  60e6
# uncertainty of population
asd <- 10e6
# number of repeats
nrep <- 10
# time in the future to simulate
ntime <- 30
# matrix to collect data
pop <- matrix(NA, # fill with NA
nrow = nrep, # number of rows
ncol = ntime) # number of columns
# initiate population
pop[,1] <- 7.5e9
for (i in 1:nrep)
{
# draw a growth rate from normal distribution
growth <- rnorm(n = 1, mean = a, sd = asd)
for (j in 2:ntime)
{
#  progress population
pop[i,j] <- pop[i,j-1]+growth
}
}
matplot(t(pop),type="l",xlab="time from 2019 [years]",ylab="population of earth")
abline(h=9e9,col=2,lty=2,lwd=2)
legend("topleft","End of the world",col=2,lty=2,lwd=2)
grid()
?library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
create_plot3 <- function(N,r,...) {
t <- 1:10
Nt <- N*exp(r*t)
plot(t,Nt,...)
}
?library(shiny)
create_plot3(1,1.5)
create_plot3(1,1.5,type = "l")
create_plot3(1,log(1.5),type = "l")
shinyApp(
ui = fluidPage(
sliderInput("slider1",
label = "Intrinsic rate",
min = -0.15,
max = .15,
value = 0.01,
step=0.01),
plotOutput('plot1')
),
server = function(input, output) {
output$plot1 <- renderPlot({
curve(7.5e9*exp(input$slider1*x),
from=0,
to=30,
xlab="time from 2019 [years]",
ylab="population of earth",
lwd=2,col=3)
grid()
abline(h=9e9,col=2,lty=2,lwd=2)
legend("topleft","End of the world",col=2,lty=2,lwd=2)
})
},
options = list(height = 500)
)
library("shiny")
library("shiny")
?ode
?ode
plotNew(log(1.5),1,1)
plotNew <- function(rate,dt,N0){
# allocating memory
N <- 10
n <- rep(NA, N)
n[1] <- N0
for (i in 2:N) {
n[i] <- n[i-1] + rate * n[i-1] * dt
}
plot(1:10,n,...)
}
plotNew(log(1.5),1,1)
plotNew <- function(rate,dt,N0,...){
# allocating memory
N <- 10
n <- rep(NA, N)
n[1] <- N0
for (i in 2:N) {
n[i] <- n[i-1] + rate * n[i-1] * dt
}
plot(1:10,n,...)
}
plotNew(log(1.5),1,1)
plotNew(log(1.5),1,1,type="l")
plotNew(log(1.5),1,1)
plotNew <- function(rate,dt,N0,...){
# allocating memory
N <- 10
n <- rep(NA, N)
n[1] <- N0
for (i in 2:N) {
n[i] <- n[i-1] + rate * n[i-1] * dt
}
plot(1:10,n,type="l",...)
}
plotNew(log(1.5),1,1)
plotNew(log(1.5),9,1)
install.packages("deSolve")
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/exploratory.R', echo=TRUE)
plot(data[[1]]$Flow)
plot.months <- c("January", "February", "March", "April", "May", "June", "July", "August",
"September", "November", "December")
par(mfrow = c(1,1))
time <- seq(as.Date(StartDays[1]),as.Date(EndDays[1]), by = "1 mon")
plot(data[[1]]$StartDateTime, data[[1]]$Flow, "l", xaxt = 'n')
drawxaxis(data[[1]]$StartDateTime, tick.tstep="months")
axis.Date(1, at = seq(min(time), max(time), by = "12 mon"), format = "%m")
# Investigating each house's flow behaviour
for (i in 1:1){
#data[[i]]$StartDateTime.new <- as.POSIXlt(data[[i]]$StartDateTime)
#data[[i]]$StartDateTime <- as.Date(data[[i]]$StartDateTime, "%Y-%m-%d")
#data[[i]]$StartDateTime2 <- as.Date(cut(data[[i]]$StartDateTime, breaks = "month"))
plot(data[[i]]$StartDateTime, data[[i]]$Flow, type = "l", xlab ="Time", ylab = "Flow")
axis(1, at = unique(months(data[[i]]$StartDateTime)), las = 2)
}
tmp <- weather[(weather$StartDateTime <= EndDays[1]),]
tmp <- tmp[tmp$StartDateTime >= StartDays[1],]
plot(tmp$Temperature,data[[1]]$CoolingDegree*data[[1]]$Flow)
abline(v = 11.5, lty = 2, col = 2)
tempdivide = 13.5
lowtemp <- tmp$Temperature[tmp$Temperature<tempdivide]
lowtempq <- (data[[1]]$CoolingDegree*data[[1]]$Flow)[tmp$Temperature<tempdivide]
hightemp <- tmp$Temperature[tmp$Temperature>=tempdivide]
hightempq <- (data[[1]]$CoolingDegree*data[[1]]$Flow)[tmp$Temperature>=tempdivide]
plot(lowtemp,lowtempq, xlim=c(min(lowtemp),max(hightemp)),col=Wcol[3],xlab='Temperature',ylab='Q-values')
points(hightemp,hightempq, xlim=c(min(lowtemp),max(hightemp)),col=Wcol[2])
abline(v=tempdivide)
fit = lm(lowtempq~lowtemp)
segments(min(lowtemp),fit$coefficients[1]+min(lowtemp)*fit$coefficients[2],tempdivide,tempdivide*fit$coefficients[2]+fit$coefficients[1])
segments(tempdivide,tempdivide*fit$coefficients[2]+fit$coefficients[1],max(hightemp),tempdivide*fit$coefficients[2]+fit$coefficients[1])
