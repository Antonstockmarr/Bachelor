weatherCons[[1]]$SunHour
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lmMultiple <- lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure, data = model.tmp)
}
summary(lmMultiple)
pairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple <- lm(Consumption ~ Temperature, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2))
plot(lm.simple, main = paste("Daily consumption for house ", i))
}
?par
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple <- lm(Consumption ~ Temperature, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2))
plot(lm.simple)
title = paste("Daily consumption for house ", i)
}
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple <- lm(Consumption ~ Temperature, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2))
plot(lm.simple)
title(paste("Daily consumption for house ", i), outer=TRUE)
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
model.data <- weatherCons
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple <- lm(Consumption ~ Temperature, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2))
plot(lm.simple)
title(paste("Daily consumption for house ", i), outer=TRUE)
}
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lmMultiple <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure, data = model.tmp))
}
source("stepP.R")
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lmMultiple <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure, data = model.tmp))
}
summary(lmMultiple)$object
summary(lmMultiple$object)
plot(lmMultiple)
plot(lmMultiple$object)
plot(model.tmp$Consumption)
plot(Consumption~Temperature,data=model.tmp)
lines(lmMultiple$object)
str(lmMultiple$object)
lmMultiple <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
str(model.tmp)
weatherCons
str(weatherCons)
str(day.data)
tmp_WinterBreak <-as.integer(apply(weatherCons,1,function(x) x %in% WinterBreakDates)[1,])
dim(weatherCons)
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_SpringBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
weatherCons$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(weatherCons$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
weatherCons[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(weatherCons[[i]]$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
weatherCons[[1]]$Holiday''
weatherCons[[1]]$Holiday
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_SpringBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
weatherCons[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(weatherCons[[i]]$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
for (i in 1:n)
{
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
day.tmp$IsHistoricalEstimated<-NULL
day.tmp$DewPoint<-NULL
day.tmp$Humidity<-NULL
tmpcons <- day.data[[i]]$Volume*day.data[[i]]$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
names(weatherCons[[i]])[1]<-"Consumption"
}
for (i in 1:n)
{
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_SpringBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
weatherCons[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(weatherCons[[i]]$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
}
weatherCons[[1]]$Holiday
rm(list = ls())
library(xts)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("DataChecking.R")
# Loading all data
data.path = "../Consumption data/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
day.data <- vector(mode="list", length = n)
data.key <- rep("",n)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
k <- 0;
for(i in 1:n){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
dt.tmp <- dt.tmp[,-1]
names(dt.tmp)[1]="ObsTime"
dt.tmp$ObsTime <- strptime(dt.tmp$ObsTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
# Removing data before startdate of weather data
#while(as.POSIXlt(x="2017-12-31 23:00:00",tz="GMT", format = "%Y-%m-%d %H:%M:%S")>=dt.tmp$ObsTime[length(dt.tmp$ObsTime)]){
#  dt.tmp<-dt.tmp[1:(length(dt.tmp$ObsTime)-1),]
#}
# Add logical vairable for weekends
tmp.wd <- as.Date(dt.tmp$ObsTime,tz="GMT")
tmp.wd <-weekdays(tmp.wd,abbreviate = TRUE)
dt.tmp$Weekend <- grepl("?",tmp.wd)
dt.tmp.noNA<- dt.tmp
# Fill missing null values.
tmp.xts <- xts(dt.tmp[,-1], order.by=dt.tmp[,1])
t1<-rev(seq(from=tail(dt.tmp$ObsTime,n=1), to=dt.tmp$ObsTime[1], by="hour"))
d1 <- xts(rep(1,length(t1)), order.by=t1)
x <- merge(d1,tmp.xts,all=TRUE)
tmp.df <- data.frame(ObsTime=index(x),coredata(x[,-1]))
dt.tmp <- tmp.df[dim(tmp.df)[1]:1,]
#Datalengths[i] = length(dt.tmp)
# Setting parameters for data checking
par = c('min_obs'=1000, 'miss_fraction'=1/20)
# If the data check is ok, store that data set
if (DataChecking(dt.tmp,par)==TRUE)
{
k=k+1
data[[k]] <- dt.tmp
# Setting start and end times for each table.
EndDays[k]= data[[k]]$ObsTime[1]
StartDays[k]=data[[k]]$ObsTime[length(dt.tmp$ObsTime)]
#Making daily data
tmp.dat <- dt.tmp.noNA
tmp.dat$ObsTime <- as.Date(tmp.dat$ObsTime,tz="GMT")
tmp.dat$Obs <- rep(1,length(tmp.dat$ObsTime))
tmp.d1 <-aggregate(x=tmp.dat[,-1],by= data.frame(Date = tmp.dat[,1]),FUN = mean)
tmp.d2 <-aggregate(x=tmp.dat[,9],by= data.frame(Date = tmp.dat[,1]),FUN = sum)
tmp.dat <-data.frame(tmp.d1[,-9],Obs=tmp.d2[,2])
day.data[[k]] <-tmp.dat[dim(tmp.dat)[1]:1,]
data.key[k]<-substr(file.names[i],1,36)
}
}
if (k<n){
data<-data[-(k+1:n)]
day.data<-day.data[-(k+1:n)]
data.key<-data.key[-(k+1:n)]
}
# k is new n
n <- k
tmp.df<-data.frame(Key=data.key)
BBR.tmp <- read.table('../InstallationData.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
BBR <- merge(tmp.df,BBR.tmp)
# Adding vacation periods as attributes in day.data. Dates are taken from
# http://skoleferie-dk.dk/skoleferie-aalborg/?fbclid=IwAR1l2J2t9mHz8JC3qho9stqOj7k7e8MrJQ461a7Iy6_Ekf5AaL8HNzZY9WM
WinterBreakDates <- as.POSIXlt(seq(as.Date('2018-02-10'),as.Date('2018-02-18'), by="days"),format = "%Y-%m-%d", tz = "GMT")
SpringBreakDates <- as.POSIXlt(seq(as.Date('2018-03-24'),as.Date('2018-04-02'), by="days"),format = "%Y-%m-%d", tz = "GMT")
AutumnBreakDates <- as.POSIXlt(seq(as.Date('2018-10-13'),as.Date('2018-10-21'), by="days"),format = "%Y-%m-%d", tz = "GMT")
ChristmasBreakDates <- as.POSIXlt(seq(as.Date('2018-12-22'),as.Date('2019-01-02'), by="days"),format = "%Y-%m-%d", tz = "GMT")
for (i in 1:n)
{
tmp_WinterBreak <-as.integer(apply(day.data[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_SpringBreak <-as.integer(apply(day.data[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(day.data[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(day.data[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
day.data[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(day.data[[i]]$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
}
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_02-06-2019.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(weather)[1]="ObsTime"
weather$ObsTime = strptime(weather$ObsTime,format='%d-%m-%Y %H:%M:%S',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
weather$X <- NULL
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$ObsTime[1]
weatherEnd = weather$ObsTime[length(weather$ObsTime[weather$IsHistoricalEstimated==FALSE])]
weather <- weather[dim(weather)[1]:1,]
# Making temporary weather data in order to merge it with the house data
tmp <- weather[(weather$ObsTime <= EndDays[42]),]
tmp <- tmp[tmp$ObsTime >= StartDays[42],]
#Making daily weather data
tmp.dat <- weather
tmp.dat$ObsTime <- as.Date(tmp.dat$ObsTime,tz="GMT")
tmp.dat$Obs <- rep(1,length(tmp.dat$ObsTime))
tmp.d1 <-aggregate(x=tmp.dat[,-1],by= data.frame(Date = tmp.dat[,1]),FUN = mean)
tmp.d2 <-aggregate(x=tmp.dat[,13],by= data.frame(Date = tmp.dat[,1]),FUN = sum)
tmp.dat <-data.frame(tmp.d1[,-13],Obs=tmp.d2[,2])
day.weather <-tmp.dat
day.weather <- day.weather[dim(day.weather)[1]:1,]
# Making temporary weather data in order to merge it with the house data
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[42],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[42],tz="GMT"),]
# Making average daily data:
day.avg <- day.data[[match(max(Datalengths),Datalengths)]]
#day.avg[,1]<-seq(from=as.Date(min(StartDays),tz="GMT"), to=as.Date(max(EndDays),tz="GMT"), by="day")
m=dim(day.avg)[2]
for(j in 2:m){
day.avg[,j] <- rep(0,length(day.avg[,1]))
weightavg<-rep(0,length(day.avg[,1]))
for (i in 1:n){
tmp.index<-1+difftime(as.Date(StartDays[i],tz="GMT"),as.Date(min(StartDays),tz="GMT"), units ="day"):difftime(as.Date(EndDays[i],tz="GMT"),as.Date(min(StartDays),tz="GMT"), units ="day")
tmp.data=day.data[[i]][,j]
day.avg[tmp.index,j] <- day.avg[tmp.index,j] + tmp.data
weightavg[tmp.index] <- weightavg[tmp.index] + rep(1,length(tmp.data)) - is.na(day.data[[i]]$Flow)
}
day.avg[[j]] <- day.avg[[j]]/weightavg
}
# Adding consumption attribute to daily avg. house data
day.avg$Consumption <- day.avg$Volume*day.avg$CoolingDegree
weatherCons <- vector(mode="list", length = n)
for (i in 1:n)
{
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
day.tmp$IsHistoricalEstimated<-NULL
day.tmp$DewPoint<-NULL
day.tmp$Humidity<-NULL
tmpcons <- day.data[[i]]$Volume*day.data[[i]]$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
names(weatherCons[[i]])[1]<-"Consumption"
}
for (i in 1:n)
{
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_SpringBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
weatherCons[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(weatherCons[[i]]$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
}
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
day.tmp$IsHistoricalEstimated<-NULL
day.tmp$DewPoint<-NULL
day.tmp$Humidity<-NULL
tmpcons <- day.data[[i]]$Volume*day.data[[i]]$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
day.tmp$IsHistoricalEstimated<-NULL
day.tmp$DewPoint<-NULL
day.tmp$Humidity<-NULL
tmpcons <- day.data[[i]]$Volume*day.data[[i]]$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
str(tmpcons)
str(day.tmp$Temperature)
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
day.tmp$IsHistoricalEstimated<-NULL
day.tmp$DewPoint<-NULL
day.tmp$Humidity<-NULL
tmpcons <- day.tmp[[i]]$Volume*day.tmp[[i]]$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
tmpcons <- day.tmp$Volume*day.tmp$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
day.tmp$IsHistoricalEstimated<-NULL
day.tmp$DewPoint<-NULL
day.tmp$Humidity<-NULL
tmpcons <- day.data[[i]]$Volume*day.data[[i]]$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
i=1
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[i],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[i],tz="GMT"),]
day.tmp$IsHistoricalEstimated<-NULL
day.tmp$DewPoint<-NULL
day.tmp$Humidity<-NULL
tmpcons <- day.data[[i]]$Volume*day.data[[i]]$CoolingDegree
weatherCons[[i]]<-cbind(tmpcons,day.tmp)
names(weatherCons[[i]])[1]<-"Consumption"
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_SpringBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
weatherCons[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(weatherCons[[i]]$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
weatherCons$Holiday
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_SpringBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
weatherCons[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
tmp_WinterBreak
tmp_SpringBreak
dim(weatherCons)
dim(weatherCons[[i]])
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],2,function(x) x %in% WinterBreakDates)[1,])
tmp_WinterBreak
dim(day.data[[i]])
names(day.data[[i])
names(day.data[[i]])
names(weatherCons[[i]])
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],2,function(x) x %in% WinterBreakDates)[1,])
tmp_WinterBreak
weatherCons[[i]]<-cbind(day.tmp,tmpcons)
names(weatherCons[[i]])[1]<-"Consumption"
tmp_WinterBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% WinterBreakDates)[1,])
tmp_WinterBreak
tmp_SpringBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% SpringBreakDates)[1,])
tmp_AutumnBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% AutumnBreakDates)[1,])
tmp_ChristmasBreak <-as.integer(apply(weatherCons[[i]],1,function(x) x %in% ChristmasBreakDates)[1,])
weatherCons[[i]]$Holiday <- as.factor(1*tmp_WinterBreak+2*tmp_SpringBreak+3*tmp_AutumnBreak+4*tmp_ChristmasBreak)
levels(weatherCons[[i]]$Holiday) <- c('Working days', 'Winter break', 'Spring break', 'Autumn break', 'Christmas break')
weatherCons$Holiday
weatherCons[[i]]$Holiday
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("data.R")
source("data.R")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lmMultiple <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
}
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("stepP.R")
library(foreach)
library(doParallel)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
lmMultiple <- vector(mode="list", length = n)
for (i in 1:1) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lmMultiple <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
}
c <- makeCluster(cores[1]-1)
library(foreach)
install.packages("foreach")
install.packages("doParallel")
library(foreach)
library(doParallel)
c <- makeCluster(cores[1]-1)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
lmMultiple <- vector(mode="list", length = n)
for (i in 1:2) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lmMultiple[[i]] <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
}
summary(lmMultiple[[1]]$object)
plot(lmMultiple[[2]]$object)
plot(Consumption~Temperature,data=model.tmp)
lines(lmMultiple$object)
#
# plot(lmMultiple[[1]])
par(mfrow = c(2,2))
plot(lm.multiple)
c <- makeCluster(cores[1]-1)
registerDoParallel(c)
lmMultiple <- foreach(i=1:n) %dopar% {
MultiModel <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
MultiModel
}
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
source("data.R")
source("stepP.R")
library(foreach)
library(doParallel)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
lmMultiple <- vector(mode="list", length = n)
for (i in 1:2) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lmMultiple[[i]] <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
}
summary(lmMultiple[[1]]$object)
plot(lmMultiple[[2]]$object)
plot(Consumption~Temperature,data=model.tmp)
lines(lmMultiple$object)
#
# plot(lmMultiple[[1]])
par(mfrow = c(2,2))
plot(lmMultiple)
c <- makeCluster(cores[1]-1)
registerDoParallel(c)
lmMultiple <- foreach(i=1:n) %dopar% {
MultiModel <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
MultiModel
}
#stop cluster
stopCluster(c)
summary(lmMultiple[5]$object)
summary(lmMultiple[[5]]$object)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
model.data <- weatherCons
for (i in 1:n) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
lm.simple <- lm(Consumption ~ Temperature, data = model.tmp)
# Checking model assumptions
par(mfrow = c(2,2))
plot(lm.simple)
title(paste("Daily consumption for house ", i), outer=TRUE)
}
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
source("data.R")
source("stepP.R")
library(foreach)
library(doParallel)
# setup parallel
cores = detectCores()
# Defining new data set where the summer period is left out
model.data <- weatherCons
lmMultiple <- vector(mode="list", length = n)
#
# for (i in 1:2) {
#   model.tmp <- model.data[[i]]
#   model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
#
#   lmMultiple[[i]] <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
#                      UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
# }
#
summary(lmMultiple[[5]]$object)
plot(lmMultiple[[2]]$object)
#
# plot(Consumption~Temperature,data=model.tmp)
# lines(lmMultiple$object)
# #
# # plot(lmMultiple[[1]])
# par(mfrow = c(2,2))
# plot(lm.multiple)
#
# plot(lmMultiple[[1]])
par(mfrow = c(2,2))
plot(lmMultiple)
c <- makeCluster(cores[1]-1)
registerDoParallel(c)
lmMultiple <- foreach(i=1:1) %dopar% {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
MultiModel <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
MultiModel
}
lmMultiple <- foreach(i=1:n) %dopar% {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
MultiModel <- stepP(lm(Consumption ~ Temperature*WindSpeed*WindDirection*SunHour*Condition*
UltravioletIndex*MeanSeaLevelPressure+Holiday, data = model.tmp))
MultiModel
}
