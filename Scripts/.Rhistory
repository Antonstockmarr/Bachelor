R[1] <- sum(X == 3)
## Main loop
for(i in 1:nt)
{
for(j in 1:N)
{
if(X[j] == 2) ## Let each "Infected" "Recover" with probability gamma*dt
{
if(runif(1) < gamma*dt) X[j] <- 3
}
if(X[j] == 1)
{
if(runif(1) < beta*I[i]*dt) X[j] <- 2
}
if(X[j] == 3)
{
if(runif(1) < delta*dt) X[j] <- 1
}
}
S[i+1] <- sum(X == 1)
I[i+1] <- sum(X == 2)
R[i+1] <- sum(X == 3)
}
# Comparing with deterministic model
SIRmodel2 <- function(t, y, p){
with(as.list(c(y,p)),{
dSdt <- -beta*S*I+delta*R
dIdt <- beta*S*I-gamma*I
dRdt = gamma*I-delta*R
dydt <- c(dSdt, dIdt, dRdt)
return(list(dydt))
})
}
SIR_p2 <- c(beta = beta, gamma = gamma, delta = delta)
SIR_y <- c(S = S0, I = I0, R = 0)
SIRsol2 <-  as.data.frame(ode(y = SIR_y, times = tv, func = SIRmodel2, parms = SIR_p2))
## Plots
par(mfrow=c(1,2))
plot(tv,S,type="s",ylim=c(0,N),xlab="Time",ylab="S,R")
lines(tv,R,type="s")
lines(tv, SIRsol2$R, col = 2)
plot(tv,I,type="s",xlab="Time",ylab="I")
lines(tv, SIRsol2$I, col = 2)
Istar <- 45.90909 # sidste entry fra I fra ode solution
Sstar <- gamma/beta
J <- matrix(c(-beta*Istar-delta, -beta*Sstar-delta, Istar*beta, 0), nrow = 2, byrow = TRUE)
eigen(J)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
library(ggplot2)
library(gridExtra)
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Example using Watts colors
plot(data[[1]]$Flow,col=Wcol[2])
# Correlation between consumption and wind
plot(tmp$WindSpeed,data[[1]]$CoolingDegree*data[[1]]$Flow)
plot(tmp$WindDirection,data[[42]]$CoolingDegree*data[[42]]$Flow)
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
for (i in 1:n) {
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]<-
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]+
data[[i]]$Flow*data[[i]]$CoolingDegree
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]<-
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]+
rep(1,length(data[[1]]$Flow))
}
length(difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours"))
length(data[[i]]$Flow*data[[i]]$CoolingDegree)
maxskip<-rep(0,n)
sumskip<-rep(0,n)
for (i in 1:n) {
ntmp=length(data[[i]]$StartDateTime)
tmpdiftest=difftime(data[[i]]$StartDateTime[1:ntmp-1],data[[i]]$StartDateTime[2:ntmp], units ="hours")
maxskip[i]=max(tmpdiftest)
if(max(tmpdiftest)>1){
print(match(2:max(tmpdiftest),tmpdiftest))
}
}
n69=length(data[[69]]$StartDateTime)
tmpdiftest=difftime(data[[69]]$StartDateTime[1:n69-1],data[[69]]$StartDateTime[2:n69], units ="hours")
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
library(ggplot2)
library(gridExtra)
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Example using Watts colors
plot(data[[1]]$Flow,col=Wcol[2])
# Correlation between consumption and wind
plot(tmp$WindSpeed,data[[1]]$CoolingDegree*data[[1]]$Flow)
plot(tmp$WindDirection,data[[42]]$CoolingDegree*data[[42]]$Flow)
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
for (i in 1:n) {
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]<-
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]+
data[[i]]$Flow*data[[i]]$CoolingDegree
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]<-
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]+
rep(1,length(data[[1]]$Flow))
}
length(difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours"))
length(data[[i]]$Flow*data[[i]]$CoolingDegree)
maxskip<-rep(0,n)
sumskip<-rep(0,n)
for (i in 1:n) {
ntmp=length(data[[i]]$StartDateTime)
tmpdiftest=difftime(data[[i]]$StartDateTime[1:ntmp-1],data[[i]]$StartDateTime[2:ntmp], units ="hours")
maxskip[i]=max(tmpdiftest)
if(max(tmpdiftest)>1){
print(match(2:max(tmpdiftest),tmpdiftest))
}
}
n69=length(data[[69]]$StartDateTime)
tmpdiftest=difftime(data[[69]]$StartDateTime[1:n69-1],data[[69]]$StartDateTime[2:n69], units ="hours")
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
rm(list = ls())
library(xts)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("DataChecking.R")
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Loading all data
data.path = "../Consumption data/"
file.names <- dir(data.path, pattern =".csv")
n <- length(file.names)
Datalengths = rep(c(1,n),nrow=n)
data <- vector(mode="list", length = n)
day.data <- vector(mode="list", length = n)
data.key <- rep("",n)
Weekend=weekdays(as.POSIXlt(c(as.Date('2019-01-26'),as.Date('2019-01-27')),format = "%Y-%m-%d", tz = "GMT"),abbreviate = TRUE)
sat<-substring(Weekend[1],1:2,1:2)
sun<-substring(Weekend[2],1:2,1:2)
# Loading a single table to initialize dates
dt.tmp <- read.table(paste(data.path,file.names[1], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(dt.tmp)[1] = 'StartDateTime'
StartDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
EndDays <- strptime(dt.tmp$EndDateTime[1:n], format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
k <- 0;
for(i in 1:n){
dt.tmp <- read.table(paste(data.path,file.names[i], sep = ""), sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
dt.tmp$X <- NULL
dt.tmp <- dt.tmp[,-1]
names(dt.tmp)[1]="ObsTime"
dt.tmp$ObsTime <- strptime(dt.tmp$ObsTime, format = "%d-%m-%Y %H:%M:%S", tz = "GMT")
# Removing data before startdate of weather data
#while(as.POSIXlt(x="2017-12-31 23:00:00",tz="GMT", format = "%Y-%m-%d %H:%M:%S")>=dt.tmp$ObsTime[length(dt.tmp$ObsTime)]){
#  dt.tmp<-dt.tmp[1:(length(dt.tmp$ObsTime)-1),]
#}
# Add logical vairable for weekends
tmp.wd <- as.Date(dt.tmp$ObsTime,tz="GMT")
tmp.wd <-weekdays(tmp.wd,abbreviate = TRUE)
dt.tmp$Weekend <- grepl(intersect(sat,sun),tmp.wd)
dt.tmp.noNA<- dt.tmp
# Fill missing null values.
tmp.xts <- xts(dt.tmp[,-1], order.by=dt.tmp[,1])
t1<-rev(seq(from=tail(dt.tmp$ObsTime,n=1), to=dt.tmp$ObsTime[1], by="hour"))
d1 <- xts(rep(1,length(t1)), order.by=t1)
x <- merge(d1,tmp.xts,all=TRUE)
tmp.df <- data.frame(ObsTime=index(x),coredata(x[,-1]))
dt.tmp <- tmp.df[dim(tmp.df)[1]:1,]
#Datalengths[i] = length(dt.tmp)
# Setting parameters for data checking
par = c('min_obs'=1000, 'miss_fraction'=1/20)
# If the data check is ok, store that data set
if (DataChecking(dt.tmp,par)==TRUE)
{
k=k+1
data[[k]] <- dt.tmp
# Setting start and end times for each table.
EndDays[k]= data[[k]]$ObsTime[1]
StartDays[k]=data[[k]]$ObsTime[length(dt.tmp$ObsTime)]
#Making daily data
tmp.dat <- dt.tmp.noNA
tmp.dat$ObsTime <- as.Date(tmp.dat$ObsTime,tz="GMT")
tmp.dat$Obs <- rep(1,length(tmp.dat$ObsTime))
tmp.d1 <-aggregate(x=tmp.dat[,-1],by= data.frame(Date = tmp.dat[,1]),FUN = mean)
tmp.d2 <-aggregate(x=tmp.dat[,9],by= data.frame(Date = tmp.dat[,1]),FUN = sum)
tmp.dat <-data.frame(tmp.d1[,-9],Obs=tmp.d2[,2])
# Fill missing null values.
tmp.xts <- xts(tmp.dat[,-1], order.by=tmp.dat[,1])
t1<-rev(seq(from=tmp.dat$Date[1], to=tail(tmp.dat$Date,n=1), by="day"))
d1 <- xts(rep(1,length(t1)), order.by=t1)
x <- merge(d1,tmp.xts,all=TRUE)
tmp.df <- data.frame(Date=index(x),coredata(x[,-1]))
tmp.dat <- tmp.df[dim(tmp.df)[1]:1,]
day.data[[k]] <-tmp.dat
data.key[k]<-substr(file.names[i],1,36)
}
}
if (k<n){
data<-data[-(k+1:n)]
day.data<-day.data[-(k+1:n)]
data.key<-data.key[-(k+1:n)]
}
# k is new n
n <- k
tmp.df<-data.frame(Key=data.key)
BBR.tmp <- read.table('../BBRdata.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
BBR <- merge(tmp.df,BBR.tmp)
# Reading weather data
weather <- read.table('../WeatherData_01-01-2018_02-06-2019.csv', sep=";", stringsAsFactors=FALSE, header = TRUE, dec=',')
names(weather)[1]="ObsTime"
weather$ObsTime = strptime(weather$ObsTime,format='%d-%m-%Y %H:%M:%S',tz = 'GMT')
weather$IsHistoricalEstimated=weather$IsHistoricalEstimated=="True"
weather$X <- NULL
# Sorting dates
sStartDays <- StartDays[order(StartDays)]
sEndDays <- EndDays[order(EndDays)]
weatherStart = weather$ObsTime[1]
weatherEnd = weather$ObsTime[length(weather$ObsTime[weather$IsHistoricalEstimated==FALSE])]
weather <- weather[dim(weather)[1]:1,]
# Making temporary weather data in order to merge it with the house data
tmp <- weather[(weather$ObsTime <= EndDays[42]),]
tmp <- tmp[tmp$ObsTime >= StartDays[42],]
#Making daily weather data
tmp.dat <- weather
tmp.dat$ObsTime <- as.Date(tmp.dat$ObsTime,tz="GMT")
tmp.dat$Obs <- rep(1,length(tmp.dat$ObsTime))
tmp.d1 <-aggregate(x=tmp.dat[,-1],by= data.frame(Date = tmp.dat[,1]),FUN = mean)
tmp.d2 <-aggregate(x=tmp.dat[,13],by= data.frame(Date = tmp.dat[,1]),FUN = sum)
tmp.dat <-data.frame(tmp.d1[,-13],Obs=tmp.d2[,2])
day.weather <-tmp.dat
day.weather <- day.weather[dim(day.weather)[1]:1,]
# Making temporary weather data in order to merge it with the house data
day.tmp <- day.weather[(day.weather$Date <= as.Date(EndDays[42],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(StartDays[42],tz="GMT"),]
# Making average daily data:
day.avg <- day.data[[match(max(Datalengths),Datalengths)]]
#day.avg[,1]<-seq(from=as.Date(min(StartDays),tz="GMT"), to=as.Date(max(EndDays),tz="GMT"), by="day")
m=dim(day.avg)[2]
for(j in 2:m){
day.avg[,j] <- rep(0,length(day.avg[,1]))
weightavg<-rep(0,length(day.avg[,1]))
for (i in 1:n){
tmp.index<-1+difftime(as.Date(StartDays[i],tz="GMT"),as.Date(min(StartDays),tz="GMT"), units ="day"):difftime(as.Date(EndDays[i],tz="GMT"),as.Date(min(StartDays),tz="GMT"), units ="day")
tmp.data=day.data[[i]][,j]
tmp.index<- tmp.index[!is.na(tmp.data)]
day.avg[tmp.index,j] <- day.avg[tmp.index,j] + tmp.data[tmp.index]
weightavg[tmp.index] <- weightavg[tmp.index] + rep(1,length(tmp.data)) - is.na(day.data[[i]]$Flow)
}
day.avg[[j]] <- day.avg[[j]]/weightavg
}
# Adding consumption attribute to daily avg. house data
day.avg$Consumption <- day.avg$Volume*day.avg$CoolingDegree
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
library(ggplot2)
library(gridExtra)
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Example using Watts colors
plot(data[[1]]$Flow,col=Wcol[2])
# Correlation between consumption and wind
plot(tmp$WindSpeed,data[[1]]$CoolingDegree*data[[1]]$Flow)
plot(tmp$WindDirection,data[[42]]$CoolingDegree*data[[42]]$Flow)
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
for (i in 1:n) {
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]<-
avgconsumption[difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours")]+
data[[i]]$Flow*data[[i]]$CoolingDegree
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]<-
weightavg[difftime(StartDays[i]+1,min(StartDays), units ="hours"):difftime(EndDays[i]+1,min(StartDays), units ="hours")]+
rep(1,length(data[[1]]$Flow))
}
length(difftime(StartDays[i],min(StartDays), units ="hours"):difftime(EndDays[i],min(StartDays), units ="hours"))
length(data[[i]]$Flow*data[[i]]$CoolingDegree)
maxskip<-rep(0,n)
sumskip<-rep(0,n)
for (i in 1:n) {
ntmp=length(data[[i]]$StartDateTime)
tmpdiftest=difftime(data[[i]]$StartDateTime[1:ntmp-1],data[[i]]$StartDateTime[2:ntmp], units ="hours")
maxskip[i]=max(tmpdiftest)
if(max(tmpdiftest)>1){
print(match(2:max(tmpdiftest),tmpdiftest))
}
}
n69=length(data[[69]]$StartDateTime)
tmpdiftest=difftime(data[[69]]$StartDateTime[1:n69-1],data[[69]]$StartDateTime[2:n69], units ="hours")
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','UltravioletIndex','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
# Possible multicolinarity between Temperature and DewPoint
cor(day.tmp['Temperature'],day.tmp['DewPoint'])
# Removing DewPoint
weather$DewPoint <- NULL
day.weather$DewPoint <- NULL
# Possible multicolinarity between Condition and PrecipitationProbability
cor(day.tmp['PrecipitationProbability'],day.tmp['Condition'])
# Possible multicolinarity between UltravioletIndex and Temperature
cor(day.tmp['Temperature'],day.tmp['UltravioletIndex'])
# Average consumption for all houses during a year
avg.plot1 <- ggplot(data = day.avg, mapping = aes(Date, Consumption)) + geom_point() +
ggtitle("Average consumption for all houses during a year ") + xlab("Time") +
ylab("Average consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
# Selected houses based on wether they follow the trend
day.plot.flot <- ggplot(data = day.data[[18]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 18")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
day.plot.gak <- ggplot(data = day.data[[42]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 42")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
{
pdf(file = "../figures/daily_cons.pdf",width = 4.5,height = 2.8,pointsize = 9)
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
grid.arrange(avg.plot1, day.plot.flot, day.plot.gak, nrow = 3)
dev.off()
}
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
grid.arrange(avg.plot1, day.plot.flot, day.plot.gak, nrow = 3)
source("data.R")
# Possible multicolinarity between Temperature and DewPoint
cor(day.tmp['Temperature'],day.tmp['DewPoint'])
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
library(ggplot2)
library(gridExtra)
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Example using Watts colors
plot(data[[1]]$Flow,col=Wcol[2])
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
# House pairs
{
pdf(file = "../figures/house_attri.pdf",width = 4.5,height = 2.8,pointsize = 9)
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
dev.off()
}
# Weather pairs
{
pdf(file = "../figures/weather_cons_focus.pdf",width = 4.5,height = 2.8,pointsize = 9)
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','UltravioletIndex','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
dev.off()
}
# Possible multicolinarity between Temperature and DewPoint
cor(day.tmp['Temperature'],day.tmp['DewPoint'])
# Removing DewPoint
weather$DewPoint <- NULL
day.weather$DewPoint <- NULL
# Possible multicolinarity between Condition and PrecipitationProbability
cor(day.tmp['PrecipitationProbability'],day.tmp['Condition'])
# Possible multicolinarity between UltravioletIndex and Temperature
cor(day.tmp['Temperature'],day.tmp['UltravioletIndex'])
par(mar=c(3,4,2,1), mgp=c(2,0.7,0))
model.data <- weatherCons
for (i in 1:n) {
model.tmp <- model.data[[i]]
model.tmp <- model.tmp[model.tmp$Temperature <= 12,]
model.data[[i]]<-model.tmp
}
No.days<-rep(0,n)
cons.areal <- rep(-0.01,n)
for(i in 1:n){
if(!is.na(BBR$Samlet.areal[i])){
cons.areal[i] <- mean(model.data[[i]]$Consumption[!is.na(model.data[[i]]$Consumption)])/BBR$Samlet.areal[i]
No.days[i]<-length(model.data[[i]]$Date)
}
}
tmp<-1:n
tmp<- tmp[-10]
cons.areal<-cons.areal[tmp]
No.days<-No.days[tmp]
plot(tmp,cons.areal)
tmp2<-BBR$Hustype=="Parcel"
tmp2<-tmp2[-10]
points(tmp[tmp2],cons.areal[tmp2],col=2,pch=19)
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
break.points<-as.numeric(quantile(cons.areal, c(.33,.67)))
Construction.Year <- tmp
for(i in 1:length(tmp)){
if(!is.na(BBR$Ombygningsaar[tmp[i]])){
Construction.Year[i]<-BBR$Ombygningsaar[tmp[i]]
}else{
Construction.Year[i]<-BBR$Byggeaar[tmp[i]]
}
}
plot(Construction.Year,cons.areal,col=Wcol[2],main='Year of Construction Consumption',xlab='Year of Construction',ylab = expression(paste("Consumption pr.  ", m^2, sep = "")))
points(Construction.Year[cons.areal>break.points[1]],cons.areal[cons.areal>break.points[1]],col=Wcol[3])
points(Construction.Year[cons.areal>break.points[2]],cons.areal[cons.areal>break.points[2]],col=Wcol[4])
legend('topright', legend = c('Highest consumption', 'Middle consumption', 'Lowest consumption'), col = c(Wcol[4],Wcol[3],Wcol[2]), pch = 1, bty = 'n')
source("BBR.R")
# Investigating BBR data
plot(Construction.Year,cons.areal,col=Wcol[2],main='Year of Construction Consumption',xlab='Year of Construction',ylab = expression(paste("Consumption pr.  ", m^2, sep = "")))
points(Construction.Year[cons.areal>break.points[1]],cons.areal[cons.areal>break.points[1]],col=Wcol[3])
points(Construction.Year[cons.areal>break.points[2]],cons.areal[cons.areal>break.points[2]],col=Wcol[4])
legend('topright', legend = c('Highest consumption', 'Middle consumption', 'Lowest consumption'), col = c(Wcol[4],Wcol[3],Wcol[2]), pch = 1, bty = 'n')
byg.points<-as.numeric(quantile(Construction.Year, c(.33,.67)))
plot(No.days,cons.areal,col=Wcol[2])
points(No.days[Construction.Year>byg.points[1]],cons.areal[Construction.Year>byg.points[1]],col=Wcol[3])
points(No.days[Construction.Year>byg.points[2]],cons.areal[Construction.Year>byg.points[2]],col=Wcol[4])
# Investigating BBR data
plot(Construction.Year,cons.areal,col=Wcol[2],main='Year of Construction Consumption',xlab='Year of Construction',ylab = expression(paste("Consumption pr.  ", m^2, sep = "")))
points(Construction.Year[cons.areal>break.points[1]],cons.areal[cons.areal>break.points[1]],col=Wcol[3])
points(Construction.Year[cons.areal>break.points[2]],cons.areal[cons.areal>break.points[2]],col=Wcol[4])
legend('topright', legend = c('Highest consumption', 'Middle consumption', 'Lowest consumption'), col = c(Wcol[4],Wcol[3],Wcol[2]), pch = 1, bty = 'n')
source('~/Dropbox/DTU/6. semester/Bachelorprojekt F19/Bachelor/scripts/data.R', echo=TRUE)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
source("data.R")
source("BBR.R")
library(ggplot2)
library(gridExtra)
# Watts colors
Wcol=c(1,rgb(132,202,41,maxColorValue = 255),rgb(231,176,59,maxColorValue = 255),rgb(229,56,50,maxColorValue = 255))
# Example using Watts colors
plot(data[[1]]$Flow,col=Wcol[2])
avgconsumption<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
weightavg<-rep(0,difftime(max(EndDays),min(StartDays), units ="hours"))
difftime(max(EndDays),min(StartDays), units ="hours")
avgconsumption[difftime(max(EndDays),min(StartDays), units ="hours")]
difftime(StartDays[1],min(StartDays), units ="hours")
difftime(EndDays[1],min(StartDays), units ="hours")
# Investigating pairs plots
day.tmp <- day.weather[(day.weather$Date <= as.Date(day.avg$Date[1],tz="GMT")),]
day.tmp <- day.tmp[day.tmp$Date >= as.Date(tail(day.avg$Date,1),tz="GMT"),]
# House pairs
{
pdf(file = "../figures/house_attri.pdf",width = 4.5,height = 2.8,pointsize = 9)
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(day.avg[c('Date','Energy','Flow','Volume','TemperatureIn','TemperatureOut','CoolingDegree','Consumption')])
dev.off()
}
# Weather pairs
{
pdf(file = "../figures/weather_cons_focus.pdf",width = 4.5,height = 2.8,pointsize = 9)
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
pairs(c(day.avg['Consumption'], day.tmp[c('Date','Temperature','WindSpeed','WindDirection','SunHour','Condition','UltravioletIndex','MeanSeaLevelPressure','DewPoint','PrecipitationProbability')]))
dev.off()
}
# Possible multicolinarity between Temperature and DewPoint
cor(day.tmp['Temperature'],day.tmp['DewPoint'])
# Removing DewPoint
weather$DewPoint <- NULL
day.weather$DewPoint <- NULL
# Possible multicolinarity between Condition and PrecipitationProbability
cor(day.tmp['PrecipitationProbability'],day.tmp['Condition'])
# Possible multicolinarity between UltravioletIndex and Temperature
cor(day.tmp['Temperature'],day.tmp['UltravioletIndex'])
# Average consumption for all houses during a year
avg.plot1 <- ggplot(data = day.avg, mapping = aes(Date, Consumption)) + geom_point() +
ggtitle("Average consumption for all houses during a year ") + xlab("Time") +
ylab("Average consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
# Selected houses based on wether they follow the trend
day.plot.flot <- ggplot(data = day.data[[18]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 18")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
day.plot.gak <- ggplot(data = day.data[[42]], mapping = aes(Date, (CoolingDegree*Volume))) + geom_point() +
ggtitle(paste("Daily consumption for house 42")) + xlab("Time") +
ylab("Daily consumption (kwh)") +
geom_smooth(col=Wcol[2], se = T)
{
pdf(file = "../figures/daily_cons.pdf",width = 4.5,height = 2.8,pointsize = 9)
par(mar=c(3,3,2,1), mgp=c(2,0.7,0))
grid.arrange(avg.plot1, day.plot.flot, day.plot.gak, nrow = 3)
dev.off()
}
grid.arrange(avg.plot1, day.plot.flot, day.plot.gak, nrow = 3)
